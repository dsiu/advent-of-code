// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Id from "rescript/lib/es6/belt_Id.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Belt_MutableSet from "rescript/lib/es6/belt_MutableSet.js";
import * as Belt_MutableMapString from "rescript/lib/es6/belt_MutableMapString.js";
import * as Belt_MutableSetString from "rescript/lib/es6/belt_MutableSetString.js";

function Make(BASE) {
  var containerMake = BASE.containerMake;
  var containerAdd = BASE.containerAdd;
  var containerRemove = BASE.containerRemove;
  var containerHas = BASE.containerHas;
  var containerToArray = BASE.containerToArray;
  var addVertex = function (t, x) {
    var match = Belt_MutableMapString.get(t, x);
    if (match !== undefined) {
      return ;
    } else {
      return Belt_MutableMapString.set(t, x, Curry._1(containerMake, undefined));
    }
  };
  var removeVertex = Belt_MutableMapString.remove;
  var getVertex = function (t, x) {
    addVertex(t, x);
    var v = Belt_MutableMapString.get(t, x);
    if (v !== undefined) {
      return Caml_option.valFromOption(v);
    }
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  };
  var addEdge = function (t, x, e) {
    Curry._2(containerAdd, getVertex(t, x), e);
  };
  var removeEdge = function (t, x, y) {
    if (Belt_MutableMapString.has(t, x)) {
      return Curry._2(containerRemove, getVertex(t, x), y);
    }
    
  };
  var adjacent = function (t, x, y) {
    var v = Belt_MutableMapString.get(t, x);
    if (v !== undefined) {
      return Curry._2(containerHas, Caml_option.valFromOption(v), y);
    } else {
      return false;
    }
  };
  var neighbors = function (t, x) {
    return Belt_Option.getWithDefault(Belt_MutableMapString.get(t, x), Curry._1(containerMake, undefined));
  };
  var toString = function (t) {
    var str = {
      contents: ""
    };
    Belt_MutableMapString.forEachU(t, (function (k, v) {
            str.contents = "" + str.contents + "" + k + ": [ " + Curry._1(containerToArray, v).join(",") + " ]\n";
          }));
    return str.contents;
  };
  return {
          make: Belt_MutableMapString.make,
          addVertex: addVertex,
          removeVertex: removeVertex,
          getVertex: getVertex,
          addEdge: addEdge,
          removeEdge: removeEdge,
          adjacent: adjacent,
          neighbors: neighbors,
          toString: toString
        };
}

function addVertex(t, x) {
  var match = Belt_MutableMapString.get(t, x);
  if (match !== undefined) {
    return ;
  } else {
    return Belt_MutableMapString.set(t, x, Belt_MutableSetString.make(undefined));
  }
}

var removeVertex = Belt_MutableMapString.remove;

function getVertex(t, x) {
  addVertex(t, x);
  var v = Belt_MutableMapString.get(t, x);
  if (v !== undefined) {
    return Caml_option.valFromOption(v);
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function addEdge(t, x, e) {
  Belt_MutableSetString.add(getVertex(t, x), e);
}

function removeEdge(t, x, y) {
  if (Belt_MutableMapString.has(t, x)) {
    return Belt_MutableSetString.remove(getVertex(t, x), y);
  }
  
}

function adjacent(t, x, y) {
  var v = Belt_MutableMapString.get(t, x);
  if (v !== undefined) {
    return Belt_MutableSetString.has(Caml_option.valFromOption(v), y);
  } else {
    return false;
  }
}

function neighbors(t, x) {
  return Belt_Option.getWithDefault(Belt_MutableMapString.get(t, x), Belt_MutableSetString.make(undefined));
}

function toString(t) {
  var str = {
    contents: ""
  };
  Belt_MutableMapString.forEachU(t, (function (k, v) {
          str.contents = "" + str.contents + "" + k + ": [ " + Belt_MutableSetString.toArray(v).join(",") + " ]\n";
        }));
  return str.contents;
}

var $$String = {
  make: Belt_MutableMapString.make,
  addVertex: addVertex,
  removeVertex: removeVertex,
  getVertex: getVertex,
  addEdge: addEdge,
  removeEdge: removeEdge,
  adjacent: adjacent,
  neighbors: neighbors,
  toString: toString
};

function eq(param, param$1) {
  return param[0] === param$1[0];
}

function cmp(param, param$1) {
  return Caml.string_compare(param[0], param$1[0]);
}

function hash(param) {
  return caml_hash_final_mix(caml_hash_mix_string(0, param[0]));
}

var T = {
  eq: eq,
  cmp: cmp,
  hash: hash
};

var MutableSetTuple = Belt_Id.MakeComparable({
      cmp: cmp
    });

var TupleImpl = {
  T: T,
  MutableSetTuple: MutableSetTuple
};

function addVertex$1(t, x) {
  var match = Belt_MutableMapString.get(t, x);
  if (match !== undefined) {
    return ;
  } else {
    return Belt_MutableMapString.set(t, x, Belt_MutableSet.make(MutableSetTuple));
  }
}

var removeVertex$1 = Belt_MutableMapString.remove;

function getVertex$1(t, x) {
  addVertex$1(t, x);
  var v = Belt_MutableMapString.get(t, x);
  if (v !== undefined) {
    return Caml_option.valFromOption(v);
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function addEdge$1(t, x, e) {
  Belt_MutableSet.add(getVertex$1(t, x), e);
}

function removeEdge$1(t, x, y) {
  if (Belt_MutableMapString.has(t, x)) {
    return Belt_MutableSet.remove(getVertex$1(t, x), y);
  }
  
}

function adjacent$1(t, x, y) {
  var v = Belt_MutableMapString.get(t, x);
  if (v !== undefined) {
    return Belt_MutableSet.has(Caml_option.valFromOption(v), y);
  } else {
    return false;
  }
}

function neighbors$1(t, x) {
  return Belt_Option.getWithDefault(Belt_MutableMapString.get(t, x), Belt_MutableSet.make(MutableSetTuple));
}

function toString$1(t) {
  var str = {
    contents: ""
  };
  Belt_MutableMapString.forEachU(t, (function (k, v) {
          str.contents = "" + str.contents + "" + k + ": [ " + Belt_MutableSet.toArray(v).join(",") + " ]\n";
        }));
  return str.contents;
}

var Tuple = {
  make: Belt_MutableMapString.make,
  addVertex: addVertex$1,
  removeVertex: removeVertex$1,
  getVertex: getVertex$1,
  addEdge: addEdge$1,
  removeEdge: removeEdge$1,
  adjacent: adjacent$1,
  neighbors: neighbors$1,
  toString: toString$1
};

export {
  Make ,
  $$String ,
  TupleImpl ,
  Tuple ,
}
/* MutableSetTuple Not a pure module */
