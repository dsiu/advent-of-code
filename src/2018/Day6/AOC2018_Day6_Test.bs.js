// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var AOC2018_Day6$AdventOfCode = require("./AOC2018_Day6.bs.js");
var AOC2018_Day6_Data$AdventOfCode = require("./AOC2018_Day6_Data.bs.js");
var AOC2018_Day6_Data_Sample$AdventOfCode = require("./AOC2018_Day6_Data_Sample.bs.js");

Jest.describe("2018 Day6", (function (param) {
        Jest.describe("Part 1", (function (param) {
                Jest.test("Parse Coord", (function (param) {
                        var expected = [
                          AOC2018_Day6$AdventOfCode.Coord.make(1, 2),
                          AOC2018_Day6$AdventOfCode.Coord.make(3, 4),
                          AOC2018_Day6$AdventOfCode.Coord.make(5, 6)
                        ];
                        var result = AOC2018_Day6$AdventOfCode.Coord.parseCoords("1,2\n      3,4\n      5,6".split("\n"));
                        return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
                      }));
                Jest.test("maxXY", (function (param) {
                        var expected = AOC2018_Day6$AdventOfCode.Coord.make(5, 8);
                        var result = AOC2018_Day6$AdventOfCode.Coord.maxXY(AOC2018_Day6$AdventOfCode.Coord.parseCoords("0,2\n      3,8\n      5,6".split("\n")));
                        return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
                      }));
                Jest.test("minXY", (function (param) {
                        var expected = AOC2018_Day6$AdventOfCode.Coord.make(0, 1);
                        var result = AOC2018_Day6$AdventOfCode.Coord.minXY(AOC2018_Day6$AdventOfCode.Coord.parseCoords("0,2\n          3,8\n          5,1".split("\n")));
                        return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
                      }));
                Jest.test("dist", (function (param) {
                        var a = AOC2018_Day6$AdventOfCode.Coord.make(1, 1);
                        var b = AOC2018_Day6$AdventOfCode.Coord.make(14, 27);
                        var result = AOC2018_Day6$AdventOfCode.Coord.dist(a, b);
                        return Jest.Expect.toEqual(39, Jest.Expect.expect(result));
                      }));
                return Jest.Skip.test("Solve Part 1", (function (param) {
                              return Jest.Expect.toEqual(1, Jest.Expect.expect(1));
                            }));
              }));
        return Jest.describe("Part 2", (function (param) {
                      return Jest.Skip.test("Solve Part 2", (function (param) {
                                    return Jest.Expect.toEqual(1, Jest.Expect.expect(1));
                                  }));
                    }));
      }));

var data = AOC2018_Day6_Data$AdventOfCode.data;

var sampleData = AOC2018_Day6_Data_Sample$AdventOfCode.data;

exports.data = data;
exports.sampleData = sampleData;
/*  Not a pure module */
