// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as AOC2018_Day3$AdventOfCode from "./AOC2018_Day3.mjs";

Jest.describe("2018 Day3", () => Jest.describe("Part1", () => {
  Jest.test("parse line", () => {
    let test_line = "#1 @ 669,271: 17x11";
    let result = AOC2018_Day3$AdventOfCode.Claim.parseLine(test_line);
    let expected = [
      test_line,
      "1",
      "669",
      "271",
      "17",
      "11"
    ];
    return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
  });
  Jest.test("make claim", () => {
    let result = AOC2018_Day3$AdventOfCode.Claim.makeClaim("#1 @ 669,271: 17x11");
    let expected = AOC2018_Day3$AdventOfCode.Claim.make(1, 669, 271, 17, 11);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
  });
  Jest.test("find max x", () => {
    let result = AOC2018_Day3$AdventOfCode.Claims.findMaxX(AOC2018_Day3$AdventOfCode.Claims.make([
      "#1 @ 100,200: 34x56",
      "#2 @ 200,300: 78x90"
    ]));
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 278);
  });
  Jest.test("find max y", () => {
    let result = AOC2018_Day3$AdventOfCode.Claims.findMaxY(AOC2018_Day3$AdventOfCode.Claims.make([
      "#1 @ 100,200: 34x56",
      "#2 @ 200,300: 78x90"
    ]));
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 390);
  });
  Jest.test("fabric matrix - single value per point +", () => {
    let test_fab = AOC2018_Day3$AdventOfCode.Fabric.fill(AOC2018_Day3$AdventOfCode.Fabric.make(10, 10), Utils$AdventOfCode.add);
    let result1 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 1, 1);
    let result2 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 3, 5);
    return Jest.Expect.toEqual(Jest.Expect.expect([
      result1,
      result2
    ]), [
      [2],
      [8]
    ]);
  });
  Jest.test("fabric matrix - single value per point *", () => {
    let test_fab = AOC2018_Day3$AdventOfCode.Fabric.fill(AOC2018_Day3$AdventOfCode.Fabric.make(10, 10), Utils$AdventOfCode.mul);
    let result1 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 2, 2);
    let result2 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 4, 6);
    return Jest.Expect.toEqual(Jest.Expect.expect([
      result1,
      result2
    ]), [
      [4],
      [24]
    ]);
  });
  Jest.test("fabric matrix - multiple value per point +/*", () => {
    let test_fab = AOC2018_Day3$AdventOfCode.Fabric.fill(AOC2018_Day3$AdventOfCode.Fabric.fill(AOC2018_Day3$AdventOfCode.Fabric.make(15, 15), Utils$AdventOfCode.add), Utils$AdventOfCode.mul);
    let result1 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 9, 8);
    let result2 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 2, 5);
    return Jest.Expect.toEqual(Jest.Expect.expect([
      result1,
      result2
    ]), [
      [
        17,
        72
      ],
      [
        7,
        10
      ]
    ]);
  });
  Jest.test("fabric add claim (demo case)", () => {
    let allClaims = AOC2018_Day3$AdventOfCode.Claims.make([
      "#1 @ 1,3: 4x4",
      "#2 @ 3,1: 4x4",
      "#3 @ 5,5: 2x2"
    ]);
    let w = AOC2018_Day3$AdventOfCode.Claims.findMaxX(allClaims);
    let h = AOC2018_Day3$AdventOfCode.Claims.findMaxY(allClaims);
    let test_fab = AOC2018_Day3$AdventOfCode.Fabric.make(w, h);
    let test_fab$1 = Belt_Array.reduce(allClaims, test_fab, (acc, i) => AOC2018_Day3$AdventOfCode.Fabric.addClaim(acc, i));
    let countOverlapTwoMore = AOC2018_Day3$AdventOfCode.Fabric.countOverlap(test_fab$1, AOC2018_Day3$AdventOfCode.Fabric.twoOrMore);
    return Jest.Expect.toEqual(Jest.Expect.expect(countOverlapTwoMore), 4);
  });
  Jest.test("solve Part1", () => {
    let result = AOC2018_Day3$AdventOfCode.solvePart1();
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 118223);
  });
  Jest.test("part 2 (demo case)", () => {
    let allClaims = AOC2018_Day3$AdventOfCode.Claims.make([
      "#3 @ 1,3: 4x4",
      "#7 @ 3,1: 4x4",
      "#11 @ 5,5: 2x2"
    ]);
    let w = AOC2018_Day3$AdventOfCode.Claims.findMaxX(allClaims);
    let h = AOC2018_Day3$AdventOfCode.Claims.findMaxY(allClaims);
    let test_fab = AOC2018_Day3$AdventOfCode.Fabric.make(w, h);
    let test_fab$1 = Belt_Array.reduce(allClaims, test_fab, (acc, i) => AOC2018_Day3$AdventOfCode.Fabric.addClaim(acc, i));
    let result = AOC2018_Day3$AdventOfCode.Fabric.countNonOverlapClaim(test_fab$1, allClaims);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [11]);
  });
  Jest.test("solve part2", () => {
    let result = AOC2018_Day3$AdventOfCode.solvePart2();
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [412]);
  });
}));

/*  Not a pure module */
