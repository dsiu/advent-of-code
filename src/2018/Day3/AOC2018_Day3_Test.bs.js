// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/rescript-jest/src/jest.bs.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");
var AOC2018_Day3$AdventOfCode = require("./AOC2018_Day3.bs.js");

Jest.describe("2018 Day3", (function (param) {
        return Jest.describe("Part1", (function (param) {
                      Jest.test("parse line", (function (param) {
                              var test_line = "#1 @ 669,271: 17x11";
                              var result = AOC2018_Day3$AdventOfCode.Claim.parseLine(test_line);
                              var expected = [
                                test_line,
                                "1",
                                "669",
                                "271",
                                "17",
                                "11"
                              ];
                              return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                            }));
                      Jest.test("make claim", (function (param) {
                              var result = AOC2018_Day3$AdventOfCode.Claim.makeClaim("#1 @ 669,271: 17x11");
                              var expected = AOC2018_Day3$AdventOfCode.Claim.make(1, 669, 271, 17, 11);
                              return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                            }));
                      Jest.test("find max x", (function (param) {
                              var result = AOC2018_Day3$AdventOfCode.Claims.findMaxX(AOC2018_Day3$AdventOfCode.Claims.make([
                                        "#1 @ 100,200: 34x56",
                                        "#2 @ 200,300: 78x90"
                                      ]));
                              return Jest.Expect.toEqual(Jest.Expect.expect(result), 278);
                            }));
                      Jest.test("find max y", (function (param) {
                              var result = AOC2018_Day3$AdventOfCode.Claims.findMaxY(AOC2018_Day3$AdventOfCode.Claims.make([
                                        "#1 @ 100,200: 34x56",
                                        "#2 @ 200,300: 78x90"
                                      ]));
                              return Jest.Expect.toEqual(Jest.Expect.expect(result), 390);
                            }));
                      Jest.test("fabric matrix - single value per point +", (function (param) {
                              var test_fab = AOC2018_Day3$AdventOfCode.Fabric.fill(AOC2018_Day3$AdventOfCode.Fabric.make(10, 10), Utils$AdventOfCode.add);
                              var result1 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 1, 1);
                              var result2 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 3, 5);
                              return Jest.Expect.toEqual(Jest.Expect.expect([
                                              result1,
                                              result2
                                            ]), [
                                          [2],
                                          [8]
                                        ]);
                            }));
                      Jest.test("fabric matrix - single value per point *", (function (param) {
                              var test_fab = AOC2018_Day3$AdventOfCode.Fabric.fill(AOC2018_Day3$AdventOfCode.Fabric.make(10, 10), Utils$AdventOfCode.mul);
                              var result1 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 2, 2);
                              var result2 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 4, 6);
                              return Jest.Expect.toEqual(Jest.Expect.expect([
                                              result1,
                                              result2
                                            ]), [
                                          [4],
                                          [24]
                                        ]);
                            }));
                      Jest.test("fabric matrix - multiple value per point +/*", (function (param) {
                              var test_fab = AOC2018_Day3$AdventOfCode.Fabric.fill(AOC2018_Day3$AdventOfCode.Fabric.fill(AOC2018_Day3$AdventOfCode.Fabric.make(15, 15), Utils$AdventOfCode.add), Utils$AdventOfCode.mul);
                              var result1 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 9, 8);
                              var result2 = AOC2018_Day3$AdventOfCode.Fabric.getPoint(test_fab, 2, 5);
                              return Jest.Expect.toEqual(Jest.Expect.expect([
                                              result1,
                                              result2
                                            ]), [
                                          [
                                            17,
                                            72
                                          ],
                                          [
                                            7,
                                            10
                                          ]
                                        ]);
                            }));
                      Jest.test("fabric add claim (demo case)", (function (param) {
                              var allClaims = AOC2018_Day3$AdventOfCode.Claims.make([
                                    "#1 @ 1,3: 4x4",
                                    "#2 @ 3,1: 4x4",
                                    "#3 @ 5,5: 2x2"
                                  ]);
                              var w = AOC2018_Day3$AdventOfCode.Claims.findMaxX(allClaims);
                              var h = AOC2018_Day3$AdventOfCode.Claims.findMaxY(allClaims);
                              var test_fab = AOC2018_Day3$AdventOfCode.Fabric.make(w, h);
                              var test_fab$1 = Belt_Array.reduce(allClaims, test_fab, (function (acc, i) {
                                      return AOC2018_Day3$AdventOfCode.Fabric.addClaim(acc, i);
                                    }));
                              var countOverlapTwoMore = AOC2018_Day3$AdventOfCode.Fabric.countOverlap(test_fab$1, AOC2018_Day3$AdventOfCode.Fabric.twoOrMore);
                              return Jest.Expect.toEqual(Jest.Expect.expect(countOverlapTwoMore), 4);
                            }));
                      Jest.test("solve Part1", (function (param) {
                              var result = AOC2018_Day3$AdventOfCode.solvePart1(undefined);
                              return Jest.Expect.toEqual(Jest.Expect.expect(result), 118223);
                            }));
                      Jest.test("part 2 (demo case)", (function (param) {
                              var allClaims = AOC2018_Day3$AdventOfCode.Claims.make([
                                    "#3 @ 1,3: 4x4",
                                    "#7 @ 3,1: 4x4",
                                    "#11 @ 5,5: 2x2"
                                  ]);
                              var w = AOC2018_Day3$AdventOfCode.Claims.findMaxX(allClaims);
                              var h = AOC2018_Day3$AdventOfCode.Claims.findMaxY(allClaims);
                              var test_fab = AOC2018_Day3$AdventOfCode.Fabric.make(w, h);
                              var test_fab$1 = Belt_Array.reduce(allClaims, test_fab, (function (acc, i) {
                                      return AOC2018_Day3$AdventOfCode.Fabric.addClaim(acc, i);
                                    }));
                              var result = AOC2018_Day3$AdventOfCode.Fabric.countNonOverlapClaim(test_fab$1, allClaims);
                              return Jest.Expect.toEqual(Jest.Expect.expect(result), [11]);
                            }));
                      return Jest.test("solve part2", (function (param) {
                                    var result = AOC2018_Day3$AdventOfCode.solvePart2(undefined);
                                    return Jest.Expect.toEqual(Jest.Expect.expect(result), [412]);
                                  }));
                    }));
      }));

/*  Not a pure module */
