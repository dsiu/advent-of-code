// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Day3_Data$AdventOfCode = require("./Day3_Data.bs.js");

var claimRe = /#(\d+)\s+@\s+(\d+),(\d+):\s(\d+)x(\d+)/i;

function parseLine(s) {
  var x = claimRe.exec(s.trim());
  if (x !== null) {
    return Belt_Array.map(x, (function (x) {
                  if (x == null) {
                    return "";
                  } else {
                    return x;
                  }
                }));
  } else {
    return [];
  }
}

function makeClaim(xs) {
  return {
          id: Caml_format.caml_int_of_string(Caml_array.caml_array_get(xs, 1)),
          x: Caml_format.caml_int_of_string(Caml_array.caml_array_get(xs, 2)),
          y: Caml_format.caml_int_of_string(Caml_array.caml_array_get(xs, 3)),
          w: Caml_format.caml_int_of_string(Caml_array.caml_array_get(xs, 4)),
          h: Caml_format.caml_int_of_string(Caml_array.caml_array_get(xs, 5))
        };
}

function createClaim(x) {
  return makeClaim(parseLine(x));
}

console.log(Day3_Data$AdventOfCode.data.split("\n").map(createClaim));

var data = Day3_Data$AdventOfCode.data;

exports.data = data;
exports.claimRe = claimRe;
exports.parseLine = parseLine;
exports.makeClaim = makeClaim;
exports.createClaim = createClaim;
/*  Not a pure module */
