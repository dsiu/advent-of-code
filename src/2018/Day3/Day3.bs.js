// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Caml_format = require("bs-platform/lib/js/caml_format.js");
var Day3_Data$AdventOfCode = require("./Day3_Data.bs.js");

function id(t) {
  return t.id;
}

function x(t) {
  return t.x;
}

function y(t) {
  return t.y;
}

function w(t) {
  return t.w;
}

function h(t) {
  return t.h;
}

function maxX(t) {
  return t.x + t.w | 0;
}

function maxY(t) {
  return t.y + t.h | 0;
}

function make(id, x, y, w, h) {
  return {
          id: id,
          x: x,
          y: y,
          w: w,
          h: h
        };
}

var Claim = {
  id: id,
  x: x,
  y: y,
  w: w,
  h: h,
  maxX: maxX,
  maxY: maxY,
  make: make
};

var claimRe = /#(\d+)\s+@\s+(\d+),(\d+):\s(\d+)x(\d+)/i;

function parseLine(s) {
  var x = claimRe.exec(s.trim());
  if (x !== null) {
    return Belt_Array.map(x, (function (x) {
                  if (x == null) {
                    return "";
                  } else {
                    return x;
                  }
                }));
  } else {
    return [];
  }
}

function makeClaim(x) {
  var xs = parseLine(x);
  return make(Caml_format.caml_int_of_string(Caml_array.caml_array_get(xs, 1)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(xs, 2)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(xs, 3)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(xs, 4)), Caml_format.caml_int_of_string(Caml_array.caml_array_get(xs, 5)));
}

function allClaim(lines) {
  return lines.map(makeClaim);
}

function findMax(xs, f) {
  return Belt_Array.reduce(xs, 0, (function (acc, x) {
                if (Curry._1(f, x) > acc) {
                  return Curry._1(f, x);
                } else {
                  return acc;
                }
              }));
}

function findMaxX(__x) {
  return findMax(__x, maxX);
}

function findMaxY(__x) {
  return findMax(__x, maxY);
}

function make$1(w, h) {
  return {
          w: w,
          h: h
        };
}

function w$1(t) {
  return t.w;
}

function h$1(t) {
  return t.h;
}

var Fabric = {
  make: make$1,
  w: w$1,
  h: h$1
};

var lines = Day3_Data$AdventOfCode.data.split("\n");

var __x = lines.map(makeClaim);

var size_x = findMax(__x, maxX);

var lines$1 = Day3_Data$AdventOfCode.data.split("\n");

var __x$1 = lines$1.map(makeClaim);

var size_y = findMax(__x$1, maxY);

var fab = {
  w: size_x,
  h: size_y
};

var data = Day3_Data$AdventOfCode.data;

exports.data = data;
exports.Claim = Claim;
exports.claimRe = claimRe;
exports.parseLine = parseLine;
exports.makeClaim = makeClaim;
exports.allClaim = allClaim;
exports.findMax = findMax;
exports.findMaxX = findMaxX;
exports.findMaxY = findMaxY;
exports.Fabric = Fabric;
exports.size_x = size_x;
exports.size_y = size_y;
exports.fab = fab;
/* lines Not a pure module */
