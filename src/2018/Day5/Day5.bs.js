// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Day5_Data$AdventOfCode = require("./Day5_Data.bs.js");
var Day5_Data_Test$AdventOfCode = require("./Day5_Data_Test.bs.js");

function log(prim) {
  console.log(prim);
  
}

var charArray = Day5_Data$AdventOfCode.data.split("");

var charList = Belt_List.fromArray(charArray);

function groupByN(l, n) {
  var match = Belt_List.reduce(l, [
        /* [] */0,
        /* [] */0
      ], (function (a, x) {
          var cur = a[1];
          var r = a[0];
          if (Belt_List.length(cur) === (n - 1 | 0)) {
            return [
                    Belt_List.add(r, Belt_List.reverse(Belt_List.add(cur, x))),
                    /* [] */0
                  ];
          } else {
            return [
                    r,
                    Belt_List.add(cur, x)
                  ];
          }
        }));
  return Belt_List.reverse(match[0]);
}

function groupBy2(__x) {
  return groupByN(__x, 2);
}

function groupBy3(__x) {
  return groupByN(__x, 3);
}

var charList2 = groupByN(charList, 2);

function fuse(pair) {
  var a = Belt_Option.getExn(Belt_List.get(pair, 0));
  var b = Belt_Option.getExn(Belt_List.get(pair, 1));
  if (a !== b) {
    if (a === b.toLowerCase() && b === a.toUpperCase()) {
      return true;
    } else if (b === a.toLowerCase()) {
      return a === b.toUpperCase();
    } else {
      return false;
    }
  } else {
    return false;
  }
}

function defuse(_l) {
  while(true) {
    var l = _l;
    var match = Belt_List.reduce(l, [
          /* [] */0,
          "",
          false
        ], (function (a, x) {
            var defused = a[2];
            var cur = a[1];
            var r = a[0];
            if (cur.length !== 1) {
              return [
                      r,
                      x,
                      defused
                    ];
            }
            var pair_1 = {
              hd: x,
              tl: /* [] */0
            };
            var pair = {
              hd: cur,
              tl: pair_1
            };
            var fused = fuse(pair);
            if (defused || !fused) {
              return [
                      Belt_List.add(r, cur),
                      x,
                      defused
                    ];
            } else {
              return [
                      r,
                      "",
                      true
                    ];
            }
          }));
    var cur = match[1];
    var r = match[0];
    var tailed = cur.length === 1 ? Belt_List.add(r, cur) : r;
    if (!match[2]) {
      return Belt_List.reverse(tailed);
    }
    _l = Belt_List.reverse(tailed);
    continue ;
  };
}

function findPairIndex(l) {
  var match = Belt_List.reduceWithIndex(l, [
        "",
        false,
        -1
      ], (function (a, x, i) {
          var found = a[1];
          if (found) {
            return a;
          }
          var last = a[0];
          if (!found && last.length === 0) {
            return [
                    x,
                    false,
                    -1
                  ];
          }
          if (!found && last.length > 0) {
            if (fuse({
                    hd: last,
                    tl: {
                      hd: x,
                      tl: /* [] */0
                    }
                  })) {
              return [
                      "",
                      true,
                      i - 1 | 0
                    ];
            } else {
              return [
                      x,
                      false,
                      -1
                    ];
            }
          }
          throw {
                RE_EXN_ID: "Match_failure",
                _1: [
                  "Day5.res",
                  78,
                  2
                ],
                Error: new Error()
              };
        }));
  if (match[1]) {
    return match[2];
  }
  
}

function defuse_fast(_l) {
  while(true) {
    var l = _l;
    var i = findPairIndex(l);
    if (i === undefined) {
      return l;
    }
    var h = Belt_Option.getExn(Belt_List.take(l, i));
    var t = Belt_Option.getExn(Belt_List.drop(l, i + 2 | 0));
    _l = Belt_List.concat(h, t);
    continue ;
  };
}

function solvePart1(d) {
  return 240;
}

function solvePart2(d) {
  return 4455;
}

var data = Day5_Data$AdventOfCode.data;

var testData = Day5_Data_Test$AdventOfCode.data;

exports.data = data;
exports.testData = testData;
exports.log = log;
exports.charArray = charArray;
exports.charList = charList;
exports.groupByN = groupByN;
exports.groupBy2 = groupBy2;
exports.groupBy3 = groupBy3;
exports.charList2 = charList2;
exports.fuse = fuse;
exports.defuse = defuse;
exports.findPairIndex = findPairIndex;
exports.defuse_fast = defuse_fast;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* charArray Not a pure module */
