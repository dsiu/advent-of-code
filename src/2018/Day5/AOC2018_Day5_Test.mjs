// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Belt_List from "rescript/lib/es6/Belt_List.js";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as AOC2018_Day5$AdventOfCode from "./AOC2018_Day5.mjs";
import * as AOC2018_Day5_Data$AdventOfCode from "./AOC2018_Day5_Data.mjs";
import * as AOC2018_Day5_Data_Sample$AdventOfCode from "./AOC2018_Day5_Data_Sample.mjs";

let testCharArray = AOC2018_Day5_Data_Sample$AdventOfCode.data.split("");

let testCharList = Belt_List.fromArray(testCharArray);

let charArray = AOC2018_Day5_Data$AdventOfCode.data.split("");

let charList = Belt_List.fromArray(charArray);

Jest.describe("2018 Day5", () => {
  Jest.describe("Part 1", () => {
    Jest.test("fuse", () => {
      let result_0 = AOC2018_Day5$AdventOfCode.fuse([
        "a",
        "b"
      ]);
      let result_1 = AOC2018_Day5$AdventOfCode.fuse([
        "a",
        "A"
      ]);
      let result_2 = AOC2018_Day5$AdventOfCode.fuse([
        "a",
        "B"
      ]);
      let result_3 = AOC2018_Day5$AdventOfCode.fuse([
        "c",
        "C"
      ]);
      let result_4 = AOC2018_Day5$AdventOfCode.fuse([
        "D",
        "d"
      ]);
      let result_5 = AOC2018_Day5$AdventOfCode.fuse([
        "E",
        "Z"
      ]);
      let result_6 = AOC2018_Day5$AdventOfCode.fuse([
        "A",
        "a"
      ]);
      let result = [
        result_0,
        result_1,
        result_2,
        result_3,
        result_4,
        result_5,
        result_6
      ];
      return Jest.Expect.toEqual(Jest.Expect.expect(result), [
        false,
        true,
        false,
        true,
        true,
        false,
        true
      ]);
    });
    Jest.test("Solve Part 1 - sampleData list", () => {
      let result = Belt_List.toArray(AOC2018_Day5$AdventOfCode.defuse(testCharList)).join("");
      return Jest.Expect.toEqual(Jest.Expect.expect(result), "dabCBAcaDA");
    });
    Jest.test("Solve Part 1 - sampleData array", () => {
      let result = AOC2018_Day5$AdventOfCode.defuse_array(testCharArray).join("");
      return Jest.Expect.toEqual(Jest.Expect.expect(result), "dabCBAcaDA");
    });
    Jest.Skip.test("Solve Part 1 - Data array", () => {
      let result = AOC2018_Day5$AdventOfCode.defuse_array(charArray).join("").length;
      let expected = AOC2018_Day5_Data$AdventOfCode.result.length;
      return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
    });
  });
  Jest.describe("Part 2", () => {
    Jest.test("notIsLetterAndUpper", () => {
      let result_0 = Belt_Array.keep(testCharArray, __x => AOC2018_Day5$AdventOfCode.notIsLetterAndUpper(__x, "a"));
      let result_1 = Belt_Array.keep(testCharArray, __x => AOC2018_Day5$AdventOfCode.notIsLetterAndUpper(__x, "b"));
      let result = [
        result_0,
        result_1
      ];
      let expected_0 = "dbcCCBcCcD".split("");
      let expected_1 = "daAcCaCAcCcaDA".split("");
      let expected = [
        expected_0,
        expected_1
      ];
      return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
    });
    Jest.test("Solve Part 2 - sampleData", () => {
      let result = AOC2018_Day5$AdventOfCode.solvePart2(AOC2018_Day5$AdventOfCode.aTod, testCharArray);
      return Jest.Expect.toEqual(Jest.Expect.expect(result), 4);
    });
    Jest.Skip.test("Solve Part 2 - Data", () => {
      let result = AOC2018_Day5$AdventOfCode.solvePart2(AOC2018_Day5$AdventOfCode.aToz, charArray);
      return Jest.Expect.toEqual(Jest.Expect.expect(result), 4282);
    });
  });
});

let data = AOC2018_Day5_Data$AdventOfCode.data;

let sampleData = AOC2018_Day5_Data_Sample$AdventOfCode.data;

export {
  data,
  sampleData,
  testCharArray,
  testCharList,
  charArray,
  charList,
}
/* testCharArray Not a pure module */
