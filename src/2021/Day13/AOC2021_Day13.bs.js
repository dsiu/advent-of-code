// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");

function log(prim) {
  console.log(prim);
  
}

var Paper = {};

function parse(data) {
  var parsed = Utils$AdventOfCode.splitDoubleNewline(data);
  var coords = Belt_Option.getExn(Belt_Array.get(parsed, 0));
  var folds = Belt_Option.getExn(Belt_Array.get(parsed, 1));
  return [
          Belt_Array.map(Utils$AdventOfCode.splitNewline(coords), (function (x) {
                  var s = x.trim().split(",");
                  return [
                          Belt_Int.fromString(Belt_Option.getExn(Belt_Array.get(s, 0))),
                          Belt_Int.fromString(Belt_Option.getExn(Belt_Array.get(s, 1)))
                        ];
                })),
          Belt_Array.map(Utils$AdventOfCode.splitNewline(folds), (function (x) {
                  var i = "fold along ".length;
                  var sub = x.trim().slice(i, x.length);
                  var s = sub.split("=");
                  return [
                          Belt_Option.getExn(Belt_Array.get(s, 0)),
                          Belt_Int.fromString(Belt_Option.getExn(Belt_Array.get(s, 1)))
                        ];
                }))
        ];
}

function solvePart1(data) {
  var match = parse(data);
  console.log("coords", match[0]);
  console.log("folds", match[1]);
  return 1;
}

function solvePart2(data) {
  return 2;
}

exports.log = log;
exports.Paper = Paper;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
