// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Tree$AdventOfCode from "../../Tree.mjs";
import * as Jest2$AdventOfCode from "../../../interop/Jest2.mjs";
import * as AOC2021_Day18$AdventOfCode from "./AOC2021_Day18.mjs";
import * as AOC2021_Day18_Data$AdventOfCode from "./AOC2021_Day18_Data.mjs";
import * as AOC2021_Day18_Data_Sample$AdventOfCode from "./AOC2021_Day18_Data_Sample.mjs";

describe("2021 Day18", (function () {
        var parseAndReduce = function (x) {
          return AOC2021_Day18$AdventOfCode.SnailFish.reduce(Curry._1(AOC2021_Day18$AdventOfCode.SnailFish.Parser.parseAndGetResult, x));
        };
        var makeReduceTests = function (__x) {
          return Belt_Array.map(__x, (function (param) {
                        return [
                                Tree$AdventOfCode.treeToString(parseAndReduce(param[0])),
                                param[1]
                              ];
                      }));
        };
        var reduce_tests = makeReduceTests([
              [
                "[[[[[9,8],1],2],3],4]",
                "[[[[0,9],2],3],4]"
              ],
              [
                "[7,[6,[5,[4,[3,2]]]]]",
                "[7,[6,[5,[7,0]]]]"
              ],
              [
                "[[6,[5,[4,[3,2]]]],1]",
                "[[6,[5,[7,0]]],3]"
              ],
              [
                "[[3,[2,[1,[7,3]]]],[6,[5,[4,[3,2]]]]]",
                "[[3,[2,[8,0]]],[9,[5,[7,0]]]]"
              ]
            ]);
        Jest2$AdventOfCode.testEach2("reduce", reduce_tests, (function (result, expected) {
                expect(result).toEqual(expected);
              }));
        var makeMagnitudeTests = function (__x) {
          return Belt_Array.map(__x, (function (param) {
                        return [
                                AOC2021_Day18$AdventOfCode.SnailFish.magnitude(parseAndReduce(param[0])),
                                param[1]
                              ];
                      }));
        };
        var magnitude_tests = makeMagnitudeTests([
              [
                "[[1,2],[[3,4],5]]",
                143
              ],
              [
                "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]",
                1384
              ],
              [
                "[[[[1,1],[2,2]],[3,3]],[4,4]]",
                445
              ],
              [
                "[[[[3,0],[5,3]],[4,4]],[5,5]]",
                791
              ],
              [
                "[[[[5,0],[7,4]],[5,5]],[6,6]]",
                1137
              ],
              [
                "[[[[8,7],[7,7]],[[8,6],[7,7]]],[[[0,7],[6,6]],[8,7]]]",
                3488
              ]
            ]);
        Jest2$AdventOfCode.testEach2("magnitude", magnitude_tests, (function (result, expected) {
                expect(result).toEqual(expected);
              }));
        var makeSumOfTests = function (__x) {
          return Belt_Array.map(__x, (function (param) {
                        var match = param[0];
                        return [
                                Tree$AdventOfCode.treeToString(AOC2021_Day18$AdventOfCode.SnailFish.snailAdd(Curry._1(AOC2021_Day18$AdventOfCode.SnailFish.Parser.parseAndGetResult, match[0]), Curry._1(AOC2021_Day18$AdventOfCode.SnailFish.Parser.parseAndGetResult, match[1]))),
                                param[1]
                              ];
                      }));
        };
        var sumOf_tests = makeSumOfTests([[
                [
                  "[[[[4,3],4],4],[7,[[8,4],9]]]",
                  "[1,1]"
                ],
                "[[[[0,7],4],[[7,8],[6,0]]],[8,1]]"
              ]]);
        Jest2$AdventOfCode.testEach2("sumOf", sumOf_tests, (function (result, expected) {
                expect(result).toEqual(expected);
              }));
        test("Part 1 - Sample Data", (function () {
                var result = AOC2021_Day18$AdventOfCode.solvePart1(AOC2021_Day18_Data_Sample$AdventOfCode.data);
                expect(result).toEqual(4140);
              }));
        test("Part 1 - Solve", (function () {
                var result = AOC2021_Day18$AdventOfCode.solvePart1(AOC2021_Day18_Data$AdventOfCode.data);
                expect(result).toEqual(4088);
              }));
        test("Part 2 - Sample Data", (function () {
                var result = AOC2021_Day18$AdventOfCode.solvePart2(AOC2021_Day18_Data_Sample$AdventOfCode.data);
                expect(result).toEqual(3993);
              }));
        test("Part 2 - Solve", (function () {
                var result = AOC2021_Day18$AdventOfCode.solvePart2(AOC2021_Day18_Data$AdventOfCode.data);
                expect(result).toEqual(4536);
              }));
      }));

var data = AOC2021_Day18_Data$AdventOfCode.data;

var sampleData = AOC2021_Day18_Data_Sample$AdventOfCode.data;

var solvePart1 = AOC2021_Day18$AdventOfCode.solvePart1;

var solvePart2 = AOC2021_Day18$AdventOfCode.solvePart2;

export {
  data ,
  sampleData ,
  solvePart1 ,
  solvePart2 ,
}
/*  Not a pure module */
