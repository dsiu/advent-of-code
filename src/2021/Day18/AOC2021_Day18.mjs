// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Res_parser from "@resinfo/parser/src/res_parser.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Tree$AdventOfCode from "../../Tree.mjs";

function log(prim) {
  console.log(prim);
  
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
  
}

function log3(prim0, prim1, prim2) {
  console.log(prim0, prim1, prim2);
  
}

function splittable(t) {
  var splittableC = function (loc) {
    var n = loc._0;
    if (n.TAG === /* Leaf */0) {
      if (n._0 >= 10) {
        return loc;
      } else {
        return ;
      }
    } else {
      return Belt_Option.flatMap(splittableC(Tree$AdventOfCode.left(loc)), (function (param) {
                    return splittableC(Tree$AdventOfCode.right(loc));
                  }));
    }
  };
  return splittableC(Tree$AdventOfCode.top(t));
}

function split(num) {
  var mn0 = splittable(num);
  if (mn0 === undefined) {
    return ;
  }
  var n0 = Belt_Option.getExn(mn0);
  var sn = n0._0;
  if (sn.TAG === /* Leaf */0) {
    var sn$1 = sn._0;
    var ln = sn$1 / 2 | 0;
    var rn = ln + sn$1 % 2 | 0;
    var n1 = Tree$AdventOfCode.modify(n0, (function (param) {
            return {
                    TAG: /* Pair */1,
                    _0: {
                      TAG: /* Leaf */0,
                      _0: ln
                    },
                    _1: {
                      TAG: /* Leaf */0,
                      _0: rn
                    }
                  };
          }));
    var match = Tree$AdventOfCode.upmost(n1);
    return match._0;
  }
  throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "AOC2021_Day18.res",
          34,
          12
        ],
        Error: new Error()
      };
}

function charToString(c) {
  return String.fromCharCode(c);
}

function concatStringList(chars) {
  if (chars) {
    return chars.hd + concatStringList(chars.tl);
  } else {
    return "";
  }
}

var comma = Res_parser.$$char(/* ',' */44);

var zero = Res_parser.$$char(/* '0' */48);

var oneThroughNine = Res_parser.satisfy(function (c) {
      if (c >= /* '1' */49) {
        return /* '9' */57 >= c;
      } else {
        return false;
      }
    });

var digit = Res_parser.map(Res_parser.orElse(zero, oneThroughNine), charToString);

var digits = Res_parser.map(Res_parser.atLeastOne(digit), concatStringList);

var pair = Res_parser.makeRecursive(function (p) {
      var betweenBraces = function (__x) {
        return Res_parser.between(__x, Res_parser.$$char(/* '[' */91), Res_parser.$$char(/* ']' */93));
      };
      var makeIntElem = function (x) {
        return {
                TAG: /* Leaf */0,
                _0: Belt_Option.getExn(Belt_Int.fromString(x))
              };
      };
      var pairOrNumber = Res_parser.choice([
            p,
            Res_parser.map(digits, makeIntElem)
          ]);
      return Res_parser.map(betweenBraces(Res_parser.andThen(Res_parser.keepLeft(pairOrNumber, comma), pairOrNumber)), (function (param) {
                    return {
                            TAG: /* Pair */1,
                            _0: param[0],
                            _1: param[1]
                          };
                  }));
    });

function parse(s) {
  return Res_parser.run(pair, s);
}

var Parser = {
  charToString: charToString,
  concatStringList: concatStringList,
  comma: comma,
  zero: zero,
  oneThroughNine: oneThroughNine,
  digit: digit,
  digits: digits,
  pair: pair,
  parse: parse
};

var SnailFish = {
  splittable: splittable,
  split: split,
  Parser: Parser
};

function solvePart1(data) {
  var l = Res_parser.run(pair, data);
  var prim1 = Belt_Result.isOk(l);
  console.log("parse result:", prim1);
  var p = Belt_Result.getExn(l)[0];
  if (l.TAG === /* Ok */0) {
    var prim1$1 = Tree$AdventOfCode.treeToString(p);
    console.log("Parsed as: ", prim1$1);
    var prim1$2 = Belt_Result.getExn(l)[1];
    console.log("Parse state:", prim1$2);
    console.log("\n");
  } else {
    console.log(l._0);
    console.log("\n");
  }
  return 1;
}

function solvePart2(data) {
  return 2;
}

var P;

var Rjs;

export {
  log ,
  log2 ,
  log3 ,
  P ,
  Rjs ,
  SnailFish ,
  solvePart1 ,
  solvePart2 ,
  
}
/* comma Not a pure module */
