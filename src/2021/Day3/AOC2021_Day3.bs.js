// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Js_int = require("rescript/lib/js/js_int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_MapInt = require("rescript/lib/js/belt_MapInt.js");
var Belt_MutableMapInt = require("rescript/lib/js/belt_MutableMapInt.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");

function log(prim) {
  console.log(prim);
  
}

function inc(t, k) {
  return Belt_MapInt.set(t, k, Belt_MapInt.getWithDefault(t, k, 0) + 1 | 0);
}

function mostCommon(t) {
  return Belt_MapInt.reduce(t, [
                Js_int.min,
                Js_int.min
              ], (function (param, k, v) {
                  var lv = param[1];
                  if (v > lv) {
                    return [
                            k,
                            v
                          ];
                  } else {
                    return [
                            param[0],
                            lv
                          ];
                  }
                }))[0];
}

function leastCommon(t) {
  return Belt_MapInt.reduce(t, [
                Js_int.max,
                Js_int.max
              ], (function (param, k, v) {
                  var lv = param[1];
                  if (v < lv) {
                    return [
                            k,
                            v
                          ];
                  } else {
                    return [
                            param[0],
                            lv
                          ];
                  }
                }))[0];
}

function make(items) {
  return Belt_Array.reduce(items, undefined, (function (a, x) {
                return Belt_MapInt.set(a, x, 0);
              }));
}

var CountContainer = {
  set: Belt_MapInt.set,
  get: Belt_MapInt.get,
  getWithDefault: Belt_MapInt.getWithDefault,
  reduce: Belt_MapInt.reduce,
  inc: inc,
  mostCommon: mostCommon,
  leastCommon: leastCommon,
  make: make
};

function getSafe(m, k) {
  return Belt_MutableMapInt.getWithDefault(m, k, make([
                  0,
                  1
                ]));
}

var Total = {
  set: Belt_MutableMapInt.set,
  get: Belt_MutableMapInt.get,
  getSafe: getSafe,
  forEach: Belt_MutableMapInt.forEach,
  map: Belt_MutableMapInt.map,
  make: Belt_MutableMapInt.make
};

function part1(xs) {
  var total = Belt_Array.reduce(xs, Belt_MutableMapInt.make(undefined), (function (a, line) {
          var bits = Utils$AdventOfCode.splitChars(line.trim());
          Belt_Array.forEachWithIndex(bits, (function (idx, c) {
                  var bit_val = Utils$AdventOfCode.intFromStringExn(c);
                  var orig_total = getSafe(a, idx);
                  return Belt_MutableMapInt.set(a, idx, inc(orig_total, bit_val));
                }));
          return a;
        }));
  var logAndCont = function (x) {
    console.log("binStringToInt", x);
    return x;
  };
  var binStringToInt = function (x) {
    return parseInt(logAndCont(Belt_Array.map(Belt_MutableMapInt.valuesToArray(x), (function (prim) {
                            return String(prim);
                          })).join("")), 2);
  };
  var gamma = binStringToInt(Belt_MutableMapInt.map(total, mostCommon));
  console.log("gamma", gamma);
  var epsilon = binStringToInt(Belt_MutableMapInt.map(total, leastCommon));
  console.log("epsilon", epsilon);
  return Math.imul(gamma, epsilon);
}

var parse = Utils$AdventOfCode.splitNewline;

function solvePart1(data) {
  return part1(Utils$AdventOfCode.splitNewline(data));
}

function solvePart2(data) {
  return 2;
}

var toBinaryString = Belt_MutableMapInt.valuesToArray;

exports.log = log;
exports.CountContainer = CountContainer;
exports.Total = Total;
exports.toBinaryString = toBinaryString;
exports.part1 = part1;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
