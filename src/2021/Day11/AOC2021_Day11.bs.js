// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");
var Array2D$AdventOfCode = require("../../Array2D.bs.js");
var FP_Utils$AdventOfCode = require("../../FP_Utils.bs.js");

function log(prim) {
  console.log(prim);
  
}

function incEnergyLevel(t) {
  return Array2D$AdventOfCode.map(t, (function (param) {
                return Utils$AdventOfCode.add(1, param);
              }));
}

var Octopus = {
  incEnergyLevel: incEnergyLevel
};

function parse(data) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (param) {
                return FP_Utils$AdventOfCode.compose((function (prim) {
                              return prim.trim();
                            }), (function (x) {
                              return Belt_Array.map(Utils$AdventOfCode.splitChars(x), Utils$AdventOfCode.intFromStringExn);
                            }), param);
              }));
}

function solvePart1(data) {
  var d = parse(data);
  console.log(d);
  console.log(Array2D$AdventOfCode.lengthX(d), "lengthX");
  console.log(Array2D$AdventOfCode.lengthY(d), "lengthY");
  var e = Array2D$AdventOfCode.map(d, (function (param) {
          return Utils$AdventOfCode.add(1, param);
        }));
  console.log(e);
  console.log(Array2D$AdventOfCode.lengthX(e), "lengthX");
  console.log(Array2D$AdventOfCode.lengthY(e), "lengthY");
  return 1;
}

function solvePart2(data) {
  return 2;
}

exports.log = log;
exports.Octopus = Octopus;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
