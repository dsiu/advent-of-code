// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_option = require("rescript/lib/js/caml_option.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");
var Array2D$AdventOfCode = require("../../Array2D.bs.js");
var FP_Utils$AdventOfCode = require("../../FP_Utils.bs.js");
var Coordinate$AdventOfCode = require("../../Coordinate.bs.js");

function log(prim) {
  console.log(prim);
  
}

function adjCoords(c) {
  return Belt_Array.map([
              Coordinate$AdventOfCode.stepNW,
              Coordinate$AdventOfCode.stepN,
              Coordinate$AdventOfCode.stepNE,
              Coordinate$AdventOfCode.stepW,
              Coordinate$AdventOfCode.stepE,
              Coordinate$AdventOfCode.stepSW,
              Coordinate$AdventOfCode.stepS,
              Coordinate$AdventOfCode.stepSE
            ], (function (f) {
                return Curry._1(f, c);
              }));
}

function getAdjacentCoords(t, c) {
  return Belt_Array.keepMap(adjCoords(c), (function (c) {
                if (Array2D$AdventOfCode.isValidXY(t, c)) {
                  return c;
                }
                
              }));
}

function getAdjacents(t, param) {
  return Belt_Array.keepMap(adjCoords([
                  param[0],
                  param[1]
                ]), (function (c) {
                if (Array2D$AdventOfCode.isValidXY(t, c)) {
                  return Caml_option.some(Array2D$AdventOfCode.getExn(t, c));
                }
                
              }));
}

function count9Plus(t) {
  return Belt_Array.keep(t, (function (b) {
                return b >= 9;
              })).length;
}

function increaseEnergy(t) {
  return Array2D$AdventOfCode.map(t, (function (b) {
                return b + 1 | 0;
              }));
}

function iterate(t) {
  var next = increaseEnergy(t);
  while(true) {
    var flashing_octopus = Array2D$AdventOfCode.reduceWithIndex(next, [], (function (a, e, coord) {
            if (e > 9) {
              return Belt_Array.concat(a, [coord]);
            } else {
              return a;
            }
          }));
    if (flashing_octopus.length === 0) {
      return next;
    }
    Belt_Array.forEach(flashing_octopus, (function (flash_coord) {
            var coords = getAdjacentCoords(next, flash_coord);
            Belt_Array.forEach(coords, (function (coord) {
                    var orig = Array2D$AdventOfCode.getExn(next, coord);
                    Array2D$AdventOfCode.set(next, coord, orig > 0 ? orig + 1 | 0 : orig);
                    
                  }));
            Array2D$AdventOfCode.set(next, flash_coord, 0);
            
          }));
    continue ;
  };
}

function iterateN(_t, _n) {
  while(true) {
    var n = _n;
    var t = _t;
    var next = iterate(t);
    if ((n - 1 | 0) < 0) {
      return t;
    }
    _n = n - 1 | 0;
    _t = next;
    continue ;
  };
}

function toString(t) {
  var ret = [];
  for(var i = 0 ,i_finish = Array2D$AdventOfCode.lengthY(t); i < i_finish; ++i){
    var row = Belt_Option.getWithDefault(Array2D$AdventOfCode.getYEquals(t, i), []);
    ret = Belt_Array.concat(ret, [Belt_Array.map(row, (function (x) {
                    return x.toString();
                  })).join("")]);
  }
  return ret.join("\n");
}

var Octopus = {
  adjCoords: adjCoords,
  getAdjacentCoords: getAdjacentCoords,
  getAdjacents: getAdjacents,
  count9Plus: count9Plus,
  increaseEnergy: increaseEnergy,
  iterate: iterate,
  iterateN: iterateN,
  toString: toString
};

function parse(data) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (param) {
                return FP_Utils$AdventOfCode.compose((function (prim) {
                              return prim.trim();
                            }), (function (x) {
                              return Belt_Array.map(Utils$AdventOfCode.splitChars(x), Utils$AdventOfCode.intFromStringExn);
                            }), param);
              }));
}

function solvePart1(data) {
  console.log("orig ----");
  var d = parse(data);
  console.log(toString(d));
  console.log("orig ----");
  console.log("iterate " + String(1) + " ----");
  var e = iterateN(d, 1);
  console.log(toString(e));
  console.log("iterate " + String(1) + " ----");
  console.log("iterate " + String(100) + " ----");
  var e$1 = iterateN(d, 100);
  console.log(toString(e$1));
  console.log("iterate " + String(100) + " ----");
  return 1;
}

function solvePart2(data) {
  return 2;
}

exports.log = log;
exports.Octopus = Octopus;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
