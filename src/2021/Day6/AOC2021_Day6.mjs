// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as JS_Debug$AdventOfCode from "../../JS_Debug.mjs";

function log(prim) {
  console.log(prim);
  
}

var Log = JS_Debug$AdventOfCode.make("AOC2021_Day6-AdventOfCode");

function make(s) {
  if (s === 6) {
    return {
            TAG: /* Respawn */1,
            _0: s
          };
  } else {
    return {
            TAG: /* Decr */0,
            _0: s
          };
  }
}

function makeRespawned(param) {
  return {
          TAG: /* Decr */0,
          _0: 8
        };
}

function getNextState(t) {
  if (t.TAG !== /* Decr */0) {
    return {
            TAG: /* Decr */0,
            _0: t._0 - 1 | 0
          };
  }
  var s = t._0;
  if (s !== 0) {
    return {
            TAG: /* Decr */0,
            _0: s - 1 | 0
          };
  } else {
    return {
            TAG: /* Respawn */1,
            _0: 6
          };
  }
}

function isRespawned(t) {
  if (t.TAG === /* Decr */0) {
    return false;
  } else {
    return true;
  }
}

function toString(t) {
  return String(t._0);
}

var LanternFish = {
  make: make,
  makeRespawned: makeRespawned,
  getNextState: getNextState,
  isRespawned: isRespawned,
  toString: toString
};

function runDumb(_fs, _days) {
  while(true) {
    var days = _days;
    var fs = _fs;
    console.log("days", days);
    Curry._1(Log.debug, "run " + "days");
    Curry._1(Log.debug, "fs size " + String(fs.length));
    if (days === 0) {
      return fs;
    }
    Curry._1(Log.debug, "get next state");
    var next = Belt_Array.mapU(fs, getNextState);
    Curry._1(Log.debug, "get next state done");
    Curry._1(Log.debug, "get spawned");
    var spawn = Belt_Array.keepMapU(next, (function (f) {
            if (isRespawned(f)) {
              return {
                      TAG: /* Decr */0,
                      _0: 8
                    };
            }
            
          }));
    Curry._1(Log.debug, "get spawned done");
    var result = Belt_Array.concat(next, spawn);
    Curry._1(Log.debug, "done result concat");
    _days = days - 1 | 0;
    _fs = result;
    continue ;
  };
}

var big_zero = BigInt(0);

var big_one = BigInt(1);

function add(prim0, prim1) {
  return prim0 + prim1;
}

function runSmart(fs, days) {
  var counts = Belt_Array.make(9, big_zero);
  Belt_Array.forEach(fs, (function (n) {
          return Belt_Array.setExn(counts, n, Belt_Array.getExn(counts, n) + big_one);
        }));
  var run = function (_counts, _days) {
    while(true) {
      var days = _days;
      var counts = _counts;
      if (days === 0) {
        return counts;
      }
      var newCount = Belt_Option.getExn(Belt_Array.get(counts, 0));
      var result = Belt_Array.sliceToEnd(counts, 1);
      Belt_Array.setExn(result, 6, Belt_Array.getExn(result, 6) + newCount);
      _days = days - 1 | 0;
      _counts = Belt_Array.concat(result, [newCount]);
      continue ;
    };
  };
  return Belt_Array.reduce(run(counts, days), BigInt(0), (function (total, x) {
                  return x + total;
                })).toString();
}

function parse(data) {
  return Belt_Array.map(data.trim().split(","), (function (s) {
                return Belt_Option.getExn(Belt_Int.fromString(s));
              }));
}

function solvePart1(data) {
  return runSmart(parse(data), 80);
}

function solvePart2(data) {
  return runSmart(parse(data), 256);
}

var $$BigInt$1;

export {
  log ,
  Log ,
  LanternFish ,
  runDumb ,
  $$BigInt$1 as $$BigInt,
  big_zero ,
  big_one ,
  add ,
  runSmart ,
  parse ,
  solvePart1 ,
  solvePart2 ,
  
}
/* Log Not a pure module */
