// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function log(prim) {
  console.log(prim);
  
}

function make(s) {
  if (s === 6) {
    return {
            TAG: /* Respawn */1,
            _0: s
          };
  } else {
    return {
            TAG: /* Decr */0,
            _0: s
          };
  }
}

function makeRespawned(param) {
  return {
          TAG: /* Decr */0,
          _0: 8
        };
}

function getNextState(t) {
  if (t.TAG !== /* Decr */0) {
    return {
            TAG: /* Decr */0,
            _0: t._0 - 1 | 0
          };
  }
  var s = t._0;
  if (s !== 0) {
    return {
            TAG: /* Decr */0,
            _0: s - 1 | 0
          };
  } else {
    return {
            TAG: /* Respawn */1,
            _0: 6
          };
  }
}

function isRespawned(t) {
  if (t.TAG === /* Decr */0) {
    return false;
  } else {
    return true;
  }
}

function toString(t) {
  return String(t._0);
}

var LanternFish = {
  make: make,
  makeRespawned: makeRespawned,
  getNextState: getNextState,
  isRespawned: isRespawned,
  toString: toString
};

function run(_fs, _days) {
  while(true) {
    var days = _days;
    var fs = _fs;
    console.log("days", days);
    if (days === 0) {
      return fs;
    }
    var next = Belt_Array.map(fs, getNextState);
    _days = days - 1 | 0;
    _fs = Belt_Array.concat(next, Belt_Array.keepMap(next, (function (f) {
                if (isRespawned(f)) {
                  return {
                          TAG: /* Decr */0,
                          _0: 8
                        };
                }
                
              })));
    continue ;
  };
}

function parse(data) {
  return Belt_Array.map(data.trim().split(","), (function (s) {
                return make(Belt_Option.getExn(Belt_Int.fromString(s)));
              }));
}

function solvePart1(data) {
  return run(parse(data), 80).length;
}

function solvePart2(data) {
  return run(parse(data), 256).length;
}

exports.log = log;
exports.LanternFish = LanternFish;
exports.run = run;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
