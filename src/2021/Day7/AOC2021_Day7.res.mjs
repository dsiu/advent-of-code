// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../../Utils.res.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Belt_SortArrayInt from "rescript/lib/es6/Belt_SortArrayInt.js";

function log(prim) {
  console.log(prim);
}

function median(xs) {
  let sorted = Belt_SortArrayInt.stableSort(xs);
  let half = (xs.length >> 1);
  if (xs.length % 2 === 0) {
    return Belt_Array.getExn(sorted, half);
  } else {
    return (Belt_Array.getExn(sorted, half - 1 | 0) + Belt_Array.getExn(sorted, half) | 0) / 2 | 0;
  }
}

function distance(xs, m) {
  return Belt_Array.reduce(xs, 0, (a, x) => a + Math.abs(x - m | 0) | 0);
}

function cost(a, b) {
  return Math.imul(Math.abs(b - a | 0), Math.abs(b - a | 0) + 1 | 0) / 2 | 0;
}

function costAll(xs, p) {
  return Belt_Array.reduce(xs, 0, (a, x) => a + cost(x, p) | 0);
}

function parse(data) {
  return Belt_Array.map(data.trim().split(","), Utils.intFromStringExn);
}

function solvePart1(data) {
  let xs = parse(data);
  let m = median(xs);
  return distance(xs, m);
}

function solvePart2(data) {
  let xs = parse(data);
  let min = Utils.minIntInArray(xs);
  let max = Utils.maxIntInArray(xs);
  return Utils.minIntInArray(Belt_Array.map(Belt_Array.rangeBy(min, max, 1), __x => costAll(xs, __x)));
}

export {
  log,
  median,
  distance,
  cost,
  costAll,
  parse,
  solvePart1,
  solvePart2,
}
/* Utils Not a pure module */
