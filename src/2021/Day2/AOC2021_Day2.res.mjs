// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../../Utils.res.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";

function log(prim) {
  console.log(prim);
}

let InvalidMove = /* @__PURE__ */Primitive_exceptions.create("AOC2021_Day2.Move.InvalidMove");

function make(s, n) {
  switch (s) {
    case "down" :
      return {
        TAG: "Down",
        _0: n
      };
    case "forward" :
      return {
        TAG: "Forward",
        _0: n
      };
    case "up" :
      return {
        TAG: "Up",
        _0: n
      };
    default:
      throw {
        RE_EXN_ID: InvalidMove,
        _1: s,
        Error: new Error()
      };
  }
}

let Move = {
  InvalidMove: InvalidMove,
  make: make
};

let make$1 = {
  h: 0,
  d: 0,
  aim: 0
};

function move(t, move$1) {
  switch (move$1.TAG) {
    case "Forward" :
      return {
        h: t.h + move$1._0 | 0,
        d: t.d,
        aim: t.aim
      };
    case "Down" :
      return {
        h: t.h,
        d: t.d + move$1._0 | 0,
        aim: t.aim
      };
    case "Up" :
      return {
        h: t.h,
        d: t.d - move$1._0 | 0,
        aim: t.aim
      };
  }
}

function moveWithAim(t, move) {
  switch (move.TAG) {
    case "Forward" :
      let n = move._0;
      return {
        h: t.h + n | 0,
        d: t.d + Math.imul(t.aim, n) | 0,
        aim: t.aim
      };
    case "Down" :
      return {
        h: t.h,
        d: t.d,
        aim: t.aim + move._0 | 0
      };
    case "Up" :
      return {
        h: t.h,
        d: t.d,
        aim: t.aim - move._0 | 0
      };
  }
}

let Submarine = {
  make: make$1,
  move: move,
  moveWithAim: moveWithAim
};

function run(xs, f) {
  return Belt_Array.reduce(xs, make$1, (a, x) => f(a, x));
}

function runPart1(__x) {
  return run(__x, move);
}

function runPart2(__x) {
  return run(__x, moveWithAim);
}

function parse(data) {
  return Belt_Array.map(Utils.splitNewline(data), x => {
    let s = x.trim().split(" ");
    return make(Belt_Option.getExn(Belt_Array.get(s, 0)), Utils.intFromStringExn(Belt_Option.getExn(Belt_Array.get(s, 1))));
  });
}

function answer(t) {
  return Math.imul(t.h, t.d);
}

function solvePart1(data) {
  return answer(runPart1(parse(data)));
}

function solvePart2(data) {
  return answer(runPart2(parse(data)));
}

export {
  log,
  Move,
  Submarine,
  run,
  runPart1,
  runPart2,
  parse,
  answer,
  solvePart1,
  solvePart2,
}
/* Utils Not a pure module */
