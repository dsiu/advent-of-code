// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as FP_Utils$AdventOfCode from "../../FP_Utils.mjs";

function log(prim) {
  console.log(prim);
  
}

function rotX(param) {
  return /* Coord */{
          _0: param._0,
          _1: -param._2 | 0,
          _2: param._1
        };
}

function rotY(param) {
  return /* Coord */{
          _0: param._2,
          _1: param._1,
          _2: -param._0 | 0
        };
}

function rotZ(param) {
  return /* Coord */{
          _0: -param._1 | 0,
          _1: param._0,
          _2: param._2
        };
}

function translate(param, param$1) {
  return /* Coord */{
          _0: param._0 + param$1._0 | 0,
          _1: param._1 + param$1._1 | 0,
          _2: param._2 + param$1._2 | 0
        };
}

var ras = [
  FP_Utils$AdventOfCode.identity,
  rotY,
  (function (param) {
      return FP_Utils$AdventOfCode.compose(rotY, rotY, param);
    }),
  FP_Utils$AdventOfCode.composeN([
        rotY,
        rotY,
        rotY
      ]),
  rotZ,
  FP_Utils$AdventOfCode.composeN([
        rotZ,
        rotZ,
        rotZ
      ])
];

var rbs = [
  FP_Utils$AdventOfCode.identity,
  rotX,
  (function (param) {
      return FP_Utils$AdventOfCode.compose(rotX, rotX, param);
    }),
  FP_Utils$AdventOfCode.composeN([
        rotX,
        rotX,
        rotX
      ])
];

var rotations = FP_Utils$AdventOfCode.combinationArray2(ras, rbs, (function (a, b) {
        return function (param) {
          return FP_Utils$AdventOfCode.compose(a, b, param);
        };
      }));

var Scanner = {
  nullTrans: FP_Utils$AdventOfCode.identity,
  rotX: rotX,
  rotY: rotY,
  rotZ: rotZ,
  translate: translate,
  rotations: rotations
};

function parse(data) {
  var parseOne = function (data) {
    var lines = Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (prim) {
            return prim.trim();
          }));
    var name = Belt_Array.getExn(lines, 0).replace("--- scanner ", "").replace(" ---", "");
    var coords = Belt_Array.map(Belt_Array.sliceToEnd(lines, 1), (function (line) {
            var c = Belt_Array.map(line.split(","), Belt_Int.fromString);
            return [
                    Belt_Array.getExn(c, 0),
                    Belt_Array.getExn(c, 1),
                    Belt_Array.getExn(c, 2)
                  ];
          }));
    return [
            name,
            coords
          ];
  };
  return Belt_Array.map(Utils$AdventOfCode.splitDoubleNewline(data), parseOne);
}

function solvePart1(data) {
  var scanners = parse(data);
  var prim = Curry._2(Utils$AdventOfCode.Printable.$$Array.toString, scanners, (function (param) {
          return "name: " + param[0] + ", " + "coords: " + Curry._2(Utils$AdventOfCode.Printable.$$Array.toString, param[1], (function (param) {
                        return "(" + param[0] + ", " + param[1] + ", " + param[2] + ")";
                      })) + "\n";
        }));
  console.log(prim);
  
}

function solvePart2(data) {
  return 2;
}

export {
  log ,
  Scanner ,
  parse ,
  solvePart1 ,
  solvePart2 ,
  
}
/* ras Not a pure module */
