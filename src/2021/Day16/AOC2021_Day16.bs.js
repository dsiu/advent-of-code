// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Char = require("rescript/lib/js/char.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Res_parser = require("@resinfo/parser/src/res_parser.bs.js");
var Caml_format = require("rescript/lib/js/caml_format.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");

function log(prim) {
  console.log(prim);
  
}

var sign = Res_parser.choice([
      Res_parser.map(Res_parser.$$char(/* '+' */43), (function (param) {
              return /* Plus */0;
            })),
      Res_parser.map(Res_parser.$$char(/* '-' */45), (function (param) {
              return /* Subtract */1;
            })),
      Res_parser.map(Res_parser.$$char(/* 'x' */120), (function (param) {
              return /* Multiply */2;
            }))
    ]);

var manyWhitespace = Res_parser.many(Res_parser.$$char(/* ' ' */32));

var singleDigit = Res_parser.between(Res_parser.map(Res_parser.map(Res_parser.map(Res_parser.satisfy(function ($$char) {
                      if ($$char >= /* '0' */48) {
                        return $$char <= /* '9' */57;
                      } else {
                        return false;
                      }
                    }), Char.escaped), Caml_format.caml_int_of_string), (function (x) {
            return /* SingleDigit */{
                    _0: x
                  };
          })), manyWhitespace, manyWhitespace);

var parser = Res_parser.map(Res_parser.andThen(Res_parser.andThen(singleDigit, sign), singleDigit), (function (param) {
        var match = param[0];
        return /* Expression */{
                _0: match[0],
                _1: match[1],
                _2: param[1]
              };
      }));

var result = Res_parser.run(parser, " 1 +  4  ");

function parse(data) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (prim) {
                return prim.trim();
              }));
}

function solvePart1(data) {
  return 1;
}

function solvePart2(data) {
  return 2;
}

var P;

exports.log = log;
exports.P = P;
exports.sign = sign;
exports.manyWhitespace = manyWhitespace;
exports.singleDigit = singleDigit;
exports.parser = parser;
exports.result = result;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* sign Not a pure module */
