// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_int64 from "rescript/lib/es6/caml_int64.js";
import * as Res_parser from "@resinfo/parser/src/res_parser.mjs";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Jest2$AdventOfCode from "../../../interop/Jest2.mjs";
import * as AOC2021_Day16$AdventOfCode from "./AOC2021_Day16.mjs";
import * as AOC2021_Day16_Data$AdventOfCode from "./AOC2021_Day16_Data.mjs";
import * as AOC2021_Day16_Data_Sample$AdventOfCode from "./AOC2021_Day16_Data_Sample.mjs";

function literal(ver, l) {
  return {
          TAG: "Packet",
          _0: {
            TAG: "Version",
            _0: ver
          },
          _1: {
            TAG: "TypeID",
            _0: 4
          },
          _2: {
            TAG: "Literal",
            _0: Caml_int64.of_int32(l)
          }
        };
}

function op_type_0(ver, t, param) {
  return {
          TAG: "Packet",
          _0: {
            TAG: "Version",
            _0: ver
          },
          _1: {
            TAG: "TypeID",
            _0: t
          },
          _2: {
            TAG: "Op_Len_Kind_0",
            _0: param[0],
            _1: param[1]
          }
        };
}

function op_type_1(ver, t, param) {
  return {
          TAG: "Packet",
          _0: {
            TAG: "Version",
            _0: ver
          },
          _1: {
            TAG: "TypeID",
            _0: t
          },
          _2: {
            TAG: "Op_Len_Kind_1",
            _0: param[0],
            _1: param[1]
          }
        };
}

var anyChar = Res_parser.satisfy(function (param) {
      return true;
    });

Jest.describe("2021 Day16", (function (param) {
        Jest.describe("Parser Utils", (function (param) {
                Jest.test("hex string to binary", (function (param) {
                        var result = AOC2021_Day16$AdventOfCode.hexStrToBinStr("D2FE28");
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), "110100101111111000101000");
                      }));
                Jest.test("sequenceN", (function (param) {
                        var p = Res_parser.map(AOC2021_Day16$AdventOfCode.Packet.sequenceN(anyChar, 6), AOC2021_Day16$AdventOfCode.binCharListToStr);
                        var result = Belt_Result.getExn(Res_parser.run(p, "123456"))[0];
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), "123456");
                      }));
                Jest.test("sequenceN_", (function (param) {
                        var p = Res_parser.map(AOC2021_Day16$AdventOfCode.Packet.sequenceN_(anyChar, 6), AOC2021_Day16$AdventOfCode.binCharListToStr);
                        var result = Belt_Result.getExn(Res_parser.run(p, "123456"))[0];
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), "123456");
                      }));
              }));
        Jest.describe("Packet Parser", (function (param) {
                Jest.test("literal 2021", (function (param) {
                        var result = Belt_Result.getExn(AOC2021_Day16$AdventOfCode.Packet.parse("110100101111111000101000"))[0];
                        var expected_0 = {
                          TAG: "Version",
                          _0: 6
                        };
                        var expected_1 = {
                          TAG: "TypeID",
                          _0: 4
                        };
                        var expected_2 = {
                          TAG: "Literal",
                          _0: [
                            0,
                            2021
                          ]
                        };
                        var expected = {
                          TAG: "Packet",
                          _0: expected_0,
                          _1: expected_1,
                          _2: expected_2
                        };
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                Jest.test("literal 10", (function (param) {
                        var result = Belt_Result.getExn(AOC2021_Day16$AdventOfCode.Packet.parse("11010001010"))[0];
                        var expected_0 = {
                          TAG: "Version",
                          _0: 6
                        };
                        var expected_1 = {
                          TAG: "TypeID",
                          _0: 4
                        };
                        var expected_2 = {
                          TAG: "Literal",
                          _0: [
                            0,
                            10
                          ]
                        };
                        var expected = {
                          TAG: "Packet",
                          _0: expected_0,
                          _1: expected_1,
                          _2: expected_2
                        };
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                Jest.test("literal 20", (function (param) {
                        var result = Belt_Result.getExn(AOC2021_Day16$AdventOfCode.Packet.parse("0101001000100100"))[0];
                        var expected_0 = {
                          TAG: "Version",
                          _0: 2
                        };
                        var expected_1 = {
                          TAG: "TypeID",
                          _0: 4
                        };
                        var expected_2 = {
                          TAG: "Literal",
                          _0: [
                            0,
                            20
                          ]
                        };
                        var expected = {
                          TAG: "Packet",
                          _0: expected_0,
                          _1: expected_1,
                          _2: expected_2
                        };
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                Jest.test("op type 0 simple", (function (param) {
                        var result = Belt_Result.getExn(AOC2021_Day16$AdventOfCode.Packet.parse("00111000000000000110111101000101001010010001001000000000"))[0];
                        var expected = op_type_0(1, 6, [
                              27,
                              {
                                hd: {
                                  TAG: "Packet",
                                  _0: {
                                    TAG: "Version",
                                    _0: 6
                                  },
                                  _1: {
                                    TAG: "TypeID",
                                    _0: 4
                                  },
                                  _2: {
                                    TAG: "Literal",
                                    _0: [
                                      0,
                                      10
                                    ]
                                  }
                                },
                                tl: {
                                  hd: {
                                    TAG: "Packet",
                                    _0: {
                                      TAG: "Version",
                                      _0: 2
                                    },
                                    _1: {
                                      TAG: "TypeID",
                                      _0: 4
                                    },
                                    _2: {
                                      TAG: "Literal",
                                      _0: [
                                        0,
                                        20
                                      ]
                                    }
                                  },
                                  tl: /* [] */0
                                }
                              }
                            ]);
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                Jest.test("op type 1 simple", (function (param) {
                        var result = Belt_Result.getExn(AOC2021_Day16$AdventOfCode.Packet.parse("11101110000000001101010000001100100000100011000001100000"))[0];
                        var expected = op_type_1(7, 3, [
                              3,
                              {
                                hd: {
                                  TAG: "Packet",
                                  _0: {
                                    TAG: "Version",
                                    _0: 2
                                  },
                                  _1: {
                                    TAG: "TypeID",
                                    _0: 4
                                  },
                                  _2: {
                                    TAG: "Literal",
                                    _0: Caml_int64.one
                                  }
                                },
                                tl: {
                                  hd: {
                                    TAG: "Packet",
                                    _0: {
                                      TAG: "Version",
                                      _0: 4
                                    },
                                    _1: {
                                      TAG: "TypeID",
                                      _0: 4
                                    },
                                    _2: {
                                      TAG: "Literal",
                                      _0: [
                                        0,
                                        2
                                      ]
                                    }
                                  },
                                  tl: {
                                    hd: {
                                      TAG: "Packet",
                                      _0: {
                                        TAG: "Version",
                                        _0: 1
                                      },
                                      _1: {
                                        TAG: "TypeID",
                                        _0: 4
                                      },
                                      _2: {
                                        TAG: "Literal",
                                        _0: [
                                          0,
                                          3
                                        ]
                                      }
                                    },
                                    tl: /* [] */0
                                  }
                                }
                              }
                            ]);
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                Jest.test("example 1", (function (param) {
                        var input = AOC2021_Day16$AdventOfCode.hexStrToBinStr("8A004A801A8002F478");
                        var result = Belt_Result.getExn(AOC2021_Day16$AdventOfCode.Packet.parse(input))[0];
                        var versionSum = AOC2021_Day16$AdventOfCode.Packet.version_sum(result);
                        var expected = op_type_1(4, 2, [
                              1,
                              {
                                hd: op_type_1(1, 2, [
                                      1,
                                      {
                                        hd: op_type_0(5, 2, [
                                              11,
                                              {
                                                hd: {
                                                  TAG: "Packet",
                                                  _0: {
                                                    TAG: "Version",
                                                    _0: 6
                                                  },
                                                  _1: {
                                                    TAG: "TypeID",
                                                    _0: 4
                                                  },
                                                  _2: {
                                                    TAG: "Literal",
                                                    _0: [
                                                      0,
                                                      15
                                                    ]
                                                  }
                                                },
                                                tl: /* [] */0
                                              }
                                            ]),
                                        tl: /* [] */0
                                      }
                                    ]),
                                tl: /* [] */0
                              }
                            ]);
                        return Jest.Expect.toEqual(Jest.Expect.expect([
                                        result,
                                        versionSum
                                      ]), [
                                    expected,
                                    16
                                  ]);
                      }));
                Jest.test("example 2", (function (param) {
                        var input = AOC2021_Day16$AdventOfCode.hexStrToBinStr("620080001611562C8802118E34");
                        var result = Belt_Result.getExn(AOC2021_Day16$AdventOfCode.Packet.parse(input))[0];
                        var versionSum = AOC2021_Day16$AdventOfCode.Packet.version_sum(result);
                        var expected = op_type_1(3, 0, [
                              2,
                              {
                                hd: op_type_0(0, 0, [
                                      22,
                                      {
                                        hd: {
                                          TAG: "Packet",
                                          _0: {
                                            TAG: "Version",
                                            _0: 0
                                          },
                                          _1: {
                                            TAG: "TypeID",
                                            _0: 4
                                          },
                                          _2: {
                                            TAG: "Literal",
                                            _0: [
                                              0,
                                              10
                                            ]
                                          }
                                        },
                                        tl: {
                                          hd: {
                                            TAG: "Packet",
                                            _0: {
                                              TAG: "Version",
                                              _0: 5
                                            },
                                            _1: {
                                              TAG: "TypeID",
                                              _0: 4
                                            },
                                            _2: {
                                              TAG: "Literal",
                                              _0: [
                                                0,
                                                11
                                              ]
                                            }
                                          },
                                          tl: /* [] */0
                                        }
                                      }
                                    ]),
                                tl: {
                                  hd: op_type_1(1, 0, [
                                        2,
                                        {
                                          hd: {
                                            TAG: "Packet",
                                            _0: {
                                              TAG: "Version",
                                              _0: 0
                                            },
                                            _1: {
                                              TAG: "TypeID",
                                              _0: 4
                                            },
                                            _2: {
                                              TAG: "Literal",
                                              _0: [
                                                0,
                                                12
                                              ]
                                            }
                                          },
                                          tl: {
                                            hd: {
                                              TAG: "Packet",
                                              _0: {
                                                TAG: "Version",
                                                _0: 3
                                              },
                                              _1: {
                                                TAG: "TypeID",
                                                _0: 4
                                              },
                                              _2: {
                                                TAG: "Literal",
                                                _0: [
                                                  0,
                                                  13
                                                ]
                                              }
                                            },
                                            tl: /* [] */0
                                          }
                                        }
                                      ]),
                                  tl: /* [] */0
                                }
                              }
                            ]);
                        return Jest.Expect.toEqual(Jest.Expect.expect([
                                        result,
                                        versionSum
                                      ]), [
                                    expected,
                                    12
                                  ]);
                      }));
                Jest.test("example 3", (function (param) {
                        var input = AOC2021_Day16$AdventOfCode.hexStrToBinStr("C0015000016115A2E0802F182340");
                        var result = Belt_Result.getExn(AOC2021_Day16$AdventOfCode.Packet.parse(input))[0];
                        var versionSum = AOC2021_Day16$AdventOfCode.Packet.version_sum(result);
                        var expected = op_type_0(6, 0, [
                              84,
                              {
                                hd: op_type_0(0, 0, [
                                      22,
                                      {
                                        hd: {
                                          TAG: "Packet",
                                          _0: {
                                            TAG: "Version",
                                            _0: 0
                                          },
                                          _1: {
                                            TAG: "TypeID",
                                            _0: 4
                                          },
                                          _2: {
                                            TAG: "Literal",
                                            _0: [
                                              0,
                                              10
                                            ]
                                          }
                                        },
                                        tl: {
                                          hd: {
                                            TAG: "Packet",
                                            _0: {
                                              TAG: "Version",
                                              _0: 6
                                            },
                                            _1: {
                                              TAG: "TypeID",
                                              _0: 4
                                            },
                                            _2: {
                                              TAG: "Literal",
                                              _0: [
                                                0,
                                                11
                                              ]
                                            }
                                          },
                                          tl: /* [] */0
                                        }
                                      }
                                    ]),
                                tl: {
                                  hd: op_type_1(4, 0, [
                                        2,
                                        {
                                          hd: {
                                            TAG: "Packet",
                                            _0: {
                                              TAG: "Version",
                                              _0: 7
                                            },
                                            _1: {
                                              TAG: "TypeID",
                                              _0: 4
                                            },
                                            _2: {
                                              TAG: "Literal",
                                              _0: [
                                                0,
                                                12
                                              ]
                                            }
                                          },
                                          tl: {
                                            hd: {
                                              TAG: "Packet",
                                              _0: {
                                                TAG: "Version",
                                                _0: 0
                                              },
                                              _1: {
                                                TAG: "TypeID",
                                                _0: 4
                                              },
                                              _2: {
                                                TAG: "Literal",
                                                _0: [
                                                  0,
                                                  13
                                                ]
                                              }
                                            },
                                            tl: /* [] */0
                                          }
                                        }
                                      ]),
                                  tl: /* [] */0
                                }
                              }
                            ]);
                        return Jest.Expect.toEqual(Jest.Expect.expect([
                                        result,
                                        versionSum
                                      ]), [
                                    expected,
                                    23
                                  ]);
                      }));
                Jest.test("example 4", (function (param) {
                        var input = AOC2021_Day16$AdventOfCode.hexStrToBinStr("A0016C880162017C3686B18A3D4780");
                        var result = Belt_Result.getExn(AOC2021_Day16$AdventOfCode.Packet.parse(input))[0];
                        var versionSum = AOC2021_Day16$AdventOfCode.Packet.version_sum(result);
                        var expected = op_type_0(5, 0, [
                              91,
                              {
                                hd: op_type_1(1, 0, [
                                      1,
                                      {
                                        hd: op_type_1(3, 0, [
                                              5,
                                              {
                                                hd: {
                                                  TAG: "Packet",
                                                  _0: {
                                                    TAG: "Version",
                                                    _0: 7
                                                  },
                                                  _1: {
                                                    TAG: "TypeID",
                                                    _0: 4
                                                  },
                                                  _2: {
                                                    TAG: "Literal",
                                                    _0: [
                                                      0,
                                                      6
                                                    ]
                                                  }
                                                },
                                                tl: {
                                                  hd: {
                                                    TAG: "Packet",
                                                    _0: {
                                                      TAG: "Version",
                                                      _0: 6
                                                    },
                                                    _1: {
                                                      TAG: "TypeID",
                                                      _0: 4
                                                    },
                                                    _2: {
                                                      TAG: "Literal",
                                                      _0: [
                                                        0,
                                                        6
                                                      ]
                                                    }
                                                  },
                                                  tl: {
                                                    hd: {
                                                      TAG: "Packet",
                                                      _0: {
                                                        TAG: "Version",
                                                        _0: 5
                                                      },
                                                      _1: {
                                                        TAG: "TypeID",
                                                        _0: 4
                                                      },
                                                      _2: {
                                                        TAG: "Literal",
                                                        _0: [
                                                          0,
                                                          12
                                                        ]
                                                      }
                                                    },
                                                    tl: {
                                                      hd: {
                                                        TAG: "Packet",
                                                        _0: {
                                                          TAG: "Version",
                                                          _0: 2
                                                        },
                                                        _1: {
                                                          TAG: "TypeID",
                                                          _0: 4
                                                        },
                                                        _2: {
                                                          TAG: "Literal",
                                                          _0: [
                                                            0,
                                                            15
                                                          ]
                                                        }
                                                      },
                                                      tl: {
                                                        hd: {
                                                          TAG: "Packet",
                                                          _0: {
                                                            TAG: "Version",
                                                            _0: 2
                                                          },
                                                          _1: {
                                                            TAG: "TypeID",
                                                            _0: 4
                                                          },
                                                          _2: {
                                                            TAG: "Literal",
                                                            _0: [
                                                              0,
                                                              15
                                                            ]
                                                          }
                                                        },
                                                        tl: /* [] */0
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            ]),
                                        tl: /* [] */0
                                      }
                                    ]),
                                tl: /* [] */0
                              }
                            ]);
                        return Jest.Expect.toEqual(Jest.Expect.expect([
                                        result,
                                        versionSum
                                      ]), [
                                    expected,
                                    31
                                  ]);
                      }));
              }));
        Jest.describe("Expression", (function (param) {
                var withBigIntResult = function (__x) {
                  return Belt_Array.map(__x, (function (param) {
                                return [
                                        param[0],
                                        Caml_int64.of_int32(param[1])
                                      ];
                              }));
                };
                var sum_tests = withBigIntResult([
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Sum",
                              _0: {
                                hd: AOC2021_Day16$AdventOfCode.Expression.intVal(1),
                                tl: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                  tl: /* [] */0
                                }
                              }
                            }),
                        3
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Sum",
                              _0: {
                                hd: {
                                  TAG: "Sum",
                                  _0: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(3),
                                    tl: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(4),
                                      tl: /* [] */0
                                    }
                                  }
                                },
                                tl: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                  tl: /* [] */0
                                }
                              }
                            }),
                        9
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Sum",
                              _0: {
                                hd: AOC2021_Day16$AdventOfCode.Expression.intVal(11),
                                tl: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(12),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(13),
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }),
                        36
                      ]
                    ]);
                Jest2$AdventOfCode.testEach2("sum", sum_tests, (function (result, expected) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                var product_tests = withBigIntResult([
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Product",
                              _0: {
                                hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                tl: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(3),
                                  tl: /* [] */0
                                }
                              }
                            }),
                        6
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Product",
                              _0: {
                                hd: {
                                  TAG: "Product",
                                  _0: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(3),
                                    tl: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(4),
                                      tl: /* [] */0
                                    }
                                  }
                                },
                                tl: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                  tl: /* [] */0
                                }
                              }
                            }),
                        24
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Product",
                              _0: {
                                hd: AOC2021_Day16$AdventOfCode.Expression.intVal(11),
                                tl: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(12),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(13),
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }),
                        1716
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Product",
                              _0: {
                                hd: {
                                  TAG: "Sum",
                                  _0: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(3),
                                    tl: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(4),
                                      tl: /* [] */0
                                    }
                                  }
                                },
                                tl: {
                                  hd: {
                                    TAG: "Sum",
                                    _0: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                      tl: {
                                        hd: AOC2021_Day16$AdventOfCode.Expression.intVal(1),
                                        tl: /* [] */0
                                      }
                                    }
                                  },
                                  tl: /* [] */0
                                }
                              }
                            }),
                        21
                      ]
                    ]);
                Jest2$AdventOfCode.testEach2("product", product_tests, (function (result, expected) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                var min_tests = withBigIntResult([
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Min",
                              _0: {
                                hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                tl: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(3),
                                  tl: /* [] */0
                                }
                              }
                            }),
                        2
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Min",
                              _0: {
                                hd: AOC2021_Day16$AdventOfCode.Expression.intVal(9),
                                tl: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(-1),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(12),
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }),
                        -1
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Min",
                              _0: {
                                hd: {
                                  TAG: "Min",
                                  _0: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(4),
                                    tl: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(5),
                                      tl: /* [] */0
                                    }
                                  }
                                },
                                tl: {
                                  hd: {
                                    TAG: "Min",
                                    _0: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(6),
                                      tl: {
                                        hd: AOC2021_Day16$AdventOfCode.Expression.intVal(7),
                                        tl: /* [] */0
                                      }
                                    }
                                  },
                                  tl: /* [] */0
                                }
                              }
                            }),
                        4
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Min",
                              _0: {
                                hd: {
                                  TAG: "Sum",
                                  _0: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(3),
                                    tl: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(4),
                                      tl: /* [] */0
                                    }
                                  }
                                },
                                tl: {
                                  hd: {
                                    TAG: "Sum",
                                    _0: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(0),
                                      tl: {
                                        hd: AOC2021_Day16$AdventOfCode.Expression.intVal(7),
                                        tl: /* [] */0
                                      }
                                    }
                                  },
                                  tl: /* [] */0
                                }
                              }
                            }),
                        7
                      ]
                    ]);
                Jest2$AdventOfCode.testEach2("min", min_tests, (function (result, expected) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                var max_tests = withBigIntResult([
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Max",
                              _0: {
                                hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                tl: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(3),
                                  tl: /* [] */0
                                }
                              }
                            }),
                        3
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Max",
                              _0: {
                                hd: AOC2021_Day16$AdventOfCode.Expression.intVal(9),
                                tl: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(-1),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(12),
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }),
                        12
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Max",
                              _0: {
                                hd: {
                                  TAG: "Max",
                                  _0: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(4),
                                    tl: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(5),
                                      tl: /* [] */0
                                    }
                                  }
                                },
                                tl: {
                                  hd: {
                                    TAG: "Max",
                                    _0: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(6),
                                      tl: {
                                        hd: AOC2021_Day16$AdventOfCode.Expression.intVal(7),
                                        tl: /* [] */0
                                      }
                                    }
                                  },
                                  tl: /* [] */0
                                }
                              }
                            }),
                        7
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Max",
                              _0: {
                                hd: {
                                  TAG: "Sum",
                                  _0: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(3),
                                    tl: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(4),
                                      tl: /* [] */0
                                    }
                                  }
                                },
                                tl: {
                                  hd: {
                                    TAG: "Sum",
                                    _0: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(0),
                                      tl: {
                                        hd: AOC2021_Day16$AdventOfCode.Expression.intVal(7),
                                        tl: /* [] */0
                                      }
                                    }
                                  },
                                  tl: /* [] */0
                                }
                              }
                            }),
                        7
                      ]
                    ]);
                Jest2$AdventOfCode.testEach2("max", max_tests, (function (result, expected) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                var greater_tests = withBigIntResult([
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Greater",
                              _0: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                              _1: AOC2021_Day16$AdventOfCode.Expression.intVal(3)
                            }),
                        0
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Greater",
                              _0: AOC2021_Day16$AdventOfCode.Expression.intVal(0),
                              _1: AOC2021_Day16$AdventOfCode.Expression.intVal(0)
                            }),
                        0
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Greater",
                              _0: AOC2021_Day16$AdventOfCode.Expression.intVal(1),
                              _1: AOC2021_Day16$AdventOfCode.Expression.intVal(-1)
                            }),
                        1
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Greater",
                              _0: {
                                TAG: "Sum",
                                _0: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(30),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(20),
                                    tl: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(10),
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              },
                              _1: {
                                TAG: "Product",
                                _0: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(20),
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }),
                        1
                      ]
                    ]);
                Jest2$AdventOfCode.testEach2("greater", greater_tests, (function (result, expected) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                var less_tests = withBigIntResult([
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Less",
                              _0: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                              _1: AOC2021_Day16$AdventOfCode.Expression.intVal(3)
                            }),
                        1
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Less",
                              _0: AOC2021_Day16$AdventOfCode.Expression.intVal(0),
                              _1: AOC2021_Day16$AdventOfCode.Expression.intVal(0)
                            }),
                        0
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Less",
                              _0: AOC2021_Day16$AdventOfCode.Expression.intVal(1),
                              _1: AOC2021_Day16$AdventOfCode.Expression.intVal(-1)
                            }),
                        0
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Less",
                              _0: {
                                TAG: "Sum",
                                _0: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(30),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(20),
                                    tl: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(10),
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              },
                              _1: {
                                TAG: "Product",
                                _0: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(20),
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }),
                        0
                      ]
                    ]);
                Jest2$AdventOfCode.testEach2("less", less_tests, (function (result, expected) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                var equal_tests = withBigIntResult([
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Equal",
                              _0: AOC2021_Day16$AdventOfCode.Expression.intVal(0),
                              _1: AOC2021_Day16$AdventOfCode.Expression.intVal(0)
                            }),
                        1
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Equal",
                              _0: AOC2021_Day16$AdventOfCode.Expression.intVal(1),
                              _1: AOC2021_Day16$AdventOfCode.Expression.intVal(0)
                            }),
                        0
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Equal",
                              _0: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                              _1: AOC2021_Day16$AdventOfCode.Expression.intVal(3)
                            }),
                        0
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Equal",
                              _0: AOC2021_Day16$AdventOfCode.Expression.intVal(-1),
                              _1: AOC2021_Day16$AdventOfCode.Expression.intVal(-1)
                            }),
                        1
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Equal",
                              _0: {
                                TAG: "Sum",
                                _0: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(1),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                    tl: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(3),
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              },
                              _1: {
                                TAG: "Sum",
                                _0: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(3),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                    tl: {
                                      hd: AOC2021_Day16$AdventOfCode.Expression.intVal(1),
                                      tl: /* [] */0
                                    }
                                  }
                                }
                              }
                            }),
                        1
                      ],
                      [
                        AOC2021_Day16$AdventOfCode.Expression.$$eval({
                              TAG: "Equal",
                              _0: {
                                TAG: "Product",
                                _0: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(3),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(4),
                                    tl: /* [] */0
                                  }
                                }
                              },
                              _1: {
                                TAG: "Product",
                                _0: {
                                  hd: AOC2021_Day16$AdventOfCode.Expression.intVal(2),
                                  tl: {
                                    hd: AOC2021_Day16$AdventOfCode.Expression.intVal(6),
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }),
                        1
                      ]
                    ]);
                Jest2$AdventOfCode.testEach2("equal", equal_tests, (function (result, expected) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                      }));
                Jest.describe("Packet with Expression", (function (param) {
                        var expr_tests = withBigIntResult([
                              [
                                "C200B40A82",
                                3
                              ],
                              [
                                "04005AC33890",
                                54
                              ],
                              [
                                "880086C3E88112",
                                7
                              ],
                              [
                                "CE00C43D881120",
                                9
                              ],
                              [
                                "D8005AC2A8F0",
                                1
                              ],
                              [
                                "F600BC2D8F",
                                0
                              ],
                              [
                                "9C005AC2F8F0",
                                0
                              ],
                              [
                                "9C0141080250320F1802104A08",
                                1
                              ]
                            ]);
                        var expr_tests$1 = Belt_Array.map(expr_tests, (function (param) {
                                return [
                                        AOC2021_Day16$AdventOfCode.Expression.$$eval(AOC2021_Day16$AdventOfCode.Expression.makeFromPacket(Belt_Result.getExn(AOC2021_Day16$AdventOfCode.Packet.parse(AOC2021_Day16$AdventOfCode.hexStrToBinStr(param[0])))[0])),
                                        param[1]
                                      ];
                              }));
                        Jest2$AdventOfCode.testEach2("examples", expr_tests$1, (function (result, expected) {
                                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                              }));
                      }));
              }));
        Jest.test("Part 1 - Sample Data", (function (param) {
                var result = AOC2021_Day16$AdventOfCode.solvePart1(AOC2021_Day16_Data_Sample$AdventOfCode.data);
                return Jest.Expect.toEqual(Jest.Expect.expect(result), 31);
              }));
        Jest.test("Part 1 - Solve", (function (param) {
                var result = AOC2021_Day16$AdventOfCode.solvePart1(AOC2021_Day16_Data$AdventOfCode.data);
                return Jest.Expect.toEqual(Jest.Expect.expect(result), 1012);
              }));
        Jest.test("Part 2 - Sample Data", (function (param) {
                var result = AOC2021_Day16$AdventOfCode.solvePart2(AOC2021_Day16_Data_Sample$AdventOfCode.data);
                return Jest.Expect.toEqual(Jest.Expect.expect(result), "54");
              }));
        Jest.test("Part 2 - Solve", (function (param) {
                var result = AOC2021_Day16$AdventOfCode.solvePart2(AOC2021_Day16_Data$AdventOfCode.data);
                return Jest.Expect.toEqual(Jest.Expect.expect(result), "2223947372407");
              }));
      }));

var data = AOC2021_Day16_Data$AdventOfCode.data;

var sampleData = AOC2021_Day16_Data_Sample$AdventOfCode.data;

var P;

var Pac;

export {
  data ,
  sampleData ,
  P ,
  Pac ,
  literal ,
  op_type_0 ,
  op_type_1 ,
  anyChar ,
}
/* anyChar Not a pure module */
