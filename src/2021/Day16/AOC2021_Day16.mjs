// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js__Int from "rescript-js/src/Js__Int.mjs";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Res_parser from "@resinfo/parser/src/res_parser.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Belt_Result from "rescript/lib/es6/belt_Result.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
  
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
  
}

function concatStringList(chars) {
  if (chars) {
    return chars.hd + concatStringList(chars.tl);
  } else {
    return "";
  }
}

function charToString(c) {
  return String.fromCharCode(c);
}

function stringifyCharList(chars) {
  return concatStringList(Belt_List.map(chars, charToString));
}

var binDigit = Res_parser.satisfy(function (c) {
      if (c === /* '0' */48) {
        return true;
      } else {
        return c === /* '1' */49;
      }
    });

var threeBinDigits = Res_parser.andThen(Res_parser.andThen(binDigit, binDigit), binDigit);

var version = Res_parser.map(threeBinDigits, (function (param) {
        var match = param[0];
        return /* Version */{
                _0: String.fromCharCode(match[0]) + String.fromCharCode(match[1]) + String.fromCharCode(param[1])
              };
      }));

var typeId = Res_parser.map(threeBinDigits, (function (param) {
        var match = param[0];
        return /* TypeID */{
                _0: String.fromCharCode(match[0]) + String.fromCharCode(match[1]) + String.fromCharCode(param[1])
              };
      }));

var payload = Res_parser.map(Res_parser.map(Res_parser.many(binDigit), (function (chars) {
            return concatStringList(Belt_List.map(chars, charToString));
          })), (function (x) {
        return /* Payload */{
                _0: x
              };
      }));

var parser = Res_parser.andThen(Res_parser.andThen(version, typeId), payload);

function parse(s) {
  return Res_parser.run(parser, s);
}

function hexStrToBinStr(s) {
  return Belt_Option.flatMap(Js__Int.fromString(16, s), (function (x) {
                return x.toString(2);
              }));
}

var Packet_M = {
  concatStringList: concatStringList,
  charToString: charToString,
  stringifyCharList: stringifyCharList,
  binDigit: binDigit,
  threeBinDigits: threeBinDigits,
  version: version,
  typeId: typeId,
  payload: payload,
  parser: parser,
  parse: parse,
  hexStrToBinStr: hexStrToBinStr
};

function parse$1(data) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (prim) {
                return prim.trim();
              }));
}

function solvePart1(data) {
  var r = Res_parser.run(parser, "110100101111111000101000");
  var prim = Belt_Result.isOk(r);
  console.log(prim);
  var match = Belt_Result.getExn(r);
  var match$1 = match[0];
  var match$2 = match$1[0];
  console.log("v", match$2[0]._0);
  console.log("t", match$2[1]._0);
  console.log("p", match$1[1]._0);
  console.log("b", match[1]);
  return 1;
}

function solvePart2(data) {
  return 2;
}

var P;

var Rjs;

export {
  log ,
  log2 ,
  P ,
  Rjs ,
  Packet_M ,
  parse$1 as parse,
  solvePart1 ,
  solvePart2 ,
  
}
/* binDigit Not a pure module */
