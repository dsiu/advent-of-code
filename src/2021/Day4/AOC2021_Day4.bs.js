// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_SetInt = require("rescript/lib/js/belt_SetInt.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");
var Array2D$AdventOfCode = require("../../Array2D.bs.js");

function log(prim) {
  console.log(prim);
  
}

function make(__x) {
  return __x.split(",");
}

var Drawn = {
  make: make
};

function make$1(lines) {
  return Belt_Array.map(lines, (function (x) {
                return Belt_Array.map(Belt_Array.keep(x.split(" "), (function (s) {
                                  return s.length > 0;
                                })), (function (s) {
                              return Belt_Option.getExn(Belt_Int.fromString(s.trim()));
                            }));
              }));
}

function match(candidates, match_keys) {
  var can_set = Belt_SetInt.fromArray(candidates);
  var keys_set = Belt_SetInt.fromArray(match_keys);
  if (Belt_SetInt.subset(keys_set, can_set)) {
    return Belt_SetInt.toArray(can_set);
  }
  
}

function solve(t, match_keys) {
  var helper = function (t, iy) {
    if (iy < Array2D$AdventOfCode.lengthY(t)) {
      return Belt_Option.flatMap(Array2D$AdventOfCode.getYEquals(t, iy), (function (row) {
                    var matched = match(row, match_keys);
                    if (matched !== undefined) {
                      return matched;
                    } else {
                      return helper(t, iy + 1 | 0);
                    }
                  }));
    }
    
  };
  return helper(t, 0);
}

var Board = {
  make: make$1,
  match: match,
  solve: solve
};

function make$2(lines) {
  return Belt_Array.map(lines, (function (b) {
                return make$1(Belt_Array.map(Utils$AdventOfCode.splitNewline(b), (function (prim) {
                                  return prim.trim();
                                })));
              }));
}

function dump(t) {
  return Belt_Array.forEach(t, (function (prim) {
                console.log(prim);
                
              }));
}

var Boards = {
  make: make$2,
  dump: dump
};

function part1(drawn, boards) {
  dump(boards);
  return [
          drawn,
          boards
        ];
}

function parse(data) {
  var lines = Belt_Array.map(Utils$AdventOfCode.splitDoubleNewline(data), (function (x) {
          return x.trim();
        }));
  var drawn = Belt_Option.getExn(Belt_Array.get(lines, 0)).split(",");
  var boards = make$2(Belt_Array.sliceToEnd(lines, 1));
  return [
          drawn,
          boards
        ];
}

function solvePart1(data) {
  var match = parse(data);
  return part1(match[0], match[1]);
}

function solvePart2(data) {
  return 2;
}

exports.log = log;
exports.Drawn = Drawn;
exports.Board = Board;
exports.Boards = Boards;
exports.part1 = part1;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
