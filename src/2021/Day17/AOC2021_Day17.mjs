// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";

function log(prim) {
  console.log(prim);
  
}

function velocityNext(param) {
  var x = param.x;
  return {
          x: x < 0 ? x + 1 | 0 : x - 1 | 0,
          y: param.y - 1 | 0
        };
}

function isTargetHit_(param, param$1) {
  var y = param[1];
  var x = param[0];
  if (x >= param$1.x_min && x <= param$1.x_max && y >= param$1.y_min) {
    return y <= param$1.y_max;
  } else {
    return false;
  }
}

function isTargetHit(t_init, __x) {
  return isTargetHit_(__x, t_init);
}

function isOutOfRange_(param, param$1) {
  var y_min = param$1.y_min;
  var x_max = param$1.x_max;
  var y = param[1];
  var x = param[0];
  console.log("isOutOfRange " + x + ", " + y + ", {" + param$1.x_min + ", " + x_max + ", " + y_min + ", " + param$1.y_max + "}");
  if (x > x_max) {
    return true;
  } else {
    return y < y_min;
  }
}

function isOUtOfRange(t_init, __x) {
  return isOutOfRange_(__x, t_init);
}

function dump(r) {
  var trajectory_str = function (__x) {
    return Belt_Array.map(__x, (function (param) {
                  return "(" + param[0] + ", " + param[1] + ")\n";
                }));
  };
  if (r.TAG === /* Hit */0) {
    var match = r._0;
    var t_str = trajectory_str(r._1);
    return "Hit: (" + match[0] + ", " + match[1] + ") | trajectory: [" + t_str + "]";
  }
  var t_str$1 = trajectory_str(r._0);
  return "Miss: trajectory: [" + t_str$1 + "]";
}

function launch(v0, target) {
  var _c = [
    0,
    0
  ];
  var _v = v0;
  var _trajectory = [];
  while(true) {
    var trajectory = _trajectory;
    var v = _v;
    var c = _c;
    var y = c[1];
    var x = c[0];
    console.log("c = " + c);
    if (isTargetHit_(c, target)) {
      return {
              TAG: /* Hit */0,
              _0: c,
              _1: trajectory
            };
    }
    if (isOutOfRange_(c, target)) {
      return {
              TAG: /* Miss */1,
              _0: trajectory
            };
    }
    _trajectory = Belt_Array.concat(trajectory, [[
            x,
            y
          ]]);
    _v = velocityNext(v);
    _c = [
      x + v.x | 0,
      y + v.y | 0
    ];
    continue ;
  };
}

var TrickShot = {
  velocityNext: velocityNext,
  isTargetHit_: isTargetHit_,
  isTargetHit: isTargetHit,
  isOutOfRange_: isOutOfRange_,
  isOUtOfRange: isOUtOfRange,
  dump: dump,
  launch: launch
};

function parse(data) {
  var match = data.replace("target area: ", "").split(", ");
  if (match.length !== 2) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "AOC2021_Day17.res",
            71,
            6
          ],
          Error: new Error()
        };
  }
  var x_str = match[0];
  var y_str = match[1];
  var match$1 = Belt_Array.map(x_str.replace("x=", "").split(".."), (function (x) {
          return Belt_Option.getExn(Belt_Int.fromString(x));
        }));
  if (match$1.length !== 2) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "AOC2021_Day17.res",
            72,
            6
          ],
          Error: new Error()
        };
  }
  var x_min = match$1[0];
  var x_max = match$1[1];
  var match$2 = Belt_Array.map(y_str.replace("y=", "").split(".."), (function (y) {
          return Belt_Option.getExn(Belt_Int.fromString(y));
        }));
  if (match$2.length !== 2) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "AOC2021_Day17.res",
            74,
            6
          ],
          Error: new Error()
        };
  }
  var y_min = match$2[0];
  var y_max = match$2[1];
  return {
          x_min: x_min,
          x_max: x_max,
          y_min: y_min,
          y_max: y_max
        };
}

function solvePart1(data) {
  var t = parse(data);
  var prim = dump(launch({
            x: 7,
            y: 2
          }, t));
  console.log(prim);
  return 1;
}

function solvePart2(data) {
  return 2;
}

export {
  log ,
  TrickShot ,
  parse ,
  solvePart1 ,
  solvePart2 ,
  
}
/* No side effect */
