// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../../Utils.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";

function log(prim) {
  console.log(prim);
}

function findDiff(xs) {
  let match = Belt_Array.reduce(Belt_Array.sliceToEnd(xs, 1), [
    Belt_Option.getExn(Belt_Array.get(xs, 0)),
    []
  ], (param, x) => [
    x,
    Belt_Array.concat(param[1], [x - param[0] | 0])
  ]);
  return Belt_Array.keep(match[1], x => x > 0);
}

function findDiff2(xs) {
  let shifted = Belt_Array.sliceToEnd(xs, 1);
  return Belt_Array.keep(Belt_Array.zip(shifted, xs), param => Primitive_object.greaterthan(param[0], param[1]));
}

function sum2Array(a1, a2) {
  return Belt_Array.reduceReverse2(Belt_Array.reverse(a1), Belt_Array.reverse(a2), [], (acc, x, y) => Belt_Array.concat(acc, [x + y | 0]));
}

function roll3sum(xs) {
  let size = xs.length - 2 | 0;
  let a1 = Belt_Array.slice(xs, 0, size);
  let a2 = Belt_Array.slice(xs, 1, size);
  let a3 = Belt_Array.slice(xs, 2, size);
  return sum2Array(sum2Array(a1, a2), a3);
}

function parse(data) {
  return Belt_Array.map(Utils.splitNewline(data), Utils.intFromStringExn);
}

function solvePart1(data) {
  return findDiff2(parse(data)).length;
}

function solvePart2(data) {
  return findDiff2(roll3sum(parse(data))).length;
}

export {
  log,
  findDiff,
  findDiff2,
  sum2Array,
  roll3sum,
  parse,
  solvePart1,
  solvePart2,
}
/* Utils Not a pure module */
