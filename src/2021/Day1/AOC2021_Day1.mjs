// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
  
}

function findDiff(xs) {
  return Belt_Array.reduceU(Belt_Array.sliceToEnd(xs, 1), [
                Belt_Option.getExn(Belt_Array.get(xs, 0)),
                []
              ], (function (param, x) {
                  return [
                          x,
                          Belt_Array.concat(param[1], [x - param[0] | 0])
                        ];
                }))[1];
}

function sum2Array(a1, a2) {
  return Belt_Array.reduceReverse2(Belt_Array.reverse(a1), Belt_Array.reverse(a2), [], (function (acc, x, y) {
                return Belt_Array.concat(acc, [x + y | 0]);
              }));
}

function roll3sum(xs) {
  var size = xs.length - 2 | 0;
  var a1 = Belt_Array.slice(xs, 0, size);
  var a2 = Belt_Array.slice(xs, 1, size);
  var a3 = Belt_Array.slice(xs, 2, size);
  return sum2Array(sum2Array(a1, a2), a3);
}

function parse(data) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (x) {
                return Belt_Option.getExn(Belt_Int.fromString(x.trim()));
              }));
}

function solvePart1(data) {
  return Belt_Array.keepU(findDiff(parse(data)), (function (x) {
                return x > 0;
              })).length;
}

function solvePart2(data) {
  return Belt_Array.keepU(findDiff(roll3sum(parse(data))), (function (x) {
                return x > 0;
              })).length;
}

export {
  log ,
  findDiff ,
  sum2Array ,
  roll3sum ,
  parse ,
  solvePart1 ,
  solvePart2 ,
  
}
/* No side effect */
