// Generated by ReScript, PLEASE EDIT WITH CARE

import * as $$JSON from "rescript/lib/es6/JSON.js";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Stdlib__Option from "@dsiu/rescript-stdlib-fp/src/Stdlib__Option.res.mjs";
import * as Stdlib__Tuple2 from "@dsiu/rescript-stdlib-fp/src/Stdlib__Tuple2.res.mjs";
import * as Stdlib__Ordering from "@dsiu/rescript-stdlib-fp/src/Stdlib__Ordering.res.mjs";
import * as TableclothComparator from "@dsiu/rescript-stdlib-fp/src/Tablecloth/TableclothComparator.res.mjs";

function intCompare(a, b) {
  return Stdlib__Ordering.toInt(Primitive_int.compare(a, b));
}

function compare(a, b) {
  return Stdlib__Tuple2.compare(a, b, intCompare, intCompare);
}

let include = TableclothComparator.Make({
  compare: compare
});

function add(param, param$1) {
  return [
    param[0] + param$1[0] | 0,
    param[1] + param$1[1] | 0
  ];
}

function sub(param, param$1) {
  return [
    param[0] - param$1[0] | 0,
    param[1] - param$1[1] | 0
  ];
}

function mul(param, x) {
  return [
    Math.imul(param[0], x),
    Math.imul(param[1], x)
  ];
}

function toString(t) {
  return JSON.stringify(Stdlib__Tuple2.toArray(t).map(prim => prim));
}

function fromString(str) {
  return Stdlib__Option.flatMap(Stdlib__Option.map($$JSON.Decode.array(JSON.parse(str)), arr => arr.map(num => Stdlib__Option.flatMap($$JSON.Decode.float(num), x => x | 0))), Stdlib__Tuple2.fromArray);
}

let TC;

let comparator = include.comparator;

let show = toString;

export {
  TC,
  intCompare,
  compare,
  comparator,
  add,
  sub,
  mul,
  toString,
  fromString,
  show,
}
/* include Not a pure module */
