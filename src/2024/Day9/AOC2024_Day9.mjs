// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_MapInt from "rescript/lib/es6/Belt_MapInt.js";
import * as Belt_SetInt from "rescript/lib/es6/Belt_SetInt.js";
import * as Stdlib__Int from "@dsiu/rescript-stdlib-fp/src/Stdlib__Int.mjs";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function union(a, b) {
  return Belt_MapInt.merge(a, b, (k, v1, v2) => {
    if (v1 !== undefined) {
      return Primitive_option.some(Primitive_option.valFromOption(v1));
    } else if (v2 !== undefined) {
      return Primitive_option.some(Primitive_option.valFromOption(v2));
    } else {
      return;
    }
  });
}

function expandMapItem(acc, size) {
  let free = acc[4];
  let disk = acc[3];
  let fileID = acc[2];
  let pos = acc[1];
  if (acc[0]) {
    let fileExtent = Stdlib__Array.zip(Stdlib__Array.fromInitializer(size, i => pos + i | 0), Stdlib__Array.make(size, fileID));
    let file = Belt_MapInt.fromArray(fileExtent);
    let disk$p = union(disk, file);
    return [
      false,
      pos + size | 0,
      fileID + 1 | 0,
      disk$p,
      free
    ];
  }
  let gap = Belt_SetInt.fromArray(Stdlib__Array.fromInitializer(size, i => pos + i | 0));
  let free$p = Belt_SetInt.union(free, gap);
  return [
    true,
    pos + size | 0,
    fileID,
    disk,
    free$p
  ];
}

function expand(diskMap) {
  let match = Stdlib__Array.reduce(diskMap, [
    true,
    0,
    0,
    undefined,
    undefined
  ], expandMapItem);
  return [
    match[3],
    match[4]
  ];
}

function showDisk(disk) {
  let pMax = Belt_MapInt.maxKey(disk);
  let str = "";
  for (let i = 0; i <= pMax; ++i) {
    let v = Belt_MapInt.get(disk, i);
    let char = v !== undefined ? v.toString() : ".";
    str = str + char;
  }
  return str;
}

function showFree(free) {
  let pMax = Belt_SetInt.maximum(free);
  let str = "";
  for (let i = 0; i <= pMax; ++i) {
    let char = Belt_SetInt.has(free, i) ? "+" : ".";
    str = str + char;
  }
  return str;
}

function showDiskFree(disk, free) {
  return showDisk(disk) + "\n" + showFree(free);
}

function parse(data) {
  return data.trim().split("").map(s => Stdlib__Int.fromString(s, undefined));
}

function solvePart1(data) {
  let diskMap = parse(data);
  let match = expand(diskMap);
  let prim = showDiskFree(match[0], match[1]);
  console.log(prim);
  return 1;
}

function solvePart2(data) {
  return 2;
}

let M;

let S;

export {
  log,
  log2,
  M,
  S,
  union,
  expandMapItem,
  expand,
  showDisk,
  showFree,
  showDiskFree,
  parse,
  solvePart1,
  solvePart2,
}
/* Stdlib__Int Not a pure module */
