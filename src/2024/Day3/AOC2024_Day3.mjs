// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Stdlib__Int from "@dsiu/rescript-stdlib-fp/src/Stdlib__Int.mjs";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__Option from "@dsiu/rescript-stdlib-fp/src/Stdlib__Option.mjs";
import * as Primitive_option from "rescript/lib/es6/Primitive_option.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function parse(data) {
  return data.trim();
}

function exec(s) {
  let mulExp = /mul\(\d+,\d+\)/g;
  let mulArgsExp = /(\d+),(\d+)/;
  let muls = s.match(mulExp);
  let result = (
    (muls == null) ? undefined : Primitive_option.some(muls)
  ).map(x => {
    let args = mulArgsExp.exec(Stdlib__Option.getExn(x, undefined));
    if (args == null) {
      return [0];
    } else {
      return args.slice(1).map(a => Stdlib__Option.getExn(Stdlib__Int.fromString(a, undefined), undefined));
    }
  });
  return result.map(Utils$AdventOfCode.mulIntArray);
}

function part1(s) {
  return Utils$AdventOfCode.sumIntArray(exec(s));
}

function part2(s) {
  return Utils$AdventOfCode.sumIntArray(s.split("do()").map(x => Stdlib__Array.getUnsafe(x.split("don't()"), 0)).map(exec).map(Utils$AdventOfCode.sumIntArray));
}

function solvePart1(data) {
  let s = data.trim();
  return Utils$AdventOfCode.sumIntArray(exec(s));
}

function solvePart2(data) {
  return part2(data.trim());
}

export {
  log,
  log2,
  parse,
  exec,
  part1,
  part2,
  solvePart1,
  solvePart2,
}
/* Stdlib__Int Not a pure module */
