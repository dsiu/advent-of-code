// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__Option from "@dsiu/rescript-stdlib-fp/src/Stdlib__Option.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function getWithDefault(m, k, d) {
  return Stdlib__Option.getWithDefault(m.get(k), d);
}

function parse(data) {
  let rows = Utils$AdventOfCode.splitNewline(data).map(r => r.trim().split(""));
  let rMax = rows.length - 1 | 0;
  let cMax = Stdlib__Option.getExn(Stdlib__Option.map(rows[0], prim => prim.length), undefined) - 1 | 0;
  let grid = Stdlib__Array.reduce(rows.flatMap((row, r) => Stdlib__Array.keepSome(row.map((elem, c) => {
    if (elem === ".") {
      return;
    } else {
      return [
        elem,
        [
          r,
          c
        ]
      ];
    }
  }))), new Map(), (m, param) => {
    let elem = param[0];
    m.set(elem, Belt_Array.concatMany([
      [param[1]],
      getWithDefault(m, elem, [])
    ]));
    return m;
  });
  return [
    grid,
    [
      [
        0,
        0
      ],
      [
        rMax,
        cMax
      ]
    ]
  ];
}

function solvePart1(data) {
  let match = parse(data);
  console.log(match[0]);
  console.log(match[1]);
  return 1;
}

function solvePart2(data) {
  return 2;
}

export {
  log,
  log2,
  getWithDefault,
  parse,
  solvePart1,
  solvePart2,
}
/* Stdlib__Array Not a pure module */
