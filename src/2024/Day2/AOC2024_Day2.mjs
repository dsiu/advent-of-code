// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Stdlib__Int from "@dsiu/rescript-stdlib-fp/src/Stdlib__Int.mjs";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__Option from "@dsiu/rescript-stdlib-fp/src/Stdlib__Option.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function isCondMet(condition) {
  return __x => __x.every(condition);
}

function condition(x) {
  return x > 0;
}

function isInc(__x) {
  return __x.every(condition);
}

function condition$1(x) {
  return x < 0;
}

function isDec(__x) {
  return __x.every(condition$1);
}

function condition$2(x) {
  return Math.abs(x) >= 1;
}

function isDiffMinOne(__x) {
  return __x.every(condition$2);
}

function condition$3(x) {
  return Math.abs(x) <= 3;
}

function isDiffMaxThree(__x) {
  return __x.every(condition$3);
}

function diff(x, y) {
  return y - x | 0;
}

function isSafe(xs) {
  let a = xs.slice(0, xs.length - 1 | 0);
  let b = Stdlib__Array.tail(xs);
  let diffs = Stdlib__Array.zipWith(a, b, diff);
  let safe = (isInc(diffs) || isDec(diffs)) && isDiffMinOne(diffs) && isDiffMaxThree(diffs);
  if (safe) {
    return xs;
  }
  
}

function removeNthElem(xs, i) {
  return xs.toSpliced(i, 1);
}

function isSafeWithTolerance(xs) {
  let subReports = Stdlib__Array.reduceWithIndex(xs, [], (acc, param, i) => {
    acc.push(removeNthElem(xs, i));
    return acc;
  });
  return Stdlib__Option.orElse(isSafe(xs), subReports.find(r => Stdlib__Option.isSome(isSafe(r))));
}

function countCondMet(xs, cond) {
  return xs.filter(x => Stdlib__Option.isSome(cond(x))).length;
}

function part1(reports) {
  return countCondMet(reports, isSafe);
}

function part2(reports) {
  return countCondMet(reports, isSafeWithTolerance);
}

function parse(data) {
  return Utils$AdventOfCode.splitNewline(data).map(x => Stdlib__Array.filterMap(x.trim().split(" "), __x => Stdlib__Int.fromString(__x, undefined)));
}

function solvePart1(data) {
  return countCondMet(parse(data), isSafe);
}

function solvePart2(data) {
  return countCondMet(parse(data), isSafeWithTolerance);
}

export {
  log,
  log2,
  isCondMet,
  isInc,
  isDec,
  isDiffMinOne,
  isDiffMaxThree,
  diff,
  isSafe,
  removeNthElem,
  isSafeWithTolerance,
  countCondMet,
  part1,
  part2,
  parse,
  solvePart1,
  solvePart2,
}
/* Stdlib__Int Not a pure module */
