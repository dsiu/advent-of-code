// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Stdlib__Int from "@dsiu/rescript-stdlib-fp/src/Stdlib__Int.mjs";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__Option from "@dsiu/rescript-stdlib-fp/src/Stdlib__Option.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function parse(data) {
  return Utils$AdventOfCode.splitNewline(data).map(prim => prim.trim()).map(x => Stdlib__Array.filterMap(x.split(" "), __x => Stdlib__Int.fromString(__x, undefined)));
}

function countInc(xs) {
  return xs.filter(x => x > 0).length;
}

function isInc(xs) {
  return countInc(xs) === xs.length;
}

function countDec(xs) {
  return xs.filter(x => x < 0).length;
}

function isDec(xs) {
  return countDec(xs) === xs.length;
}

function countDiffMinOne(xs) {
  return xs.filter(x => Math.abs(x) >= 1).length;
}

function isDiffMinOne(xs) {
  return countDiffMinOne(xs) === xs.length;
}

function countDiffMaxThree(xs) {
  return xs.filter(x => Math.abs(x) <= 3).length;
}

function isDiffMaxThree(xs) {
  return countDiffMaxThree(xs) === xs.length;
}

function isSafe(xs) {
  let a = xs.slice(0, xs.length - 1 | 0);
  let b = xs.slice(1);
  let diff = Stdlib__Array.zipWith(a, b, (x, y) => y - x | 0);
  let safe = (isInc(diff) || isDec(diff)) && isDiffMinOne(diff) && isDiffMaxThree(diff);
  if (safe) {
    return xs;
  }
  
}

function part1(reports) {
  return Stdlib__Array.filterMap(reports, isSafe).length;
}

function part2(reports) {
  return Stdlib__Array.filterMap(reports, r => {
    if (Stdlib__Option.isSome(isSafe(r))) {
      return r;
    }
    let subReports = Stdlib__Array.reduceWithIndex(r, [], (acc, param, i) => {
      acc.push(r.toSpliced(i, 1));
      return acc;
    });
    return Stdlib__Array.find(subReports, r => Stdlib__Option.isSome(isSafe(r)));
  }).length;
}

function solvePart1(data) {
  let reports = parse(data);
  return Stdlib__Array.filterMap(reports, isSafe).length;
}

function solvePart2(data) {
  return part2(parse(data));
}

export {
  log,
  log2,
  parse,
  countInc,
  isInc,
  countDec,
  isDec,
  countDiffMinOne,
  isDiffMinOne,
  countDiffMaxThree,
  isDiffMaxThree,
  isSafe,
  part1,
  part2,
  solvePart1,
  solvePart2,
}
/* Stdlib__Int Not a pure module */
