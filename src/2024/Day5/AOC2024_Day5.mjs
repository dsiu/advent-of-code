// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../../Utils.mjs";
import * as Stdlib__Int from "@dsiu/rescript-stdlib-fp/src/Stdlib__Int.mjs";
import * as Stdlib__Set from "@dsiu/rescript-stdlib-fp/src/Stdlib__Set.mjs";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__Tuple2 from "@dsiu/rescript-stdlib-fp/src/Stdlib__Tuple2.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function ruleMapUpdate(m, key, f) {
  let value = m.get(key);
  if (value !== undefined) {
    m.set(key, f(value));
  } else {
    m.set(key, f([
      new Set(),
      new Set()
    ]));
  }
}

function makeRules(rulesData) {
  return Stdlib__Array.reduce(rulesData, new Map(), (acc, param) => {
    let after = param[1];
    let before = param[0];
    ruleMapUpdate(acc, before, param => {
      let v = param[1];
      v.add(after);
      return [
        param[0],
        v
      ];
    });
    ruleMapUpdate(acc, after, param => {
      let u = param[0];
      u.add(before);
      return [
        u,
        param[1]
      ];
    });
    return acc;
  });
}

function isOrderValid(update, rules) {
  return Stdlib__Array.reduceWithIndex(update, true, (isValid, cur, i) => {
    if (!isValid) {
      return false;
    }
    let before = update.slice(0, i);
    let after = update.slice(i + 1 | 0);
    let param = rules.get(cur);
    if (new Set(before).isSubsetOf(param[0])) {
      return new Set(after).isSubsetOf(param[1]);
    } else {
      return false;
    }
  });
}

function printable(rules, unprinted, page) {
  let match = rules.get(page);
  return unprinted.isSubsetOf(match[1]);
}

function printCandidate(rules, unprinted) {
  return new Set(Stdlib__Set.toArray(unprinted).filter(x => {
    let unprinted$p = new Set(Stdlib__Set.toArray(unprinted).filter(i => i !== x));
    return printable(rules, unprinted$p, x);
  }));
}

function reorder(rules, _printed, unprinted) {
  while (true) {
    let printed = _printed;
    let match = unprinted.size;
    if (match === 0) {
      return printed;
    }
    let candidate = printCandidate(rules, unprinted);
    let next = Utils.minIntInArray(Stdlib__Set.toArray(candidate));
    unprinted.delete(next);
    let printed$p = printed.concat([next]);
    _printed = printed$p;
    continue;
  };
}

function middlePage(pages) {
  let len = pages.length;
  let middle = len / 2 | 0;
  return Stdlib__Array.getUnsafe(pages, middle);
}

function parse(data) {
  let match = Utils.splitDoubleNewline(data).map(Utils.splitNewline);
  if (match.length !== 2) {
    throw {
      RE_EXN_ID: "Match_failure",
      _1: [
        "AOC2024_Day5.res",
        92,
        6
      ],
      Error: new Error()
    };
  }
  let rules = match[0];
  let updates = match[1];
  return [
    rules.map(l => Stdlib__Tuple2.fromArray(l.trim().split("|").map(x => Stdlib__Int.fromString(x, undefined)))),
    updates.map(l => l.trim().split(",").map(x => Stdlib__Int.fromString(x, undefined)))
  ];
}

function solvePart1(data) {
  let match = parse(data);
  let rules = makeRules(match[0]);
  return Utils.sumIntArray(match[1].filter(__x => isOrderValid(__x, rules)).map(middlePage));
}

function solvePart2(data) {
  let match = parse(data);
  let rules = makeRules(match[0]);
  return Utils.sumIntArray(match[1].filter(x => !isOrderValid(x, rules)).map(p => reorder(rules, [], new Set(p))).map(middlePage));
}

export {
  log,
  log2,
  ruleMapUpdate,
  makeRules,
  isOrderValid,
  printable,
  printCandidate,
  reorder,
  middlePage,
  parse,
  solvePart1,
  solvePart2,
}
/* Utils Not a pure module */
