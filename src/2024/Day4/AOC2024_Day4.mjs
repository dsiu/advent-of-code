// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../../Utils.mjs";
import * as Array2D from "../../Array2D.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Coordinate from "../../Coordinate.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function pointExtensions(startPos, steps) {
  let directions = [
    Coordinate.StepFunctions.stepNW,
    Coordinate.StepFunctions.stepN,
    Coordinate.StepFunctions.stepNE,
    Coordinate.StepFunctions.stepW,
    Coordinate.StepFunctions.stepE,
    Coordinate.StepFunctions.stepSW,
    Coordinate.StepFunctions.stepS,
    Coordinate.StepFunctions.stepSE
  ];
  return directions.map(f => {
    let _acc = [startPos];
    let _cur = startPos;
    let _i = 0;
    while (true) {
      let i = _i;
      let cur = _cur;
      let acc = _acc;
      let next = f(cur);
      if (i >= (steps - 1 | 0)) {
        return acc;
      }
      _i = i + 1 | 0;
      _cur = next;
      _acc = Belt_Array.concatMany([
        acc,
        [next]
      ]);
      continue;
    };
  });
}

function xExtensions(c) {
  return [[
      c,
      Coordinate.StepFunctions.stepNW(c),
      Coordinate.StepFunctions.stepNE(c),
      Coordinate.StepFunctions.stepSW(c),
      Coordinate.StepFunctions.stepSE(c)
    ]];
}

function potentialWords(exts, grid) {
  return Array2D.reduceWithIndex(grid, [], (acc, param, pos) => Belt_Array.concatMany([
    acc,
    exts(pos)
  ]));
}

function validWords(words, grid) {
  let validWord = word => word.every(pos => Array2D.isValidXY(grid, pos));
  return words.filter(validWord);
}

function foundWords(words, grid) {
  let getWordFromGrid = word => word.map(__x => Array2D.getExn(grid, __x)).join("");
  return words.map(getWordFromGrid);
}

function isXmas(word) {
  switch (word) {
    case "AMMSS" :
    case "AMSMS" :
    case "ASMSM" :
    case "ASSMM" :
      return true;
    default:
      return false;
  }
}

function part1(grid, word) {
  let len = word.length;
  return foundWords(validWords(potentialWords(__x => pointExtensions(__x, len), grid), grid), grid).filter(w => w === word).length;
}

function part2(grid) {
  return foundWords(validWords(potentialWords(xExtensions, grid), grid), grid).filter(isXmas).length;
}

function parse(data) {
  return Utils.splitNewline(data).map(x => x.trim().split(""));
}

function solvePart1(data) {
  return part1(parse(data), "XMAS");
}

function solvePart2(data) {
  return part2(parse(data));
}

export {
  log,
  log2,
  pointExtensions,
  xExtensions,
  potentialWords,
  validWords,
  foundWords,
  isXmas,
  part1,
  part2,
  parse,
  solvePart1,
  solvePart2,
}
/* Utils Not a pure module */
