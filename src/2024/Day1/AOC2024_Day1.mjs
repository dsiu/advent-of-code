// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Stdlib__Int from "@dsiu/rescript-stdlib-fp/src/Stdlib__Int.mjs";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__Option from "@dsiu/rescript-stdlib-fp/src/Stdlib__Option.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function parse(data) {
  return Stdlib__Array.transpose(Utils$AdventOfCode.splitNewline(data).map(l => l.trim().split("   ")).map(l => [
    Stdlib__Option.getExn(Stdlib__Option.flatMap(l[0], __x => Stdlib__Int.fromString(__x, undefined)), undefined),
    Stdlib__Option.getExn(Stdlib__Option.flatMap(l[1], __x => Stdlib__Int.fromString(__x, undefined)), undefined)
  ]));
}

function part1(l1, l2) {
  return Utils$AdventOfCode.sumIntArray(Stdlib__Array.zipWith(l1.toSorted(Primitive_int.compare), l2.toSorted(Primitive_int.compare), (a, b) => Math.abs(a - b | 0)));
}

function part2(l1, l2) {
  return Utils$AdventOfCode.sumIntArray(l1.map(a => Math.imul(a, l2.filter(b => b === a).length)));
}

function solvePart1(data) {
  let match = parse(data);
  if (match.length !== 2) {
    throw {
      RE_EXN_ID: "Match_failure",
      _1: [
        "AOC2024_Day1.res",
        35,
        6
      ],
      Error: new Error()
    };
  }
  let l1 = match[0];
  let l2 = match[1];
  return part1(l1, l2);
}

function solvePart2(data) {
  let match = parse(data);
  if (match.length !== 2) {
    throw {
      RE_EXN_ID: "Match_failure",
      _1: [
        "AOC2024_Day1.res",
        41,
        6
      ],
      Error: new Error()
    };
  }
  let l1 = match[0];
  let l2 = match[1];
  return part2(l1, l2);
}

export {
  log,
  log2,
  parse,
  part1,
  part2,
  solvePart1,
  solvePart2,
}
/* Stdlib__Int Not a pure module */
