// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_Map from "rescript/lib/es6/belt_Map.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Stdlib__Int from "@dsiu/rescript-stdlib-fp/src/Stdlib__Int.mjs";
import * as Stdlib__List from "@dsiu/rescript-stdlib-fp/src/Stdlib__List.mjs";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__Result from "@dsiu/rescript-stdlib-fp/src/Stdlib__Result.mjs";
import * as Stdlib__Ordering from "@dsiu/rescript-stdlib-fp/src/Stdlib__Ordering.mjs";
import * as ReludeParse_Parser from "relude-parse/src/ReludeParse_Parser.mjs";
import * as TableclothComparator from "@dsiu/rescript-stdlib-fp/src/Tablecloth/TableclothComparator.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

var compare = Caml_obj.compare;

var include = TableclothComparator.Make({
      compare: compare
    });

var names = Stdlib__List.fromArray("23456789TJQKA".split(""));

function make(str) {
  switch (str) {
    case "2" :
        return "Two";
    case "3" :
        return "Three";
    case "4" :
        return "Four";
    case "5" :
        return "Five";
    case "6" :
        return "Six";
    case "7" :
        return "Seven";
    case "8" :
        return "Eight";
    case "9" :
        return "Nine";
    case "A" :
        return "Ace";
    case "J" :
        return "Jack";
    case "K" :
        return "King";
    case "Q" :
        return "Queen";
    case "T" :
        return "Ten";
    default:
      return Pervasives.failwith("invalid card");
  }
}

function value(t) {
  switch (t) {
    case "Two" :
        return 2;
    case "Three" :
        return 3;
    case "Four" :
        return 4;
    case "Five" :
        return 5;
    case "Six" :
        return 6;
    case "Seven" :
        return 7;
    case "Eight" :
        return 8;
    case "Nine" :
        return 9;
    case "Ten" :
        return 10;
    case "Jack" :
        return 11;
    case "Queen" :
        return 12;
    case "King" :
        return 13;
    case "Ace" :
        return 14;
    
  }
}

function compare_Ord(a, b) {
  return Stdlib__Int.compare(value(a), value(b));
}

function compare$1(a, b) {
  return Stdlib__Ordering.toInt(compare_Ord(a, b));
}

var Card_comparator = include.comparator;

var Card = {
  comparator: Card_comparator,
  names: names,
  make: make,
  value: value,
  compare_Ord: compare_Ord,
  compare: compare$1
};

function sign(cards) {
  var sortedCards = cards.toSorted(compare_Ord);
  var groupedCards = Stdlib__Array.groupBy(sortedCards, Card, (function (a) {
          return a;
        }));
  var mappedCards = Belt_Map.valuesToArray(Belt_Map.map(groupedCards, (function (group) {
              return [
                      Stdlib__List.length(group),
                      group
                    ];
            })));
  return mappedCards.toSorted(function (param, param$1) {
                var c = Stdlib__Int.compare(param[0], param$1[0]);
                if (Stdlib__Ordering.isEqual(c)) {
                  return compare_Ord(Stdlib__List.getExn(param[1], 0), Stdlib__List.getExn(param$1[1], 0));
                } else {
                  return c;
                }
              }).toReversed();
}

var justSpace = Curry._1(ReludeParse_Parser.$$void, ReludeParse_Parser.many(ReludeParse_Parser.str(" ")));

function handC(a, b) {
  var cards = Stdlib__List.toArray(a);
  return {
          TAG: "Hand",
          _0: cards,
          _1: b
        };
}

var cardP = Curry._2(ReludeParse_Parser.Infix.$less$$great, make, ReludeParse_Parser.anyOfStr(names));

var handP = Curry._2(ReludeParse_Parser.Infix.$less$star$great, Curry._2(ReludeParse_Parser.Infix.$less$$great, handC, Curry._2(ReludeParse_Parser.Infix.$star$great, justSpace, Curry._2(ReludeParse_Parser.Infix.$less$star, ReludeParse_Parser.many(cardP), justSpace))), ReludeParse_Parser.anyInt);

var handsP = ReludeParse_Parser.sepBy(ReludeParse_Parser.eol, handP);

function run(str) {
  return Stdlib__List.toArray(Stdlib__Result.getExn(ReludeParse_Parser.runParser(str, handsP)));
}

var HandsParser = {
  P: undefined,
  justSpace: justSpace,
  handC: handC,
  cardP: cardP,
  handP: handP,
  handsP: handsP,
  run: run
};

function solvePart1(data) {
  var hands = run(data);
  var signed = Stdlib__Array.map(hands, (function (param) {
          return sign(param._0);
        }));
  Stdlib__Array.forEach(signed, log);
  var cardsAsList = Stdlib__Array.map(signed, Stdlib__List.fromArray);
  var c = Stdlib__Array.getUnsafe(cardsAsList, 0);
  console.log("c", c);
  var prim;
  if (c) {
    switch (c.hd[0]) {
      case 2 :
          var match = c.tl;
          if (match && match.hd[0] === 2) {
            var match$1 = match.tl;
            prim = match$1 && !match$1.tl ? "TwoPair" : "OnePair";
          } else {
            prim = "OnePair";
          }
          break;
      case 3 :
          var match$2 = c.tl;
          prim = match$2 && !(match$2.hd[0] !== 2 || match$2.tl) ? "FullHouse" : "ThreeOfAKind";
          break;
      case 4 :
          prim = "FourOfAKind";
          break;
      case 5 :
          prim = "FiveOfAKind";
          break;
      default:
        prim = "HighCard";
    }
  } else {
    prim = "HighCard";
  }
  console.log(prim);
  return 1;
}

function solvePart2(data) {
  return 2;
}

export {
  log ,
  log2 ,
  Card ,
  sign ,
  HandsParser ,
  solvePart1 ,
  solvePart2 ,
}
/* include Not a pure module */
