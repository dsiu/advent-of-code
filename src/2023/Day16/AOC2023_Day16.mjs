// Generated by ReScript, PLEASE EDIT WITH CARE

import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__Function from "@dsiu/rescript-stdlib-fp/src/Stdlib__Function.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as Coord_V2$AdventOfCode from "../../Coord_V2.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function move(pos, dir) {
  switch (dir) {
    case "U" :
        return Coord_V2$AdventOfCode.add(pos, [
                    -1,
                    0
                  ]);
    case "D" :
        return Coord_V2$AdventOfCode.add(pos, [
                    1,
                    0
                  ]);
    case "L" :
        return Coord_V2$AdventOfCode.add(pos, [
                    0,
                    -1
                  ]);
    case "R" :
        return Coord_V2$AdventOfCode.add(pos, [
                    0,
                    1
                  ]);
    
  }
}

function propagateElem(element, beamHead) {
  switch (element) {
    case "Empty" :
        var match = beamHead._0;
        var dir = match[1];
        return [{
                  TAG: "BeamHead",
                  _0: [
                    move(match[0], dir),
                    dir
                  ]
                }];
    case "SlashMirror" :
        var match$1 = beamHead._0;
        var pos = match$1[0];
        switch (match$1[1]) {
          case "U" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos, "R"),
                          "R"
                        ]
                      }];
          case "D" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos, "L"),
                          "L"
                        ]
                      }];
          case "L" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos, "D"),
                          "D"
                        ]
                      }];
          case "R" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos, "U"),
                          "U"
                        ]
                      }];
          
        }
    case "BackslashMirror" :
        var match$2 = beamHead._0;
        var pos$1 = match$2[0];
        switch (match$2[1]) {
          case "U" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos$1, "L"),
                          "L"
                        ]
                      }];
          case "D" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos$1, "R"),
                          "R"
                        ]
                      }];
          case "L" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos$1, "U"),
                          "U"
                        ]
                      }];
          case "R" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos$1, "D"),
                          "D"
                        ]
                      }];
          
        }
    case "HorizontalSplitter" :
        var match$3 = beamHead._0;
        var pos$2 = match$3[0];
        switch (match$3[1]) {
          case "U" :
          case "D" :
              break;
          case "L" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos$2, "L"),
                          "L"
                        ]
                      }];
          case "R" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos$2, "R"),
                          "R"
                        ]
                      }];
          
        }
        return [
                {
                  TAG: "BeamHead",
                  _0: [
                    move(pos$2, "L"),
                    "L"
                  ]
                },
                {
                  TAG: "BeamHead",
                  _0: [
                    move(pos$2, "R"),
                    "R"
                  ]
                }
              ];
    case "VerticalSplitter" :
        var match$4 = beamHead._0;
        var pos$3 = match$4[0];
        switch (match$4[1]) {
          case "U" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos$3, "U"),
                          "U"
                        ]
                      }];
          case "D" :
              return [{
                        TAG: "BeamHead",
                        _0: [
                          move(pos$3, "D"),
                          "D"
                        ]
                      }];
          case "L" :
          case "R" :
              break;
          
        }
        return [
                {
                  TAG: "BeamHead",
                  _0: [
                    move(pos$3, "U"),
                    "U"
                  ]
                },
                {
                  TAG: "BeamHead",
                  _0: [
                    move(pos$3, "D"),
                    "D"
                  ]
                }
              ];
    
  }
}

function propagate(grid, energized, beanHeads) {
  return energized;
}

function makeElement(s) {
  switch (s) {
    case "-" :
        return "HorizontalSplitter";
    case "." :
        return "Empty";
    case "/" :
        return "SlashMirror";
    case "\\" :
        return "BackslashMirror";
    case "|" :
        return "VerticalSplitter";
    default:
      return PervasivesU.failwith("Unknown element");
  }
}

function makeGrid(xss) {
  var r = xss.length;
  var c = Stdlib__Array.getUnsafe(xss, 0).length;
  return new Map(Stdlib__Array.flatten(Stdlib__Array.zipWith(Stdlib__Array.fromInitializer(r, Stdlib__Function.id), xss, (function (rowNum, row) {
                        return Stdlib__Array.zipWith(Stdlib__Array.fromInitializer(c, Stdlib__Function.id), row, (function (colNum, col) {
                                      return [
                                              [
                                                rowNum,
                                                colNum
                                              ],
                                              makeElement(col)
                                            ];
                                    }));
                      }))));
}

function parse(data) {
  return Utils$AdventOfCode.splitNewline(data).map(function (l) {
              return l.trim().split("");
            });
}

function solvePart1(data) {
  var p = parse(data);
  console.log(p);
  var prim = makeGrid(p);
  console.log(prim);
  return 1;
}

function solvePart2(data) {
  return 2;
}

export {
  log ,
  log2 ,
  move ,
  propagateElem ,
  propagate ,
  makeElement ,
  makeGrid ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* Stdlib__Array Not a pure module */
