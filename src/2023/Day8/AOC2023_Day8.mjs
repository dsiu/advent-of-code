// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Stdlib__List from "@dsiu/rescript-stdlib-fp/src/Stdlib__List.mjs";
import * as Stdlib__Result from "@dsiu/rescript-stdlib-fp/src/Stdlib__Result.mjs";
import * as ReludeParse_Parser from "relude-parse/src/ReludeParse_Parser.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

var justSpace = Curry._1(ReludeParse_Parser.$$void, ReludeParse_Parser.many(ReludeParse_Parser.str(" ")));

function mkNode(a, b) {
  return {
          TAG: "Node",
          _0: a,
          _1: b
        };
}

function mkDesertLine(a, b) {
  return [
          a,
          b
        ];
}

var nameP = ReludeParse_Parser.$less$hash$great(ReludeParse_Parser.many(ReludeParse_Parser.anyAlphaOrDigit), (function (l) {
        return Stdlib__List.toArray(l).join("");
      }));

var nodeP = Curry._2(ReludeParse_Parser.Infix.$less$star$great, Curry._2(ReludeParse_Parser.Infix.$less$$great, mkNode, Curry._2(ReludeParse_Parser.Infix.$less$star, Curry._2(ReludeParse_Parser.Infix.$star$great, ReludeParse_Parser.str("("), nameP), ReludeParse_Parser.str(", "))), Curry._2(ReludeParse_Parser.Infix.$less$star, nameP, ReludeParse_Parser.str(")")));

var desertLineP = Curry._2(ReludeParse_Parser.Infix.$less$star$great, Curry._2(ReludeParse_Parser.Infix.$less$$great, mkDesertLine, Curry._2(ReludeParse_Parser.Infix.$less$star, Curry._2(ReludeParse_Parser.Infix.$star$great, justSpace, nameP), ReludeParse_Parser.str(" = "))), nodeP);

function mkDesert(a) {
  return new Map(Stdlib__List.toArray(a));
}

var desertP = Curry._2(ReludeParse_Parser.Infix.$less$$great, mkDesert, ReludeParse_Parser.sepBy(ReludeParse_Parser.eol, desertLineP));

var directionP = Curry._2(ReludeParse_Parser.Infix.$less$pipe$great, Curry._2(ReludeParse_Parser.Infix.$less$, "L", ReludeParse_Parser.str("L")), Curry._2(ReludeParse_Parser.Infix.$less$, "R", ReludeParse_Parser.str("R")));

function mkProblem(a, b) {
  return [
          Stdlib__List.toArray(a),
          b
        ];
}

var problemP = Curry._2(ReludeParse_Parser.Infix.$less$star$great, Curry._2(ReludeParse_Parser.Infix.$less$$great, mkProblem, Curry._2(ReludeParse_Parser.Infix.$less$star, ReludeParse_Parser.many(directionP), ReludeParse_Parser.many1(ReludeParse_Parser.eol))), desertP);

function run(data) {
  return Stdlib__Result.getExn(ReludeParse_Parser.runParser(data, problemP));
}

var ProblemParser = {
  P: undefined,
  justSpace: justSpace,
  debug: ReludeParse_Parser.tapLog,
  mkNode: mkNode,
  mkDesertLine: mkDesertLine,
  nameP: nameP,
  nodeP: nodeP,
  desertLineP: desertLineP,
  mkDesert: mkDesert,
  desertP: desertP,
  directionP: directionP,
  mkProblem: mkProblem,
  problemP: problemP,
  run: run
};

function solvePart1(data) {
  var match = Stdlib__Result.getExn(ReludeParse_Parser.runParser(data, problemP));
  console.log(match[0]);
  console.log(match[1]);
  return 1;
}

function solvePart2(data) {
  return 2;
}

export {
  log ,
  log2 ,
  ProblemParser ,
  solvePart1 ,
  solvePart2 ,
}
/* justSpace Not a pure module */
