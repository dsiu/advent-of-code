// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Int from "@rescript/core/src/Core__Int.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.mjs";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function makeDraw(str, n) {
  switch (str) {
    case "blue" :
        return {
                TAG: "Blue",
                _0: n
              };
    case "green" :
        return {
                TAG: "Green",
                _0: n
              };
    case "red" :
        return {
                TAG: "Red",
                _0: n
              };
    default:
      return PervasivesU.failwith("invalid color");
  }
}

function parse(data) {
  return Utils$AdventOfCode.splitNewline(data).map(function (l) {
              var ll = l.trim().split(": ");
              var round = Core__Int.fromString(10, ll.at(0).replace("Game ", ""));
              var draws = ll.at(1).split("; ").map(function (eachDraw) {
                      return eachDraw.split(", ").map(function (singleDraw) {
                                  var d = singleDraw.split(" ");
                                  var nColor = Core__Int.fromString(10, d.at(0));
                                  var color = d.at(1);
                                  return makeDraw(color, nColor);
                                });
                    }).flat();
              return {
                      round: round,
                      draws: draws
                    };
            });
}

function maxNumColorsEachGame(draws) {
  return Core__Array.reduce(draws, [
              {
                TAG: "Red",
                _0: 0
              },
              {
                TAG: "Green",
                _0: 0
              },
              {
                TAG: "Blue",
                _0: 0
              }
            ], (function (acc, x) {
                var r = acc[0];
                switch (r.TAG) {
                  case "Red" :
                      var g = acc[1];
                      var r$1 = r._0;
                      switch (g.TAG) {
                        case "Red" :
                        case "Blue" :
                            break;
                        case "Green" :
                            var b = acc[2];
                            var g$1 = g._0;
                            switch (b.TAG) {
                              case "Blue" :
                                  var b$1 = b._0;
                                  switch (x.TAG) {
                                    case "Red" :
                                        var n = x._0;
                                        if (n > r$1) {
                                          return [
                                                  {
                                                    TAG: "Red",
                                                    _0: n
                                                  },
                                                  {
                                                    TAG: "Green",
                                                    _0: g$1
                                                  },
                                                  {
                                                    TAG: "Blue",
                                                    _0: b$1
                                                  }
                                                ];
                                        } else {
                                          return acc;
                                        }
                                    case "Blue" :
                                        var n$1 = x._0;
                                        if (n$1 > b$1) {
                                          return [
                                                  {
                                                    TAG: "Red",
                                                    _0: r$1
                                                  },
                                                  {
                                                    TAG: "Green",
                                                    _0: g$1
                                                  },
                                                  {
                                                    TAG: "Blue",
                                                    _0: n$1
                                                  }
                                                ];
                                        } else {
                                          return acc;
                                        }
                                    case "Green" :
                                        var n$2 = x._0;
                                        if (n$2 > g$1) {
                                          return [
                                                  {
                                                    TAG: "Red",
                                                    _0: r$1
                                                  },
                                                  {
                                                    TAG: "Green",
                                                    _0: n$2
                                                  },
                                                  {
                                                    TAG: "Blue",
                                                    _0: b$1
                                                  }
                                                ];
                                        } else {
                                          return acc;
                                        }
                                    
                                  }
                              case "Red" :
                              case "Green" :
                                  break;
                              
                            }
                            break;
                        
                      }
                      break;
                  case "Blue" :
                  case "Green" :
                      break;
                  
                }
                throw {
                      RE_EXN_ID: "Match_failure",
                      _1: [
                        "AOC2023_Day2.res",
                        66,
                        8
                      ],
                      Error: new Error()
                    };
              }));
}

function maxColorWithLimits(games, colorLimits) {
  return Core__Array.keepSome(games.map(function (param) {
                  var maxColors = maxNumColorsEachGame(param.draws);
                  var r = maxColors[0];
                  switch (r.TAG) {
                    case "Red" :
                        var g = maxColors[1];
                        switch (g.TAG) {
                          case "Red" :
                          case "Blue" :
                              break;
                          case "Green" :
                              var b = maxColors[2];
                              switch (b.TAG) {
                                case "Blue" :
                                    var exit = 0;
                                    var max_r = colorLimits[0];
                                    switch (max_r.TAG) {
                                      case "Red" :
                                          var max_g = colorLimits[1];
                                          switch (max_g.TAG) {
                                            case "Red" :
                                            case "Blue" :
                                                exit = 2;
                                                break;
                                            case "Green" :
                                                var max_b = colorLimits[2];
                                                switch (max_b.TAG) {
                                                  case "Blue" :
                                                      if (r._0 <= max_r._0 && g._0 <= max_g._0 && b._0 <= max_b._0) {
                                                        return [
                                                                param.round,
                                                                maxColors
                                                              ];
                                                      } else {
                                                        return ;
                                                      }
                                                  case "Red" :
                                                  case "Green" :
                                                      exit = 2;
                                                      break;
                                                  
                                                }
                                                break;
                                            
                                          }
                                          break;
                                      case "Blue" :
                                      case "Green" :
                                          exit = 2;
                                          break;
                                      
                                    }
                                    if (exit === 2) {
                                      throw {
                                            RE_EXN_ID: "Match_failure",
                                            _1: [
                                              "AOC2023_Day2.res",
                                              81,
                                              8
                                            ],
                                            Error: new Error()
                                          };
                                    }
                                    break;
                                case "Red" :
                                case "Green" :
                                    break;
                                
                              }
                              break;
                          
                        }
                        break;
                    case "Blue" :
                    case "Green" :
                        break;
                    
                  }
                  throw {
                        RE_EXN_ID: "Match_failure",
                        _1: [
                          "AOC2023_Day2.res",
                          80,
                          8
                        ],
                        Error: new Error()
                      };
                }));
}

function part1(games) {
  return Utils$AdventOfCode.sumIntArray(maxColorWithLimits(games, [
                    {
                      TAG: "Red",
                      _0: 12
                    },
                    {
                      TAG: "Green",
                      _0: 13
                    },
                    {
                      TAG: "Blue",
                      _0: 14
                    }
                  ]).map(function (param) {
                  return param[0];
                }));
}

function part2(games) {
  var maxInt = Core__Int.Constants.maxValue;
  var colorLimits_0 = {
    TAG: "Red",
    _0: maxInt
  };
  var colorLimits_1 = {
    TAG: "Green",
    _0: maxInt
  };
  var colorLimits_2 = {
    TAG: "Blue",
    _0: maxInt
  };
  var colorLimits = [
    colorLimits_0,
    colorLimits_1,
    colorLimits_2
  ];
  return Utils$AdventOfCode.sumIntArray(maxColorWithLimits(games, colorLimits).map(function (param) {
                  var draws = param[1];
                  var r = draws[0];
                  switch (r.TAG) {
                    case "Red" :
                        var g = draws[1];
                        switch (g.TAG) {
                          case "Red" :
                          case "Blue" :
                              break;
                          case "Green" :
                              var b = draws[2];
                              switch (b.TAG) {
                                case "Blue" :
                                    return Math.imul(Math.imul(r._0, g._0), b._0);
                                case "Red" :
                                case "Green" :
                                    break;
                                
                              }
                              break;
                          
                        }
                        break;
                    case "Blue" :
                    case "Green" :
                        break;
                    
                  }
                  throw {
                        RE_EXN_ID: "Match_failure",
                        _1: [
                          "AOC2023_Day2.res",
                          101,
                          8
                        ],
                        Error: new Error()
                      };
                }));
}

function solvePart1(data) {
  return part1(parse(data));
}

function solvePart2(data) {
  return part2(parse(data));
}

export {
  log ,
  makeDraw ,
  parse ,
  maxNumColorsEachGame ,
  maxColorWithLimits ,
  part1 ,
  part2 ,
  solvePart1 ,
  solvePart2 ,
}
/* No side effect */
