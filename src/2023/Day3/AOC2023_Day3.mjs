// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Core__Int from "@rescript/core/src/Core__Int.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.mjs";
import * as PervasivesU from "rescript/lib/es6/pervasivesU.js";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as Array2D$AdventOfCode from "../../Array2D.mjs";
import * as Coordinate$AdventOfCode from "../../Coordinate.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function makeElem($$char) {
  var d = Core__Int.fromString(10, $$char);
  if (d !== undefined) {
    return {
            TAG: "Digit",
            _0: d
          };
  } else if ($$char === ".") {
    return "Dot";
  } else {
    return "Symbol";
  }
}

function isDigit(e) {
  if (typeof e !== "object") {
    return false;
  } else {
    return true;
  }
}

function isSymbol(e) {
  if (typeof e !== "object" && e !== "Dot") {
    return true;
  } else {
    return false;
  }
}

function getNeighborsIf(c, fn) {
  var nextTo = [
    Coordinate$AdventOfCode.Direction.north,
    Coordinate$AdventOfCode.Direction.south,
    Coordinate$AdventOfCode.Direction.east,
    Coordinate$AdventOfCode.Direction.west,
    Coordinate$AdventOfCode.Direction.northEast,
    Coordinate$AdventOfCode.Direction.northWest,
    Coordinate$AdventOfCode.Direction.southEast,
    Coordinate$AdventOfCode.Direction.southWest
  ];
  return Core__Array.filterMap(nextTo, (function (dir) {
                return fn(dir(c));
              }));
}

function isElemDigit(engine, p) {
  return Core__Option.flatMap(Array2D$AdventOfCode.get(engine, p), (function (e) {
                if (isDigit(e)) {
                  return p;
                }
                
              }));
}

function makeEngine(__x) {
  return Array2D$AdventOfCode.mapU(__x, makeElem);
}

function engineFilter(engine, fn) {
  return Array2D$AdventOfCode.reduceWithIndex(engine, [], (function (acc, e, c) {
                if (fn(e)) {
                  acc.push(c);
                }
                return acc;
              }));
}

function rowsFromRegion(region) {
  return Core__Array.reduce(region.map(function (param) {
                    return param[1];
                  }).toSorted(Core__Int.compare), [], (function (acc, e) {
                var last = acc.at(acc.length - 1 | 0);
                if (last !== undefined && last === e) {
                  return acc;
                } else {
                  acc.push(e);
                  return acc;
                }
              }));
}

function findNumbers(engine) {
  var numberRegions = engineFilter(engine, isDigit).toSorted(Coordinate$AdventOfCode.Compare.yx);
  var rowsWithNumber = rowsFromRegion(numberRegions);
  var groupedByRow = rowsWithNumber.map(function (y) {
        return numberRegions.filter(function (param) {
                    return param[1] === y;
                  });
      });
  return groupedByRow.map(function (__x) {
                  return __x.toSorted(Coordinate$AdventOfCode.Compare.xy);
                }).map(function (l) {
                l.push([
                      0,
                      0
                    ]);
                return Core__Array.reduce(l, [
                              [],
                              []
                            ], (function (param, param$1) {
                                var y = param$1[1];
                                var x = param$1[0];
                                var buf = param[1];
                                var parsed = param[0];
                                var last = buf.at(buf.length - 1 | 0);
                                if (last !== undefined && last[0] !== (x - 1 | 0)) {
                                  parsed.push(buf);
                                  return [
                                          parsed,
                                          [[
                                              x,
                                              y
                                            ]]
                                        ];
                                } else {
                                  buf.push([
                                        x,
                                        y
                                      ]);
                                  return [
                                          parsed,
                                          buf
                                        ];
                                }
                              }))[0];
              }).flat();
}

function findSymbols(engine) {
  return engineFilter(engine, isSymbol);
}

function touchedDigit(engine, symbols) {
  return symbols.flatMap(function (c) {
              return getNeighborsIf(c, (function (__x) {
                            return isElemDigit(engine, __x);
                          }));
            });
}

function isNumberTouched(number, symTouched) {
  return Core__Array.reduce(symTouched, 0, (function (acc, sPos) {
                if (Core__Array.reduce(number, 0, (function (acc, nPos) {
                          return Caml_obj.equal(nPos, sPos) ? acc + 1 | 0 : acc;
                        })) > 0) {
                  return acc + 1 | 0;
                } else {
                  return acc;
                }
              })) > 0;
}

function isNumberTouched_opt(number, symTouched) {
  return symTouched.some(function (sPos) {
              return number.includes(sPos);
            });
}

function getNumber(engine, number) {
  return Core__Array.reduce(number.map(function (n) {
                  var match = Array2D$AdventOfCode.get(engine, n);
                  if (match !== undefined && typeof match === "object") {
                    return match._0;
                  } else {
                    return PervasivesU.failwith("expected digit");
                  }
                }), 0, (function (acc, d) {
                return Math.imul(acc, 10) + d | 0;
              }));
}

function findNumbersTouched(engine, numbers, symTouched) {
  return numbers.filter(function (__x) {
                return isNumberTouched(__x, symTouched);
              }).map(function (__x) {
              return getNumber(engine, __x);
            });
}

function part1(engine) {
  var symbols = engineFilter(engine, isSymbol);
  console.log("symbols");
  console.log(symbols);
  var numbers = findNumbers(engine);
  console.log("numbers");
  console.log(numbers);
  var symTouched = touchedDigit(engine, symbols);
  console.log("symTouched");
  console.log(symTouched);
  return Utils$AdventOfCode.sumIntArray(findNumbersTouched(engine, numbers, symTouched));
}

function parse(data) {
  return Utils$AdventOfCode.splitNewline(data).map(function (param) {
              return Utils$AdventOfCode.compose((function (prim) {
                            return prim.trim();
                          }), Utils$AdventOfCode.splitChars, param);
            });
}

function solvePart1(data) {
  return part1(Array2D$AdventOfCode.mapU(parse(data), makeElem));
}

function solvePart2(data) {
  return 2;
}

export {
  log ,
  log2 ,
  makeElem ,
  isDigit ,
  isSymbol ,
  getNeighborsIf ,
  isElemDigit ,
  makeEngine ,
  engineFilter ,
  rowsFromRegion ,
  findNumbers ,
  findSymbols ,
  touchedDigit ,
  isNumberTouched ,
  isNumberTouched_opt ,
  getNumber ,
  findNumbersTouched ,
  part1 ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* No side effect */
