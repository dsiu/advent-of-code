// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Int from "@rescript/core/src/Core__Int.mjs";
import * as Core__Array from "@rescript/core/src/Core__Array.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as Array2D$AdventOfCode from "../../Array2D.mjs";
import * as Coordinate$AdventOfCode from "../../Coordinate.mjs";

function log(prim) {
  console.log(prim);
}

function makeElem($$char) {
  var d = Core__Int.fromString(10, $$char);
  if (d !== undefined) {
    return {
            TAG: "Digit",
            _0: d
          };
  } else if ($$char === ".") {
    return "Dot";
  } else {
    return "Symbol";
  }
}

function isDigit(e) {
  if (typeof e !== "object") {
    return false;
  } else {
    return true;
  }
}

function isSymbol(e) {
  if (typeof e !== "object" && e !== "Dot") {
    return true;
  } else {
    return false;
  }
}

function getNeighborsIf(c, fn) {
  var neighbors = [
    Coordinate$AdventOfCode.Direction.north,
    Coordinate$AdventOfCode.Direction.south,
    Coordinate$AdventOfCode.Direction.east,
    Coordinate$AdventOfCode.Direction.west,
    Coordinate$AdventOfCode.Direction.northEast,
    Coordinate$AdventOfCode.Direction.northWest,
    Coordinate$AdventOfCode.Direction.southEast,
    Coordinate$AdventOfCode.Direction.southWest
  ];
  return Core__Array.reduce(neighbors, [], (function (acc, dir) {
                var thisNeighbors = dir(c);
                var match = fn(thisNeighbors);
                if (match !== undefined) {
                  acc.push(thisNeighbors);
                  return acc;
                } else {
                  return acc;
                }
              }));
}

function isElemDigit(elemMap, c) {
  return Core__Option.flatMap(Array2D$AdventOfCode.get(elemMap, c), (function (e) {
                if (typeof e !== "object") {
                  return ;
                } else {
                  return c;
                }
              }));
}

function makeElemMap(__x) {
  return Array2D$AdventOfCode.mapU(__x, makeElem);
}

function elemMapFilter(elemMap, fn) {
  return Array2D$AdventOfCode.reduceWithIndex(elemMap, [], (function (acc, e, c) {
                if (fn(e)) {
                  acc.push(c);
                }
                return acc;
              }));
}

function part1(charMap) {
  var elemMap = Array2D$AdventOfCode.mapU(charMap, makeElem);
  var numberCoords = elemMapFilter(elemMap, isDigit);
  console.log("numberCoords");
  console.log(numberCoords);
  var sortedNumberCoords = numberCoords.toSorted(Coordinate$AdventOfCode.Compare.yx);
  console.log("sortedNumberCoords");
  console.log(sortedNumberCoords);
  var uniqueYs = Core__Array.reduce(sortedNumberCoords.map(function (param) {
              return param[1];
            }).toSorted(Core__Int.compare), [], (function (acc, e) {
          var last = acc.at(acc.length - 1 | 0);
          if (last !== undefined && last === e) {
            return acc;
          } else {
            acc.push(e);
            return acc;
          }
        }));
  console.log("uniqueYs");
  console.log(uniqueYs);
  var groupedByY = Core__Array.reduce(uniqueYs, [], (function (acc, y) {
          acc.push(sortedNumberCoords.filter(function (param) {
                    return param[1] === y;
                  }));
          return acc;
        }));
  console.log("groupedByY");
  console.log(groupedByY);
  var groupedByIncX = groupedByY.map(function (__x) {
          return __x.toSorted(Coordinate$AdventOfCode.Compare.xy);
        }).map(function (l) {
        l.push([
              0,
              0
            ]);
        return Core__Array.reduce(l, [
                      [],
                      []
                    ], (function (param, param$1) {
                        var y = param$1[1];
                        var x = param$1[0];
                        var buf = param[1];
                        var parsed = param[0];
                        var last = buf.at(buf.length - 1 | 0);
                        if (last !== undefined && last[0] !== (x - 1 | 0)) {
                          parsed.push(buf);
                          return [
                                  parsed,
                                  [[
                                      x,
                                      y
                                    ]]
                                ];
                        } else {
                          buf.push([
                                x,
                                y
                              ]);
                          return [
                                  parsed,
                                  buf
                                ];
                        }
                      }))[0];
      });
  console.log("groupedByIncX");
  console.log(groupedByIncX);
  groupedByIncX.forEach(log);
  var symCoords = elemMapFilter(elemMap, isSymbol);
  console.log("symCoords");
  console.log(symCoords);
  var partNumCoords = Core__Array.reduce(symCoords, [], (function (acc, c) {
          Caml_splice_call.spliceObjApply(acc, "push", [getNeighborsIf(c, (function (__x) {
                        return isElemDigit(elemMap, __x);
                      }))]);
          return acc;
        }));
  console.log("partNumCoords");
  console.log(partNumCoords);
}

function parse(data) {
  return Utils$AdventOfCode.splitNewline(data).map(function (param) {
              return Utils$AdventOfCode.compose((function (prim) {
                            return prim.trim();
                          }), Utils$AdventOfCode.splitChars, param);
            });
}

function solvePart1(data) {
  var prim = part1(parse(data));
  console.log(prim);
  return 1;
}

function solvePart2(data) {
  return 2;
}

export {
  log ,
  makeElem ,
  isDigit ,
  isSymbol ,
  getNeighborsIf ,
  isElemDigit ,
  makeElemMap ,
  elemMapFilter ,
  part1 ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* No side effect */
