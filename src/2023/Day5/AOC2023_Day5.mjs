// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Core__Array from "@rescript/core/src/Core__Array.mjs";
import * as Core__Option from "@rescript/core/src/Core__Option.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as Interval$AdventOfCode from "../../Interval.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function toString(t) {
  return "Rule(Src:" + Interval$AdventOfCode.toString(t.srcInterval) + ", Dest:" + t.dest.toString() + ", Offset:" + t.offset.toString() + ")";
}

function run(t, srcNum) {
  if (Interval$AdventOfCode.contains(t.srcInterval, srcNum)) {
    return Caml_option.some(srcNum + t.offset);
  }
  
}

function runWithInterval(t, src) {
  var i = Interval$AdventOfCode.intersect(src, t.srcInterval);
  if (i !== undefined) {
    var prim1 = Interval$AdventOfCode.add(i, t.offset);
    console.log("  intersect Some: ", prim1);
    console.log("  src: ", src);
    console.log("  i: ", i);
    return [
            Interval$AdventOfCode.remove(src, i),
            Interval$AdventOfCode.add(i, t.offset)
          ];
  }
  console.log("  intersect None: ");
  return [
          src,
          undefined
        ];
}

var Rule = {
  toString: toString,
  run: run,
  runWithInterval: runWithInterval
};

function toString$1(t) {
  return "AlmanacMap(" + t.srcCategory + ", " + t.destCategory + ", [" + t.rules.map(toString).join(", ") + "])";
}

function runRules(t, srcNum) {
  return Core__Option.getOr(Core__Array.findMap(t.rules, (function (r) {
                    return run(r, srcNum);
                  })), srcNum);
}

function runRulesWithInterval(t, src) {
  var prim = toString$1(t);
  console.log(prim);
  return Core__Array.reduce(t.rules, [
              src,
              []
            ], (function (param, r) {
                var d = param[1];
                var s = param[0];
                if (s === undefined) {
                  return [
                          undefined,
                          d
                        ];
                }
                var match = runWithInterval(r, s);
                var dests = match[1];
                var newDests = dests !== undefined ? [dests].concat(d) : d;
                return [
                        match[0],
                        newDests
                      ];
              }));
}

function runRulesWithMultiIntervals(t, xs) {
  return xs.flatMap(function (x) {
              var match = runRulesWithInterval(t, x);
              var src = match[0];
              var newSrc = src !== undefined ? [src] : [];
              return newSrc.concat(match[1]);
            });
}

var AlmanacMap = {
  toString: toString$1,
  runRules: runRules,
  runRulesWithInterval: runRulesWithInterval,
  runRulesWithMultiIntervals: runRulesWithMultiIntervals
};

function toString$2(t) {
  return "Almanac (Seeds: [" + t.seeds.map(Interval$AdventOfCode.toString).join(", ") + "],\n[" + t.maps.map(toString$1).join("\n") + ")]";
}

function getMap(t, src) {
  return Core__Option.getExn(t.maps.find(function (m) {
                  return m.srcCategory === src;
                }));
}

var Almanac = {
  toString: toString$2,
  getMap: getMap
};

function parse(data) {
  var lines = Utils$AdventOfCode.splitDoubleNewline(data).map(function (l) {
        return Utils$AdventOfCode.splitNewline(l).map(function (prim) {
                    return prim.trim();
                  });
      });
  var seedLine = Core__Option.getExn(Core__Option.flatMap(lines[0], (function (__x) {
              return __x[0];
            })));
  var mapLines = (function (__x) {
        return __x.slice(1);
      })(lines);
  var parseSeed = function (line) {
    return Utils$AdventOfCode.splitSpace(Core__Option.getExn(line.split(": ")[1])).map(function (prim) {
                return BigInt(prim);
              });
  };
  var parseMap = function (lines) {
    var categoryLine = Core__Option.getExn(lines[0]);
    var srcDestLines = lines.slice(1);
    var match = Core__Option.getExn(Core__Option.flatMap(Utils$AdventOfCode.splitSpace(categoryLine)[0], (function (s) {
                return (function (__x) {
                            return __x.split("-to-");
                          })(s);
              })));
    if (match.length !== 2) {
      throw {
            RE_EXN_ID: "Match_failure",
            _1: [
              "AOC2023_Day5.res",
              136,
              8
            ],
            Error: new Error()
          };
    }
    var srcCategory = match[0];
    var destCategory = match[1];
    var parseIntervalLine = function (l) {
      var match = Utils$AdventOfCode.splitSpace(l).map(function (prim) {
            return BigInt(prim);
          });
      if (match.length !== 3) {
        throw {
              RE_EXN_ID: "Match_failure",
              _1: [
                "AOC2023_Day5.res",
                144,
                10
              ],
              Error: new Error()
            };
      }
      var destStart = match[0];
      var srcStart = match[1];
      var len = match[2];
      var one = BigInt(1);
      return {
              srcInterval: Interval$AdventOfCode.make(srcStart, srcStart + len - one),
              dest: destStart,
              offset: destStart - srcStart
            };
    };
    var rules = srcDestLines.map(parseIntervalLine);
    return {
            srcCategory: srcCategory,
            destCategory: destCategory,
            rules: rules
          };
  };
  var makeSeedsInterval = function (seeds) {
    return seeds.map(function (s) {
                return Interval$AdventOfCode.makeWithLength(s, BigInt(1));
              });
  };
  var seeds = makeSeedsInterval(parseSeed(seedLine));
  var maps = mapLines.map(parseMap);
  return {
          seeds: seeds,
          maps: maps
        };
}

function part1(almanac) {
  var locations = almanac.seeds.map(function (param) {
        var endCat = "location";
        var _curCat = "seed";
        var _curNum = param[0];
        while(true) {
          var curNum = _curNum;
          var curCat = _curCat;
          var map = getMap(almanac, curCat);
          var destCategory = map.destCategory;
          var nextNum = runRules(map, curNum);
          if (destCategory === endCat) {
            return nextNum;
          }
          _curNum = nextNum;
          _curCat = destCategory;
          continue ;
        };
      });
  console.log(locations);
  return Utils$AdventOfCode.minBigIntInArray(locations);
}

function part1_Interval(almanac) {
  var locations = almanac.seeds.flatMap(function (param) {
        var endCat = "location";
        var _curCat = "seed";
        var _cur = [Interval$AdventOfCode.makeWithLength(param[0], BigInt(1))];
        while(true) {
          var cur = _cur;
          var curCat = _curCat;
          var map = getMap(almanac, curCat);
          var destCategory = map.destCategory;
          var next = runRulesWithMultiIntervals(map, cur);
          if (destCategory === endCat) {
            return next;
          }
          _cur = next;
          _curCat = destCategory;
          continue ;
        };
      });
  ((function (__x) {
          console.log("locations =", __x);
        })(locations));
  return Utils$AdventOfCode.minBigIntInArray(locations.map(function (param) {
                  return param[0];
                }));
}

function solvePart1(data) {
  var almanac = parse(data);
  var prim = toString$2(almanac);
  console.log(prim);
  var m = getMap(almanac, "seed");
  console.log("runRulesWithInterval");
  ((function (__x) {
          console.log("--> 79", __x);
        })(runRulesWithMultiIntervals(m, [Interval$AdventOfCode.makeWithLength(BigInt(79), BigInt(1))])));
  ((function (__x) {
          console.log("--> 14", __x);
        })(runRulesWithMultiIntervals(m, [Interval$AdventOfCode.makeWithLength(BigInt(14), BigInt(1))])));
  ((function (__x) {
          console.log("--> 55", __x);
        })(runRulesWithMultiIntervals(m, [Interval$AdventOfCode.makeWithLength(BigInt(55), BigInt(1))])));
  ((function (__x) {
          console.log("--> 13", __x);
        })(runRulesWithMultiIntervals(m, [Interval$AdventOfCode.makeWithLength(BigInt(13), BigInt(1))])));
  var p1i = part1_Interval(almanac);
  console.log("part1_Intervals");
  console.log(p1i);
  return BigInt(1);
}

function solvePart2(data) {
  return 2;
}

export {
  log ,
  log2 ,
  Rule ,
  AlmanacMap ,
  Almanac ,
  parse ,
  part1 ,
  part1_Interval ,
  solvePart1 ,
  solvePart2 ,
}
/* No side effect */
