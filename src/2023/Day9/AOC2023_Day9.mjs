// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Stdlib__Int from "@dsiu/rescript-stdlib-fp/src/Stdlib__Int.mjs";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__Option from "@dsiu/rescript-stdlib-fp/src/Stdlib__Option.mjs";
import * as Stdlib__Function from "@dsiu/rescript-stdlib-fp/src/Stdlib__Function.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function differences(xs) {
  return Stdlib__Array.map2(Stdlib__Array.tail(xs), xs, Stdlib__Int.subtract);
}

function expand(seq) {
  return {
          TAG: "Sequence",
          _0: Stdlib__Array.unfoldr(seq, (function (xs) {
                  if (Stdlib__Array.all(xs, (function (x) {
                            return x === 0;
                          }))) {
                    return ;
                  } else {
                    return [
                            xs,
                            differences(xs)
                          ];
                  }
                }))
        };
}

function extendRow(param, row) {
  var n$p = Stdlib__Array.lastUnsafe(row) + param[1] | 0;
  var row$p = row.concat([n$p]);
  return [
          [row$p].concat(param[0]),
          n$p
        ];
}

function extend(seq) {
  return {
          TAG: "Sequence",
          _0: Stdlib__Array.foldRight(seq._0, [
                  [],
                  0
                ], extendRow)[0]
        };
}

function evaluate(seq) {
  return Stdlib__Array.lastUnsafe(Stdlib__Array.headUnsafe(seq._0));
}

function part1(histories) {
  return Stdlib__Array.sum(Stdlib__Array.map(histories, (function (x) {
                    return evaluate(extend(expand(x)));
                  })), {
              zero: Stdlib__Int.zero,
              add: Stdlib__Int.add
            });
}

function part2(histories) {
  return part1(Stdlib__Array.map(histories, (function (prim) {
                    return prim.toReversed();
                  })));
}

function parse(data) {
  return Stdlib__Array.map(Utils$AdventOfCode.splitNewline(data), (function (l) {
                var partial_arg = function (eta) {
                  return Stdlib__Int.fromString(undefined, eta);
                };
                return Stdlib__Array.map(l.trim().split(" "), (function (param) {
                              return Stdlib__Function.compose(partial_arg, Stdlib__Option.getExn, param);
                            }));
              }));
}

function solvePart1(data) {
  return part1(parse(data));
}

function solvePart2(data) {
  return part2(parse(data));
}

export {
  log ,
  log2 ,
  differences ,
  expand ,
  extendRow ,
  extend ,
  evaluate ,
  part1 ,
  part2 ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* Stdlib__Int Not a pure module */
