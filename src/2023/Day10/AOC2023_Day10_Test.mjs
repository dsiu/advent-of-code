// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as AOC2023_Day10 from "./AOC2023_Day10.mjs";
import * as AOC2023_Day10_Data from "./AOC2023_Day10_Data.mjs";
import * as AOC2023_Day10_Data_Sample from "./AOC2023_Day10_Data_Sample.mjs";

Jest.describe("2023 Day10", () => {
  let map = AOC2023_Day10.$$Map.make(AOC2023_Day10.parse(AOC2023_Day10_Data_Sample.data));
  let map1 = AOC2023_Day10.$$Map.make(AOC2023_Day10.parse(AOC2023_Day10_Data_Sample.data1));
  let map2 = AOC2023_Day10.$$Map.make(AOC2023_Day10.parse(AOC2023_Day10_Data_Sample.data2));
  let map3 = AOC2023_Day10.$$Map.make(AOC2023_Day10.parse(AOC2023_Day10_Data_Sample.data3));
  Jest.describe("findPath", () => {
    Jest.test("data and data1 should have same path", () => {
      let pathA = AOC2023_Day10.followPath(map, map.start);
      let pathB = AOC2023_Day10.followPath(map1, map1.start);
      return Jest.Expect.toEqual(Jest.Expect.expect(pathA), pathB);
    });
    Jest.test("data2 and data3 should have same path", () => {
      let pathA = AOC2023_Day10.followPath(map2, map2.start);
      let pathB = AOC2023_Day10.followPath(map3, map3.start);
      return Jest.Expect.toEqual(Jest.Expect.expect(pathA), pathB);
    });
  });
  Jest.test("Part 1 - Sample Data", () => {
    let result = AOC2023_Day10.solvePart1(AOC2023_Day10_Data_Sample.data);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 4);
  });
  Jest.test("Part 1 - Sample Data 1", () => {
    let result = AOC2023_Day10.solvePart1(AOC2023_Day10_Data_Sample.data1);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 4);
  });
  Jest.test("Part 1 - Sample Data 2", () => {
    let result = AOC2023_Day10.solvePart1(AOC2023_Day10_Data_Sample.data1);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 4);
  });
  Jest.test("Part 1 - Sample Data 3", () => {
    let result = AOC2023_Day10.solvePart1(AOC2023_Day10_Data_Sample.data1);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 4);
  });
  Jest.test("Part 1 - Solve", () => {
    let result = AOC2023_Day10.solvePart1(AOC2023_Day10_Data.data);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 7005);
  });
  Jest.test("Part 2 - Sample Data", () => {
    let result = AOC2023_Day10.solvePart2(AOC2023_Day10_Data_Sample.data);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 1);
  });
  Jest.test("Part 2 - Sample Data 4", () => {
    let result = AOC2023_Day10.solvePart2(AOC2023_Day10_Data_Sample.data4);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 4);
  });
  Jest.test("Part 2 - Sample Data 5", () => {
    let result = AOC2023_Day10.solvePart2(AOC2023_Day10_Data_Sample.data5);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 10);
  });
  Jest.test("Part 2 - Solve", () => {
    let result = AOC2023_Day10.solvePart2(AOC2023_Day10_Data.data);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 417);
  });
});

let data = AOC2023_Day10_Data.data;

let sampleData = AOC2023_Day10_Data_Sample.data;

let sampleData1 = AOC2023_Day10_Data_Sample.data1;

let sampleData2 = AOC2023_Day10_Data_Sample.data2;

let sampleData3 = AOC2023_Day10_Data_Sample.data3;

let sampleData4 = AOC2023_Day10_Data_Sample.data4;

let sampleData5 = AOC2023_Day10_Data_Sample.data5;

let solvePart1 = AOC2023_Day10.solvePart1;

let solvePart2 = AOC2023_Day10.solvePart2;

let parse = AOC2023_Day10.parse;

let followPath = AOC2023_Day10.followPath;

let $$Map;

export {
  data,
  sampleData,
  sampleData1,
  sampleData2,
  sampleData3,
  sampleData4,
  sampleData5,
  solvePart1,
  solvePart2,
  parse,
  followPath,
  $$Map,
}
/*  Not a pure module */
