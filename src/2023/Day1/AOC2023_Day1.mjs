// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../../Utils.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Stdlib__Int from "@dsiu/rescript-stdlib-fp/src/Stdlib__Int.mjs";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__String from "@dsiu/rescript-stdlib-fp/src/Stdlib__String.mjs";

function log(prim) {
  console.log(prim);
}

let numberNames = [
  [
    "zero",
    "0"
  ],
  [
    "one",
    "1"
  ],
  [
    "two",
    "2"
  ],
  [
    "three",
    "3"
  ],
  [
    "four",
    "4"
  ],
  [
    "five",
    "5"
  ],
  [
    "six",
    "6"
  ],
  [
    "seven",
    "7"
  ],
  [
    "eight",
    "8"
  ],
  [
    "nine",
    "9"
  ]
];

function spelledOutToDigits(str, matchDir) {
  let tmp;
  tmp = matchDir === "Left2Right" ? str : Stdlib__String.reverse(str);
  return Belt_Array.reduce(Utils.splitChars(tmp), "", (acc, c) => {
    let tmp;
    tmp = matchDir === "Left2Right" ? acc + c : c + acc;
    return Belt_Array.reduce(numberNames, tmp, (curStr, param) => curStr.replace(param[0], param[1]));
  });
}

function get2Digits(str) {
  let digits = Stdlib__Array.filterMap(Utils.splitChars(str), none => Stdlib__Int.fromString(none, 10));
  let first = digits.at(0);
  let last = digits.at(-1);
  return [
    first,
    last
  ];
}

function combineFirstAndLast(param) {
  return Math.imul(param[0], 10) + param[1] | 0;
}

function part2(xs) {
  return Utils.sumIntArray(xs.map(x => {
    let match = get2Digits(spelledOutToDigits(x, "Left2Right"));
    let match$1 = get2Digits(spelledOutToDigits(x, "Right2Left"));
    return combineFirstAndLast([
      match[0],
      match$1[1]
    ]);
  }));
}

function part1(xs) {
  return Utils.sumIntArray(xs.map(Utils.compose(get2Digits, combineFirstAndLast)));
}

function parse(data) {
  return Utils.splitNewline(data).map(prim => prim.trim());
}

function solvePart1(data) {
  return part1(parse(data));
}

function solvePart2(data) {
  return part2(parse(data));
}

export {
  log,
  numberNames,
  spelledOutToDigits,
  get2Digits,
  combineFirstAndLast,
  part2,
  part1,
  parse,
  solvePart1,
  solvePart2,
}
/* Utils Not a pure module */
