// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Core__Int from "@rescript/core/src/Core__Int.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Core__Array from "@rescript/core/src/Core__Array.mjs";
import * as TableclothString from "tablecloth-rescript/src/TableclothString.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

var numberNames = [
  [
    "zero",
    "0"
  ],
  [
    "one",
    "1"
  ],
  [
    "two",
    "2"
  ],
  [
    "three",
    "3"
  ],
  [
    "four",
    "4"
  ],
  [
    "five",
    "5"
  ],
  [
    "six",
    "6"
  ],
  [
    "seven",
    "7"
  ],
  [
    "eight",
    "8"
  ],
  [
    "nine",
    "9"
  ]
];

function spelledOutToDigits(str, matchDir) {
  var tmp;
  tmp = matchDir === "Left2Right" ? str : TableclothString.reverse(str);
  return Belt_Array.reduce(Utils$AdventOfCode.splitChars(tmp), "", (function (acc, c) {
                var tmp;
                tmp = matchDir === "Left2Right" ? acc + c : c + acc;
                return Belt_Array.reduce(numberNames, tmp, (function (curStr, param) {
                              return curStr.replace(param[0], param[1]);
                            }));
              }));
}

function get2Digits(str) {
  var partial_arg = 10;
  var digits = Core__Array.keepSome(Utils$AdventOfCode.splitChars(str).map(function (param) {
            return Core__Int.fromString(partial_arg, param);
          }));
  var first = digits.at(0);
  var last = digits.at(-1);
  return [
          first,
          last
        ];
}

function combineFirstAndLast(param) {
  return Math.imul(param[0], 10) + param[1] | 0;
}

function part2(xs) {
  return Utils$AdventOfCode.sumIntArray(xs.map(function (x) {
                  var match = get2Digits(spelledOutToDigits(x, "Left2Right"));
                  var match$1 = get2Digits(spelledOutToDigits(x, "Right2Left"));
                  return combineFirstAndLast([
                              match[0],
                              match$1[1]
                            ]);
                }));
}

function part1(xs) {
  return Utils$AdventOfCode.sumIntArray(xs.map(function (x) {
                  return combineFirstAndLast(get2Digits(x));
                }));
}

function parse(data) {
  return Utils$AdventOfCode.splitNewline(data).map(function (prim) {
              return prim.trim();
            });
}

function solvePart1(data) {
  return part1(parse(data));
}

function solvePart2(data) {
  return part2(parse(data));
}

var TC;

export {
  TC ,
  log ,
  numberNames ,
  spelledOutToDigits ,
  get2Digits ,
  combineFirstAndLast ,
  part2 ,
  part1 ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* TableclothString Not a pure module */
