// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../../Utils.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Belt_SetString from "rescript/lib/es6/Belt_SetString.js";
import * as TableclothChar from "@dsiu/rescript-stdlib-fp/src/Tablecloth/TableclothChar.mjs";
import * as TableclothArray from "@dsiu/rescript-stdlib-fp/src/Tablecloth/TableclothArray.mjs";

function log(prim) {
  console.log(prim);
}

function parse(data, fn) {
  return Belt_Array.map(Utils.splitNewline(data), s => fn(Utils.splitChars(s.trim())));
}

function stringToChar(s) {
  return Belt_Option.getExn(TableclothChar.fromString(s));
}

function charToPriority(item) {
  let c = Belt_Option.getExn(TableclothChar.fromString(item));
  let lowerA = "a".charCodeAt(0) | 0;
  let upperA = "A".charCodeAt(0) | 0;
  if (TableclothChar.isUppercase(c)) {
    return ((TableclothChar.toCode(c) - upperA | 0) + 1 | 0) + 26 | 0;
  } else {
    return (TableclothChar.toCode(c) - lowerA | 0) + 1 | 0;
  }
}

function commonItem(param) {
  return Belt_Array.getExn(Belt_SetString.toArray(Belt_SetString.intersect(Belt_SetString.fromArray(param._0), Belt_SetString.fromArray(param._1))), 0);
}

function part1(rucksacks) {
  return Utils.sumIntArray(Belt_Array.map(rucksacks, Utils.compose(commonItem, charToPriority)));
}

function merge(param) {
  return Belt_SetString.union(Belt_SetString.fromArray(param._0), Belt_SetString.fromArray(param._1));
}

function badgeOf(rucksacks) {
  return Belt_Array.getExn(Belt_SetString.toArray(Stdlib__Array.foldl1(Belt_Array.map(rucksacks, merge), Belt_SetString.intersect)), 0);
}

function part2(rucksacks) {
  let groups = TableclothArray.chunksOf(rucksacks, 3);
  let badges = groups.map(badgeOf);
  return Utils.sumIntArray(Belt_Array.map(badges, charToPriority));
}

function mkRucksack(xs) {
  let mid = (xs.length >> 1);
  return {
    TAG: "Rucksack",
    _0: Belt_Array.slice(xs, 0, mid),
    _1: Belt_Array.slice(xs, mid, mid)
  };
}

function solvePart1(data) {
  return part1(parse(data, mkRucksack));
}

function solvePart2(data) {
  return part2(parse(data, mkRucksack));
}

let TC;

export {
  TC,
  log,
  parse,
  stringToChar,
  charToPriority,
  commonItem,
  part1,
  merge,
  badgeOf,
  part2,
  mkRucksack,
  solvePart1,
  solvePart2,
}
/* Utils Not a pure module */
