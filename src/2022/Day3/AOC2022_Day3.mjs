// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_string from "rescript/lib/es6/caml_string.js";
import * as Belt_SetString from "rescript/lib/es6/belt_SetString.js";
import * as TableclothChar from "tablecloth-rescript/src/TableclothChar.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function parse(data) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (s) {
                var t = Utils$AdventOfCode.splitChars(s.trim());
                var mid = (t.length >> 1);
                return [
                        Belt_Array.slice(t, 0, mid),
                        Belt_Array.slice(t, mid, mid)
                      ];
              }));
}

function charToPriority(str) {
  var c = Caml_string.get(str, 0);
  if (TableclothChar.isUppercase(c)) {
    return ((TableclothChar.toCode(c) - /* 'A' */65 | 0) + 1 | 0) + 26 | 0;
  } else {
    return (TableclothChar.toCode(c) - /* 'a' */97 | 0) + 1 | 0;
  }
}

function part1(xs) {
  return Utils$AdventOfCode.sumIntArray(Belt_Array.map(Belt_Array.map(xs, (function (param) {
                        return Belt_Array.getExn(Belt_SetString.toArray(Belt_SetString.intersect(Belt_SetString.fromArray(param[0]), Belt_SetString.fromArray(param[1]))), 0);
                      })), charToPriority));
}

function solvePart1(data) {
  var prim = part1(parse(data));
  console.log(prim);
  console.log(0);
  return 1;
}

function solvePart2(data) {
  return 2;
}

var TC;

export {
  TC ,
  log ,
  parse ,
  charToPriority ,
  part1 ,
  solvePart1 ,
  solvePart2 ,
}
/* TableclothChar Not a pure module */
