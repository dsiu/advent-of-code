// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as Stdlib_Array$AdventOfCode from "../../stdlib/Stdlib_Array.mjs";

function log(prim) {
  console.log(prim);
}

function isVisible(param) {
  return param._1;
}

function treeHeight(param) {
  return param._0;
}

function setVisibility(row) {
  var vis = function (param, param$1) {
    var height = param$1._0;
    var tagged = param[1];
    var highest = param[0];
    if (height > highest) {
      return [
              height,
              Stdlib_Array$AdventOfCode.concat([/* Tree */{
                      _0: height,
                      _1: true
                    }], tagged)
            ];
    } else {
      return [
              highest,
              Stdlib_Array$AdventOfCode.concat([/* Tree */{
                      _0: height,
                      _1: param$1._1
                    }], tagged)
            ];
    }
  };
  return Stdlib_Array$AdventOfCode.reverse(Stdlib_Array$AdventOfCode.reduce(row, [
                    -1,
                    []
                  ], vis)[1]);
}

function setVisibilityOrient(__x) {
  return Stdlib_Array$AdventOfCode.map(__x, setVisibility);
}

function setVisibilityForest(forest) {
  var x = Stdlib_Array$AdventOfCode.map(forest, setVisibility);
  var x$1 = Stdlib_Array$AdventOfCode.map(Utils$AdventOfCode.transpose(x), Stdlib_Array$AdventOfCode.reverse);
  var x$2 = Stdlib_Array$AdventOfCode.map(x$1, setVisibility);
  var x$3 = Stdlib_Array$AdventOfCode.map(Utils$AdventOfCode.transpose(x$2), Stdlib_Array$AdventOfCode.reverse);
  var x$4 = Stdlib_Array$AdventOfCode.map(x$3, setVisibility);
  var x$5 = Stdlib_Array$AdventOfCode.map(Utils$AdventOfCode.transpose(x$4), Stdlib_Array$AdventOfCode.reverse);
  var x$6 = Stdlib_Array$AdventOfCode.map(x$5, setVisibility);
  return Stdlib_Array$AdventOfCode.map(Utils$AdventOfCode.transpose(x$6), Stdlib_Array$AdventOfCode.reverse);
}

function countVisible(forest) {
  return Stdlib_Array$AdventOfCode.keep(Stdlib_Array$AdventOfCode.concatMany(forest), isVisible).length;
}

function part1(param) {
  return Utils$AdventOfCode.compose(setVisibilityForest, countVisible, param);
}

function parse(data) {
  return Stdlib_Array$AdventOfCode.map(Utils$AdventOfCode.splitNewline(data), (function (x) {
                return Stdlib_Array$AdventOfCode.map(Utils$AdventOfCode.splitChars(x.trim()), (function (x) {
                              return /* Tree */{
                                      _0: Caml_format.int_of_string(x),
                                      _1: false
                                    };
                            }));
              }));
}

function solvePart1(data) {
  return Utils$AdventOfCode.compose(setVisibilityForest, countVisible, parse(data));
}

function solvePart2(data) {
  return 2;
}

var A;

export {
  log ,
  A ,
  isVisible ,
  treeHeight ,
  setVisibility ,
  setVisibilityOrient ,
  setVisibilityForest ,
  countVisible ,
  part1 ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* No side effect */
