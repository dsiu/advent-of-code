// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as Stdlib_Array from "@dsiu/rescript-stdlib-fp/src/Stdlib_Array.mjs";
import * as Stdlib_Function from "@dsiu/rescript-stdlib-fp/src/Stdlib_Function.mjs";
import * as Caml_splice_call from "rescript/lib/es6/caml_splice_call.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function isVisible(param) {
  return param._1;
}

function treeHeight(param) {
  return param._0;
}

function setVisibility(row) {
  var vis = function (param, param$1) {
    var height = param$1._0;
    var tagged = param[1];
    var highest = param[0];
    if (height > highest) {
      return [
              height,
              [{
                    TAG: "Tree",
                    _0: height,
                    _1: true
                  }].concat(tagged)
            ];
    } else {
      return [
              highest,
              [{
                    TAG: "Tree",
                    _0: height,
                    _1: param$1._1
                  }].concat(tagged)
            ];
    }
  };
  return Stdlib_Array.reduce(row, [
                  -1,
                  []
                ], vis)[1].toReversed();
}

function setVisibilityOrient(__x) {
  return Stdlib_Array.map(__x, setVisibility);
}

function setVisibilityForest(forest) {
  var rotate = function (x) {
    return Stdlib_Array.map(Utils$AdventOfCode.transpose(x), (function (prim) {
                  return prim.toReversed();
                }));
  };
  return Utils$AdventOfCode.compose(setVisibilityOrient, rotate, Utils$AdventOfCode.compose(setVisibilityOrient, rotate, Utils$AdventOfCode.compose(setVisibilityOrient, rotate, Utils$AdventOfCode.compose(setVisibilityOrient, rotate, forest))));
}

function countVisible(forest) {
  return Stdlib_Array.length(Stdlib_Array.filter(Caml_splice_call.spliceObjApply([], "concat", [forest]), isVisible));
}

function part1(param) {
  return Utils$AdventOfCode.compose(setVisibilityForest, countVisible, param);
}

function tracks(forest, row, col) {
  var match = Stdlib_Array.splitAt(Stdlib_Array.getUnsafe(forest, row), col);
  var match$1 = Stdlib_Array.splitAt(Stdlib_Array.getUnsafe(Utils$AdventOfCode.transpose(forest), col), row);
  return [
          match[0].toReversed(),
          Stdlib_Array.drop(match[1], 1),
          match$1[0].toReversed(),
          Stdlib_Array.drop(match$1[1], 1)
        ];
}

function takeWhile1(xs, f) {
  if (xs.length === 0) {
    return [];
  }
  var h = Stdlib_Array.headUnsafe(xs);
  var t = Stdlib_Array.tail(xs);
  var match = Curry._1(f, h);
  if (match) {
    return [h].concat(takeWhile1(t, f));
  } else {
    return [h];
  }
}

function viewDistance(trees, h) {
  return Stdlib_Array.length(takeWhile1(Stdlib_Array.map(trees, treeHeight), (function (x) {
                    return x < h;
                  })));
}

function scenicScore(forest, row, col) {
  var directions = tracks(forest, row, col);
  var h = treeHeight(Stdlib_Array.getUnsafe(Stdlib_Array.getUnsafe(forest, row), col));
  return Stdlib_Array.reduce(Stdlib_Array.map(directions, (function (__x) {
                    return viewDistance(__x, h);
                  })), 1, (function (a, x) {
                return Math.imul(a, x);
              }));
}

function part2(forest) {
  var nrows = Stdlib_Array.length(forest);
  var ncols = Stdlib_Array.length(Stdlib_Array.headUnsafe(forest));
  return Utils$AdventOfCode.maxIntInArray(Stdlib_Array.combination2(Stdlib_Array.makeBy(nrows - 1 | 0, Stdlib_Function.identity), Stdlib_Array.makeBy(ncols - 1 | 0, Stdlib_Function.identity), (function (r, c) {
                    return scenicScore(forest, r, c);
                  })));
}

function parse(data) {
  return Stdlib_Array.map(Utils$AdventOfCode.splitNewline(data), (function (x) {
                return Stdlib_Array.map(Utils$AdventOfCode.splitChars(x.trim()), (function (x) {
                              return {
                                      TAG: "Tree",
                                      _0: Caml_format.int_of_string(x),
                                      _1: false
                                    };
                            }));
              }));
}

function solvePart1(data) {
  return Utils$AdventOfCode.compose(setVisibilityForest, countVisible, parse(data));
}

function solvePart2(data) {
  return part2(parse(data));
}

var A;

var O;

export {
  log ,
  A ,
  O ,
  isVisible ,
  treeHeight ,
  setVisibility ,
  setVisibilityOrient ,
  setVisibilityForest ,
  countVisible ,
  part1 ,
  tracks ,
  takeWhile1 ,
  viewDistance ,
  scenicScore ,
  part2 ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* Stdlib_Array Not a pure module */
