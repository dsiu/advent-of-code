// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../../Utils.res.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Primitive_exceptions from "rescript/lib/es6/Primitive_exceptions.js";

function log(prim) {
  console.log(prim);
}

let InvalidShape = /* @__PURE__ */Primitive_exceptions.create("AOC2022_Day2.InvalidShape");

function makeP1Shape(s) {
  switch (s) {
    case "A" :
      return "Rock";
    case "B" :
      return "Paper";
    case "C" :
      return "Scissors";
    default:
      throw {
        RE_EXN_ID: InvalidShape,
        _1: s,
        Error: new Error()
      };
  }
}

function makeP2Shape(s) {
  switch (s) {
    case "X" :
      return "Rock";
    case "Y" :
      return "Paper";
    case "Z" :
      return "Scissors";
    default:
      throw {
        RE_EXN_ID: InvalidShape,
        _1: s,
        Error: new Error()
      };
  }
}

function player2Result(round) {
  switch (round._0) {
    case "Rock" :
      switch (round._1) {
        case "Rock" :
          return "Draw";
        case "Paper" :
          return "Win";
        case "Scissors" :
          return "Loss";
      }
    case "Paper" :
      switch (round._1) {
        case "Rock" :
          return "Loss";
        case "Paper" :
          return "Draw";
        case "Scissors" :
          return "Win";
      }
    case "Scissors" :
      switch (round._1) {
        case "Rock" :
          return "Win";
        case "Paper" :
          return "Loss";
        case "Scissors" :
          return "Draw";
      }
  }
}

function scoreShape(s) {
  switch (s) {
    case "Rock" :
      return 1;
    case "Paper" :
      return 2;
    case "Scissors" :
      return 3;
  }
}

function scoreResult(r) {
  switch (r) {
    case "Loss" :
      return 0;
    case "Draw" :
      return 3;
    case "Win" :
      return 6;
  }
}

let InvalidResult = /* @__PURE__ */Primitive_exceptions.create("AOC2022_Day2.InvalidResult");

function makeResult(s) {
  switch (s) {
    case "X" :
      return "Loss";
    case "Y" :
      return "Draw";
    case "Z" :
      return "Win";
    default:
      throw {
        RE_EXN_ID: InvalidResult,
        _1: s,
        Error: new Error()
      };
  }
}

function scoreRound(r) {
  return scoreResult(player2Result(r)) + scoreShape(r._1) | 0;
}

function roundFromResult(param) {
  let result = param._1;
  let shape = param._0;
  let p2s = Belt_Array.getExn(Belt_Array.keep([
    "Rock",
    "Paper",
    "Scissors"
  ], p2Shape => player2Result({
    TAG: "Round",
    _0: shape,
    _1: p2Shape
  }) === result), 0);
  return {
    TAG: "Round",
    _0: shape,
    _1: p2s
  };
}

function makeRound(s) {
  let match = s.trim().split(" ");
  if (match.length !== 2) {
    throw {
      RE_EXN_ID: "Match_failure",
      _1: [
        "AOC2022_Day2.res",
        88,
        6
      ],
      Error: new Error()
    };
  }
  let p1 = match[0];
  let p2 = match[1];
  return {
    TAG: "Round",
    _0: makeP1Shape(p1),
    _1: makeP2Shape(p2)
  };
}

function makeShapeResult(s) {
  let match = s.trim().split(" ");
  if (match.length !== 2) {
    throw {
      RE_EXN_ID: "Match_failure",
      _1: [
        "AOC2022_Day2.res",
        95,
        6
      ],
      Error: new Error()
    };
  }
  let p1 = match[0];
  let r = match[1];
  return {
    TAG: "ShapeResult",
    _0: makeP1Shape(p1),
    _1: makeResult(r)
  };
}

function parse(data, f) {
  return Belt_Array.map(Utils.splitNewline(data), f);
}

function part1(rounds) {
  return Utils.sumIntArray(Belt_Array.map(rounds, scoreRound));
}

function part2(rounds) {
  return Utils.sumIntArray(Belt_Array.map(rounds, Utils.compose(roundFromResult, scoreRound)));
}

function solvePart1(data) {
  let rounds = Belt_Array.map(Utils.splitNewline(data), makeRound);
  return Utils.sumIntArray(Belt_Array.map(rounds, scoreRound));
}

function solvePart2(data) {
  return part2(Belt_Array.map(Utils.splitNewline(data), makeShapeResult));
}

export {
  log,
  InvalidShape,
  makeP1Shape,
  makeP2Shape,
  player2Result,
  scoreShape,
  scoreResult,
  InvalidResult,
  makeResult,
  scoreRound,
  roundFromResult,
  makeRound,
  makeShapeResult,
  parse,
  part1,
  part2,
  solvePart1,
  solvePart2,
}
/* Utils Not a pure module */
