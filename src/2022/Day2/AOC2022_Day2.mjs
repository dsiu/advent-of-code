// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

var InvalidShape = /* @__PURE__ */Caml_exceptions.create("AOC2022_Day2-AdventOfCode.InvalidShape");

function makeP1Shape(s) {
  switch (s) {
    case "A" :
        return /* Rock */0;
    case "B" :
        return /* Paper */1;
    case "C" :
        return /* Scissors */2;
    default:
      throw {
            RE_EXN_ID: InvalidShape,
            _1: s,
            Error: new Error()
          };
  }
}

function makeP2Shape(s) {
  switch (s) {
    case "X" :
        return /* Rock */0;
    case "Y" :
        return /* Paper */1;
    case "Z" :
        return /* Scissors */2;
    default:
      throw {
            RE_EXN_ID: InvalidShape,
            _1: s,
            Error: new Error()
          };
  }
}

function player2Result(round) {
  switch (round._0) {
    case /* Rock */0 :
        switch (round._1) {
          case /* Rock */0 :
              return /* Draw */1;
          case /* Paper */1 :
              return /* Win */2;
          case /* Scissors */2 :
              return /* Loss */0;
          
        }
    case /* Paper */1 :
        switch (round._1) {
          case /* Rock */0 :
              return /* Loss */0;
          case /* Paper */1 :
              return /* Draw */1;
          case /* Scissors */2 :
              return /* Win */2;
          
        }
    case /* Scissors */2 :
        switch (round._1) {
          case /* Rock */0 :
              return /* Win */2;
          case /* Paper */1 :
              return /* Loss */0;
          case /* Scissors */2 :
              return /* Draw */1;
          
        }
    
  }
}

function scoreShape(s) {
  return s + 1 | 0;
}

function scoreResult(r) {
  switch (r) {
    case /* Loss */0 :
        return 0;
    case /* Draw */1 :
        return 3;
    case /* Win */2 :
        return 6;
    
  }
}

function scoreRound(r) {
  return scoreResult(player2Result(r)) + (r._1 + 1 | 0) | 0;
}

function makeRound(s) {
  var match = s.trim().split(" ");
  if (match.length !== 2) {
    throw {
          RE_EXN_ID: "Match_failure",
          _1: [
            "AOC2022_Day2.res",
            68,
            6
          ],
          Error: new Error()
        };
  }
  var p1 = match[0];
  var p2 = match[1];
  return /* Round */{
          _0: makeP1Shape(p1),
          _1: makeP2Shape(p2)
        };
}

function parse(data, f) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), f);
}

function part1(rounds) {
  return Utils$AdventOfCode.sumIntArray(Belt_Array.map(rounds, scoreRound));
}

function solvePart1(data) {
  var rounds = Belt_Array.map(Utils$AdventOfCode.splitNewline(data), makeRound);
  return Utils$AdventOfCode.sumIntArray(Belt_Array.map(rounds, scoreRound));
}

function solvePart2(data) {
  return 2;
}

export {
  log ,
  InvalidShape ,
  makeP1Shape ,
  makeP2Shape ,
  player2Result ,
  scoreShape ,
  scoreResult ,
  scoreRound ,
  makeRound ,
  parse ,
  part1 ,
  solvePart1 ,
  solvePart2 ,
}
/* No side effect */
