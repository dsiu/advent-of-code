// Generated by ReScript, PLEASE EDIT WITH CARE

import * as JsArray2Ex from "js-array2-ex/src/JsArray2Ex.mjs";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function applyOp(op) {
  if (typeof op !== "object") {
    return [0];
  } else {
    return [
            0,
            op._0
          ];
  }
}

function apply(ops) {
  var len = (ops.length << 1);
  return Stdlib__Array.zip(Stdlib__Array.makeBy(len, (function (x) {
                    return x + 1 | 0;
                  })), Stdlib__Array.scanl(ops.flatMap(applyOp), 1, (function (prim0, prim1) {
                    return prim0 + prim1 | 0;
                  })));
}

function extractSignals(signals) {
  return signals.filter(function (param) {
              return (param[0] + 20 | 0) % 40 === 0;
            });
}

function calculateSixSignals(signals) {
  return Utils$AdventOfCode.sumIntArray(Stdlib__Array.filterMap(signals, (function (param) {
                    var t = param[0];
                    if (t <= 220) {
                      return Math.imul(t, param[1]);
                    }
                    
                  })));
}

function part1(param) {
  return Utils$AdventOfCode.compose(extractSignals, calculateSixSignals, param);
}

function showPixel(b) {
  if (b) {
    return "â–ˆ";
  } else {
    return " ";
  }
}

function columnOf(n) {
  return (n - 1 | 0) % 40;
}

function isLit(param) {
  var c = columnOf(param[0]);
  return Pervasives.abs(param[1] - c | 0) <= 1;
}

function part2(regVals) {
  var pixels = regVals.map(function (param) {
        return Utils$AdventOfCode.compose(isLit, showPixel, param);
      });
  return JsArray2Ex.chunkBySize(pixels, 40).map(function (x) {
              return x.join("");
            });
}

function parse(data) {
  return Utils$AdventOfCode.splitNewline(data).map(function (x) {
              var l = x.trim();
              if (l.startsWith("noop")) {
                return "Noop";
              }
              var match = l.split(" ");
              if (match.length !== 2) {
                throw {
                      RE_EXN_ID: "Match_failure",
                      _1: [
                        "AOC2022_Day10.res",
                        63,
                        14
                      ],
                      Error: new Error()
                    };
              }
              var v = match[1];
              return {
                      TAG: "Addx",
                      _0: Caml_format.int_of_string(v)
                    };
            });
}

function solvePart1(data) {
  return Utils$AdventOfCode.compose(extractSignals, calculateSixSignals, apply(parse(data)));
}

function solvePart2(data) {
  var prim = part2(apply(parse(data)));
  console.log(prim);
  return "EFGERURE";
}

var A;

export {
  log ,
  A ,
  applyOp ,
  apply ,
  extractSignals ,
  calculateSixSignals ,
  part1 ,
  showPixel ,
  columnOf ,
  isLit ,
  part2 ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* Stdlib__Array Not a pure module */
