// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Pervasives from "rescript/lib/es6/Pervasives.js";
import * as Stdlib__Int from "@dsiu/rescript-stdlib-fp/src/Stdlib__Int.mjs";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__Option from "@dsiu/rescript-stdlib-fp/src/Stdlib__Option.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function applyOp(op) {
  if (typeof op !== "object") {
    return [0];
  } else {
    return [
      0,
      op._0
    ];
  }
}

function apply(ops) {
  let len = (ops.length << 1);
  return Stdlib__Array.zip(Stdlib__Array.makeBy(len, x => x + 1 | 0), Stdlib__Array.scanl(ops.flatMap(applyOp), 1, (prim0, prim1) => prim0 + prim1 | 0));
}

function extractSignals(signals) {
  return signals.filter(param => (param[0] + 20 | 0) % 40 === 0);
}

function calculateSixSignals(signals) {
  return Utils$AdventOfCode.sumIntArray(Stdlib__Array.filterMap(signals, param => {
    let t = param[0];
    if (t <= 220) {
      return Math.imul(t, param[1]);
    }
    
  }));
}

let part1 = Utils$AdventOfCode.compose(extractSignals, calculateSixSignals);

function showPixel(b) {
  if (b) {
    return "â–ˆ";
  } else {
    return " ";
  }
}

function columnOf(n) {
  return (n - 1 | 0) % 40;
}

function isLit(param) {
  let c = columnOf(param[0]);
  return Pervasives.abs(param[1] - c | 0) <= 1;
}

function part2(regVals) {
  let pixels = regVals.map(Utils$AdventOfCode.compose(isLit, showPixel));
  return Stdlib__Array.chunksOf(pixels, 40).map(x => x.join(""));
}

function parse(data) {
  return Utils$AdventOfCode.splitNewline(data).map(x => {
    let l = x.trim();
    if (l.startsWith("noop")) {
      return "Noop";
    }
    let match = l.split(" ");
    if (match.length !== 2) {
      throw {
        RE_EXN_ID: "Match_failure",
        _1: [
          "AOC2022_Day10.res",
          63,
          14
        ],
        Error: new Error()
      };
    }
    let v = match[1];
    return {
      TAG: "Addx",
      _0: Stdlib__Option.getExn(Stdlib__Int.fromString(v, undefined), undefined)
    };
  });
}

function solvePart1(data) {
  return part1(apply(parse(data)));
}

function solvePart2(data) {
  let prim = part2(apply(parse(data)));
  console.log(prim);
  return "EFGERURE";
}

let A;

export {
  log,
  A,
  applyOp,
  apply,
  extractSignals,
  calculateSixSignals,
  part1,
  showPixel,
  columnOf,
  isLit,
  part2,
  parse,
  solvePart1,
  solvePart2,
}
/* part1 Not a pure module */
