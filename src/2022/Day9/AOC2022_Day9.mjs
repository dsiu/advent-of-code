// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml from "rescript/lib/es6/caml.js";
import * as Pervasives from "rescript/lib/es6/pervasives.js";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as TableclothSet from "tablecloth-rescript/src/TableclothSet.mjs";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as Coord_V2$AdventOfCode from "../../Coord_V2.mjs";
import * as Stdlib_Array$AdventOfCode from "../../stdlib/Stdlib_Array.mjs";

function log(prim) {
  console.log(prim);
}

var emptyPositionSet = TableclothSet.empty({
      comparator: Coord_V2$AdventOfCode.comparator
    });

function newRope(n) {
  return /* Rope */{
          headK: [
            0,
            0
          ],
          knots: Stdlib_Array$AdventOfCode.make(n, [
                0,
                0
              ]),
          trace: TableclothSet.add(emptyPositionSet, [
                0,
                0
              ])
        };
}

var ParseError = /* @__PURE__ */Caml_exceptions.create("AOC2022_Day9-AdventOfCode.ParseError");

function expandPath(directions) {
  var expandStep = function (step) {
    switch (step.TAG | 0) {
      case /* U */0 :
          return Stdlib_Array$AdventOfCode.make(step._0, [
                      0,
                      1
                    ]);
      case /* R */1 :
          return Stdlib_Array$AdventOfCode.make(step._0, [
                      1,
                      0
                    ]);
      case /* D */2 :
          return Stdlib_Array$AdventOfCode.make(step._0, [
                      0,
                      -1
                    ]);
      case /* L */3 :
          return Stdlib_Array$AdventOfCode.make(step._0, [
                      -1,
                      0
                    ]);
      
    }
  };
  return Stdlib_Array$AdventOfCode.flatMap(directions, expandStep);
}

function manhattan(p1, p2) {
  return Caml.int_max(Pervasives.abs(p1[0] - p2[0] | 0), Pervasives.abs(p1[1] - p2[1] | 0));
}

function touching(p1, p2) {
  return manhattan(p1, p2) <= 1;
}

function sign(n) {
  return Caml.int_compare(n, 0);
}

function towards(p1, p2) {
  return [
          Caml.int_compare(p2[0] - p1[0] | 0, 0),
          Caml.int_compare(p2[1] - p1[1] | 0, 0)
        ];
}

function parse(data) {
  return Stdlib_Array$AdventOfCode.map(Utils$AdventOfCode.splitNewline(data), (function (x) {
                var match = x.trim().split(" ");
                if (match.length !== 2) {
                  throw {
                        RE_EXN_ID: "Match_failure",
                        _1: [
                          "AOC2022_Day9.res",
                          62,
                          8
                        ],
                        Error: new Error()
                      };
                }
                var dStr = match[0];
                var steps = match[1];
                var match$1 = Caml_format.int_of_string(steps);
                switch (dStr) {
                  case "D" :
                      return {
                              TAG: /* D */2,
                              _0: match$1
                            };
                  case "L" :
                      return {
                              TAG: /* L */3,
                              _0: match$1
                            };
                  case "R" :
                      return {
                              TAG: /* R */1,
                              _0: match$1
                            };
                  case "U" :
                      return {
                              TAG: /* U */0,
                              _0: match$1
                            };
                  default:
                    throw {
                          RE_EXN_ID: ParseError,
                          _1: dStr + steps,
                          Error: new Error()
                        };
                }
              }));
}

function solvePart1(data) {
  var prim = parse(data);
  console.log(prim);
  return 1;
}

function solvePart2(data) {
  return 2;
}

var A;

var TC;

var Position;

export {
  log ,
  A ,
  TC ,
  Position ,
  emptyPositionSet ,
  newRope ,
  ParseError ,
  expandPath ,
  manhattan ,
  touching ,
  sign ,
  towards ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* emptyPositionSet Not a pure module */
