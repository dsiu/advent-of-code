// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Res_parser from "@resinfo/parser/src/res_parser.mjs";
import * as Caml_format from "rescript/lib/es6/caml_format.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as Stdlib_Array$AdventOfCode from "../../stdlib/Stdlib_Array.mjs";
import * as ResParser_Utils$AdventOfCode from "../../ResParser_Utils.mjs";

function log(prim) {
  console.log(prim);
}

function parsedObjectToString(obj) {
  if (typeof obj === "number") {
    return "LS";
  }
  switch (obj.TAG | 0) {
    case /* CD */0 :
        return "CD " + obj._0;
    case /* PDirectory */1 :
        return "PDirectory " + obj._0;
    case /* PFile */2 :
        return "PFile " + String(obj._0) + " " + obj._1;
    
  }
}

var cmdCD = Res_parser.map(Res_parser.andThen(Res_parser.string("$ cd "), ResParser_Utils$AdventOfCode.string), (function (param) {
        return {
                TAG: /* CD */0,
                _0: param[1]
              };
      }));

var cmdLS = Res_parser.map(Res_parser.string("$ ls"), (function (param) {
        return /* LS */0;
      }));

var outputDir = Res_parser.map(Res_parser.andThen(Res_parser.string("dir "), ResParser_Utils$AdventOfCode.string), (function (param) {
        return {
                TAG: /* PDirectory */1,
                _0: param[1]
              };
      }));

var outputFile = Res_parser.map(Res_parser.andThen(Res_parser.andThen(ResParser_Utils$AdventOfCode.digits, ResParser_Utils$AdventOfCode.manyWhitespace), ResParser_Utils$AdventOfCode.string), (function (param) {
        return {
                TAG: /* PFile */2,
                _0: Caml_format.int_of_string(param[0][0]),
                _1: param[1]
              };
      }));

var parser = Res_parser.choice([
      cmdCD,
      cmdLS,
      outputDir,
      outputFile
    ]);

var result = Res_parser.run(parser, "$ cd /");

function run(__x) {
  return Res_parser.run(parser, __x);
}

var CmdParser = {
  cmdCD: cmdCD,
  cmdLS: cmdLS,
  outputDir: outputDir,
  outputFile: outputFile,
  parser: parser,
  result: result,
  run: run
};

function parse(data) {
  return Stdlib_Array$AdventOfCode.map(Utils$AdventOfCode.splitNewline(data), (function (prim) {
                return prim.trim();
              }));
}

function solvePart1(data) {
  var prim = Stdlib_Array$AdventOfCode.keepMap(Stdlib_Array$AdventOfCode.map(parse(data), run), (function (result) {
          if (result.TAG === /* Ok */0) {
            return parsedObjectToString(result._0[0]);
          }
          
        }));
  console.log(prim);
  return 1;
}

function solvePart2(data) {
  return 2;
}

var A;

export {
  log ,
  A ,
  parsedObjectToString ,
  CmdParser ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* cmdCD Not a pure module */
