// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_MapInt from "rescript/lib/es6/belt_MapInt.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as Stdlib_Array$AdventOfCode from "../../stdlib/Stdlib_Array.mjs";
import * as Stdlib_Option$AdventOfCode from "../../stdlib/Stdlib_Option.mjs";
import * as Stdlib_Function$AdventOfCode from "../../stdlib/Stdlib_Function.mjs";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function extractName(c) {
  return c._0;
}

function getCratesForWharf(crates, wharf) {
  var idx = ((wharf - 1 | 0) << 2) + 1 | 0;
  return Stdlib_Array$AdventOfCode.map(crates, (function (x) {
                return Stdlib_Option$AdventOfCode.flatMap(Stdlib_Array$AdventOfCode.get(x, idx), (function (x) {
                              if (x === " ") {
                                return ;
                              } else {
                                return x;
                              }
                            }));
              }));
}

function catMaybes(xs) {
  return Stdlib_Array$AdventOfCode.keepMap(xs, Stdlib_Function$AdventOfCode.identity);
}

function makeWharf(wharfLines, colNames) {
  return Stdlib_Array$AdventOfCode.reduce(colNames, undefined, (function (acc, colName) {
                var xs = getCratesForWharf(wharfLines, colName);
                return Belt_MapInt.set(acc, colName, Stdlib_Array$AdventOfCode.keepMap(xs, Stdlib_Function$AdventOfCode.identity));
              }));
}

function makeMoves(xs) {
  return Stdlib_Array$AdventOfCode.map(xs, (function (x) {
                var parts = x.split(" ");
                return /* Move */{
                        _0: Stdlib_Option$AdventOfCode.getExn(Stdlib_Option$AdventOfCode.flatMap(Stdlib_Array$AdventOfCode.get(parts, 1), Belt_Int.fromString)),
                        _1: Stdlib_Option$AdventOfCode.getExn(Stdlib_Option$AdventOfCode.flatMap(Stdlib_Array$AdventOfCode.get(parts, 3), Belt_Int.fromString)),
                        _2: Stdlib_Option$AdventOfCode.getExn(Stdlib_Option$AdventOfCode.flatMap(Stdlib_Array$AdventOfCode.get(parts, 5), Belt_Int.fromString))
                      };
              }));
}

function parse(data) {
  var text = Stdlib_Array$AdventOfCode.map(Utils$AdventOfCode.splitDoubleNewline(data), Utils$AdventOfCode.splitNewline);
  var wharfLines = Stdlib_Array$AdventOfCode.map(Stdlib_Option$AdventOfCode.getExn(Stdlib_Array$AdventOfCode.init(Stdlib_Array$AdventOfCode.tail(Stdlib_Array$AdventOfCode.getExn(text, 0)))), Utils$AdventOfCode.splitChars);
  var colNames = Stdlib_Array$AdventOfCode.keepMap(Stdlib_Array$AdventOfCode.last(Stdlib_Array$AdventOfCode.tail(Stdlib_Array$AdventOfCode.getExn(text, 0))).split(" "), Belt_Int.fromString);
  var moves = makeMoves(Stdlib_Option$AdventOfCode.getExn(Stdlib_Array$AdventOfCode.init(Stdlib_Array$AdventOfCode.getExn(text, 1))));
  var wharf = makeWharf(wharfLines, colNames);
  return [
          wharf,
          moves
        ];
}

function solvePart1(data) {
  var prim = parse(data);
  console.log(prim);
  return 1;
}

function solvePart2(data) {
  return 2;
}

var M;

export {
  log ,
  log2 ,
  M ,
  extractName ,
  getCratesForWharf ,
  catMaybes ,
  makeWharf ,
  makeMoves ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* No side effect */
