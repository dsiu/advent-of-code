// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Int from "rescript/lib/es6/belt_Int.js";
import * as Belt_MapInt from "rescript/lib/es6/belt_MapInt.js";
import * as Stdlib__Array from "@dsiu/rescript-stdlib-fp/src/Stdlib__Array.mjs";
import * as Stdlib__Option from "@dsiu/rescript-stdlib-fp/src/Stdlib__Option.mjs";
import * as Stdlib__Function from "@dsiu/rescript-stdlib-fp/src/Stdlib__Function.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function log(prim) {
  console.log(prim);
}

function extractName(c) {
  return c._0;
}

function getCratesForWharf(crates, wharf) {
  var idx = ((wharf - 1 | 0) << 2) + 1 | 0;
  return Stdlib__Array.map(crates, (function (x) {
                return Stdlib__Option.flatMap(x[idx], (function (x) {
                              if (x === " ") {
                                return ;
                              } else {
                                return {
                                        TAG: "Crate",
                                        _0: x
                                      };
                              }
                            }));
              }));
}

function catMaybes(__x) {
  return Stdlib__Array.filterMap(__x, Stdlib__Function.identity);
}

function makeWharf(wharfLines, colNames) {
  return Stdlib__Array.reduce(colNames, undefined, (function (acc, colName) {
                var __x = getCratesForWharf(wharfLines, colName);
                return Belt_MapInt.set(acc, colName, Stdlib__Array.filterMap(__x, Stdlib__Function.identity));
              }));
}

function makeMoves(xs) {
  return Stdlib__Array.map(xs, (function (x) {
                var parts = x.split(" ");
                return {
                        TAG: "Move",
                        _0: Stdlib__Option.getExn(Stdlib__Option.flatMap(parts[1], Belt_Int.fromString)),
                        _1: Stdlib__Option.getExn(Stdlib__Option.flatMap(parts[3], Belt_Int.fromString)),
                        _2: Stdlib__Option.getExn(Stdlib__Option.flatMap(parts[5], Belt_Int.fromString))
                      };
              }));
}

function parse(data) {
  var text = Stdlib__Array.map(Utils$AdventOfCode.splitDoubleNewline(data), Utils$AdventOfCode.splitNewline);
  var firstSection = Stdlib__Array.tail(Stdlib__Array.getUnsafe(text, 0));
  var secondSection = Stdlib__Array.init(Stdlib__Array.getUnsafe(text, 1));
  var wharfLines = Stdlib__Array.map(Stdlib__Option.getExn(Stdlib__Array.init(firstSection)), Utils$AdventOfCode.splitChars);
  var colNames = Stdlib__Array.filterMap(Stdlib__Option.getExn(Stdlib__Array.last(firstSection)).split(" "), Belt_Int.fromString);
  var moves = makeMoves(Stdlib__Option.getExn(secondSection));
  var wharf = makeWharf(wharfLines, colNames);
  return [
          wharf,
          moves
        ];
}

function makeMove1(wharf, param) {
  var to_ = param._2;
  var from = param._1;
  var f = Belt_MapInt.getExn(wharf, from);
  var c = Stdlib__Array.headUnsafe(f);
  var origin = Stdlib__Array.tail(f);
  var dest = Stdlib__Array.append([c], Belt_MapInt.getExn(wharf, to_));
  return Belt_MapInt.set(Belt_MapInt.set(wharf, to_, dest), from, origin);
}

function applyMove1(wharf, m) {
  return Stdlib__Array.reduce(Stdlib__Array.makeBy(m._0, (function (param) {
                    return m;
                  })), wharf, makeMove1);
}

function applyMoves1(wharf, moves) {
  return Stdlib__Array.reduce(moves, wharf, applyMove1);
}

function applyMove2(wharf, param) {
  var to_ = param._2;
  var from = param._1;
  var n = param._0;
  var origin = Belt_MapInt.getExn(wharf, from);
  var moving = Stdlib__Array.take(origin, n);
  var origin$p = Stdlib__Array.drop(origin, n);
  var dest = Stdlib__Array.append(moving, Belt_MapInt.getExn(wharf, to_));
  return Belt_MapInt.set(Belt_MapInt.set(wharf, to_, dest), from, origin$p);
}

function applyMoves2(wharf, moves) {
  return Stdlib__Array.reduce(moves, wharf, applyMove2);
}

function showTops(wharf) {
  return Stdlib__Array.foldl1(Stdlib__Array.map(Belt_MapInt.valuesToArray(wharf), (function (param) {
                    return Utils$AdventOfCode.compose(Stdlib__Array.headUnsafe, extractName, param);
                  })), (function (prim0, prim1) {
                return prim0.concat(prim1);
              }));
}

function solvePart1(data) {
  var match = parse(data);
  return showTops(Stdlib__Array.reduce(match[1], match[0], applyMove1));
}

function solvePart2(data) {
  var match = parse(data);
  return showTops(Stdlib__Array.reduce(match[1], match[0], applyMove2));
}

var A;

var S;

var O;

var M;

export {
  A ,
  S ,
  O ,
  M ,
  log2 ,
  log ,
  extractName ,
  getCratesForWharf ,
  catMaybes ,
  makeWharf ,
  makeMoves ,
  parse ,
  makeMove1 ,
  applyMove1 ,
  applyMoves1 ,
  applyMove2 ,
  applyMoves2 ,
  showTops ,
  solvePart1 ,
  solvePart2 ,
}
/* Stdlib__Array Not a pure module */
