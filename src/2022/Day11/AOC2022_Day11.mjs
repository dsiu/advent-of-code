// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Relude_Int from "relude/src/Relude_Int.mjs";
import * as Relude_Map from "relude/src/Relude_Map.mjs";
import * as Relude_Array from "relude/src/Relude_Array.mjs";
import * as Relude_Option from "relude/src/Relude_Option.mjs";
import * as Relude_String from "relude/src/Relude_String.mjs";
import * as Relude_Function from "relude/src/Relude_Function.mjs";

function log(prim) {
  console.log(prim);
}

var include = Relude_Map.WithOrd(Relude_Int.Ord);

var IntMap = include;

function parseEachMonkey(s) {
  var __x = Relude_String.splitArray("\n", s);
  var s$1 = Curry._2(Relude_Array.map, Relude_String.trim, __x);
  var parseMId = function (s) {
    return Relude_Option.bind(s, (function (x) {
                  return Relude_Option.bind(Relude_Array.at(1, Relude_String.splitArray(" ", x)), (function (x) {
                                return Relude_Option.bind(Relude_Array.at(0, Relude_String.splitArray(":", x)), Relude_String.toInt);
                              }));
                }));
  };
  var parseStarting = function (s) {
    return Relude_Option.bind(s, (function (x) {
                  return Relude_Option.bind(Relude_Array.at(1, Relude_String.splitArray("Starting items: ", x)), (function (x) {
                                var __x = Relude_String.splitArray(",", x);
                                return Relude_Option.pure(Curry._2(Relude_Array.map, (function (x) {
                                                  return Relude_String.toInt(Relude_String.trim(x));
                                                }), __x));
                              }));
                }));
  };
  var mId = parseMId(Relude_Array.at(0, s$1));
  var holding = parseStarting(Relude_Array.at(1, s$1));
  return [
          mId,
          holding
        ];
}

function parse(data) {
  var __x = Relude_String.splitArray("\n\n", data);
  return Curry._2(Relude_Array.map, (function (param) {
                return Relude_Function.compose(parseEachMonkey, Relude_String.trim, param);
              }), __x);
}

function solvePart1(data) {
  var prim = parse(data);
  console.log(prim);
  return 1;
}

function solvePart2(data) {
  return 2;
}

var compose = Relude_Function.compose;

var S;

var A;

var O;

export {
  log ,
  compose ,
  S ,
  A ,
  O ,
  IntMap ,
  parseEachMonkey ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* include Not a pure module */
