// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Jest2$AdventOfCode from "../../../interop/Jest2.mjs";
import * as AOC2022_Day6$AdventOfCode from "./AOC2022_Day6.mjs";
import * as AOC2022_Day6_Data$AdventOfCode from "./AOC2022_Day6_Data.mjs";
import * as AOC2022_Day6_Data_Sample$AdventOfCode from "./AOC2022_Day6_Data_Sample.mjs";

Jest.describe("2022 Day6", (function (param) {
        var part1SampleData = [
          [
            AOC2022_Day6$AdventOfCode.solvePart1(AOC2022_Day6_Data_Sample$AdventOfCode.data),
            7
          ],
          [
            AOC2022_Day6$AdventOfCode.solvePart1(AOC2022_Day6_Data_Sample$AdventOfCode.data1),
            5
          ],
          [
            AOC2022_Day6$AdventOfCode.solvePart1(AOC2022_Day6_Data_Sample$AdventOfCode.data2),
            6
          ],
          [
            AOC2022_Day6$AdventOfCode.solvePart1(AOC2022_Day6_Data_Sample$AdventOfCode.data3),
            10
          ],
          [
            AOC2022_Day6$AdventOfCode.solvePart1(AOC2022_Day6_Data_Sample$AdventOfCode.data4),
            11
          ]
        ];
        Jest2$AdventOfCode.testEach2("Part 1 - Sample Data", part1SampleData, (function (result, expected) {
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("Part 1 - Solve", (function (param) {
                var result = AOC2022_Day6$AdventOfCode.solvePart1(AOC2022_Day6_Data$AdventOfCode.data);
                return Jest.Expect.toEqual(Jest.Expect.expect(result), 1140);
              }));
        var part2SampleData = [
          [
            AOC2022_Day6$AdventOfCode.solvePart2(AOC2022_Day6_Data_Sample$AdventOfCode.data),
            19
          ],
          [
            AOC2022_Day6$AdventOfCode.solvePart2(AOC2022_Day6_Data_Sample$AdventOfCode.data1),
            23
          ],
          [
            AOC2022_Day6$AdventOfCode.solvePart2(AOC2022_Day6_Data_Sample$AdventOfCode.data2),
            23
          ],
          [
            AOC2022_Day6$AdventOfCode.solvePart2(AOC2022_Day6_Data_Sample$AdventOfCode.data3),
            29
          ],
          [
            AOC2022_Day6$AdventOfCode.solvePart2(AOC2022_Day6_Data_Sample$AdventOfCode.data4),
            26
          ]
        ];
        Jest2$AdventOfCode.testEach2("Part 2 - Sample Data", part2SampleData, (function (result, expected) {
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("Part 2 - Solve", (function (param) {
                var result = AOC2022_Day6$AdventOfCode.solvePart2(AOC2022_Day6_Data$AdventOfCode.data);
                return Jest.Expect.toEqual(Jest.Expect.expect(result), 3495);
              }));
      }));

var data = AOC2022_Day6_Data$AdventOfCode.data;

var sampleData = AOC2022_Day6_Data_Sample$AdventOfCode.data;

var sampleData1 = AOC2022_Day6_Data_Sample$AdventOfCode.data1;

var sampleData2 = AOC2022_Day6_Data_Sample$AdventOfCode.data2;

var sampleData3 = AOC2022_Day6_Data_Sample$AdventOfCode.data3;

var sampleData4 = AOC2022_Day6_Data_Sample$AdventOfCode.data4;

var solvePart1 = AOC2022_Day6$AdventOfCode.solvePart1;

var solvePart2 = AOC2022_Day6$AdventOfCode.solvePart2;

export {
  data ,
  sampleData ,
  sampleData1 ,
  sampleData2 ,
  sampleData3 ,
  sampleData4 ,
  solvePart1 ,
  solvePart2 ,
}
/*  Not a pure module */
