// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Caml_obj from "rescript/lib/es6/caml_obj.js";

function push(queue, priority, element, cmp) {
  if (typeof queue !== "object") {
    return {
            TAG: "Node",
            _0: priority,
            _1: element,
            _2: "Empty",
            _3: "Empty"
          };
  }
  var right = queue._3;
  var left = queue._2;
  var e = queue._1;
  var p = queue._0;
  if (cmp(priority, p)) {
    return {
            TAG: "Node",
            _0: priority,
            _1: element,
            _2: push(right, p, e, cmp),
            _3: left
          };
  } else {
    return {
            TAG: "Node",
            _0: p,
            _1: e,
            _2: push(right, priority, element, cmp),
            _3: left
          };
  }
}

function remove_top(queue, cmp) {
  if (typeof queue !== "object") {
    throw {
          RE_EXN_ID: "Not_found",
          Error: new Error()
        };
  }
  var left = queue._2;
  var tmp = queue._3;
  if (typeof tmp !== "object") {
    return left;
  }
  if (typeof left !== "object") {
    return queue._3;
  }
  var right = queue._3;
  var rPriority = right._0;
  var lPriority = left._0;
  if (cmp(lPriority, rPriority)) {
    return {
            TAG: "Node",
            _0: lPriority,
            _1: left._1,
            _2: remove_top(left, cmp),
            _3: right
          };
  } else {
    return {
            TAG: "Node",
            _0: rPriority,
            _1: right._1,
            _2: left,
            _3: remove_top(right, cmp)
          };
  }
}

function pop(queue, cmp) {
  if (typeof queue === "object") {
    return [
            queue._0,
            queue._1,
            remove_top(queue, cmp)
          ];
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

var Impl = {
  empty: "Empty",
  push: push,
  remove_top: remove_top,
  pop: pop
};

var cmp = Caml_obj.lessequal;

function push$1(queue, priority, element) {
  return push(queue, priority, element, cmp);
}

function remove_top$1(queue) {
  return remove_top(queue, cmp);
}

function pop$1(queue) {
  return pop(queue, cmp);
}

var MinPriorityQueue = {
  cmp: cmp,
  empty: "Empty",
  push: push$1,
  remove_top: remove_top$1,
  pop: pop$1
};

var cmp$1 = Caml_obj.greaterequal;

function push$2(queue, priority, element) {
  return push(queue, priority, element, cmp$1);
}

function remove_top$2(queue) {
  return remove_top(queue, cmp$1);
}

function pop$2(queue) {
  return pop(queue, cmp$1);
}

var MaxPriorityQueue = {
  cmp: cmp$1,
  empty: "Empty",
  push: push$2,
  remove_top: remove_top$2,
  pop: pop$2
};

export {
  Impl ,
  MinPriorityQueue ,
  MaxPriorityQueue ,
}
/* No side effect */
