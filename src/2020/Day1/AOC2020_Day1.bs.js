// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");

function solvePart1(data) {
  var entries = Belt_Array.map(data.split("\n"), (function (s) {
          return Belt_Option.getExn(Belt_Int.fromString(s.trim()));
        }));
  return Belt_Array.reduce(entries, [], (function (a, x) {
                var candidates = Belt_Array.keep(entries, (function (y) {
                        return (y + x | 0) === 2020;
                      }));
                var y = Belt_Array.get(candidates, 0);
                if (y !== undefined) {
                  return Belt_Array.concat(a, [Math.imul(y, x)]);
                } else {
                  return a;
                }
              }));
}

function solvePart2(data) {
  var entries = Belt_Array.map(data.split("\n"), (function (s) {
          return Belt_Option.getExn(Belt_Int.fromString(s.trim()));
        }));
  return Belt_Array.reduce(entries, [], (function (ax, x) {
                var yy = Belt_Array.reduce(entries, [], (function (ay, y) {
                        var candidates = Belt_Array.keep(entries, (function (z) {
                                return ((z + y | 0) + x | 0) === 2020;
                              }));
                        var z = Belt_Array.get(candidates, 0);
                        if (z !== undefined) {
                          return Belt_Array.concat(ay, [Math.imul(Math.imul(x, y), z)]);
                        } else {
                          return ay;
                        }
                      }));
                var r = Belt_Array.get(yy, 0);
                if (r !== undefined) {
                  return Belt_Array.concat(ax, [r]);
                } else {
                  return ax;
                }
              }));
}

exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
