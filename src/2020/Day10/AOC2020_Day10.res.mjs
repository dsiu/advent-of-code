// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../../Utils.res.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Belt_SortArrayInt from "rescript/lib/es6/Belt_SortArrayInt.js";
import * as Belt_MutableMapInt from "rescript/lib/es6/Belt_MutableMapInt.js";

function log(prim) {
  console.log(prim);
}

function log2(prim0, prim1) {
  console.log(prim0, prim1);
}

function diffs(xs, ys) {
  return Belt_Array.mapWithIndex(xs, (i, x) => Belt_Array.getExn(ys, i) - x | 0);
}

function tally(xs) {
  let max = Utils.maxIntInArray(xs);
  let min = Utils.minIntInArray(xs);
  let keyRange = Belt_Array.range(min, max);
  let result = Belt_MutableMapInt.make();
  Belt_Array.forEach(keyRange, k => {
    let match = Belt_Array.partition(xs, x => x === k);
    let n = match[0].length;
    if (n > 0) {
      return Belt_MutableMapInt.set(result, k, n);
    }
    
  });
  return result;
}

function groupOnes(xs) {
  let helper = (_arr, _res) => {
    while (true) {
      let res = _res;
      let arr = _arr;
      let threeIdx = Belt_Array.getIndexBy(arr, x => x === 3);
      if (threeIdx === undefined) {
        return res;
      }
      let res$1 = Belt_Array.concat(res, [threeIdx]);
      if ((threeIdx + 1 | 0) > arr.length) {
        return res$1;
      }
      _res = res$1;
      _arr = Belt_Array.sliceToEnd(arr, threeIdx + 1 | 0);
      continue;
    };
  };
  return Belt_Array.keep(helper(xs, []), x => x > 0);
}

function convertToMultiplier(xs) {
  return Belt_Array.map(xs, x => {
    switch (x) {
      case 2 :
        return 2;
      case 3 :
        return 4;
      case 4 :
        return 7;
      case 5 :
        return 11;
      default:
        return x;
    }
  });
}

function parse(data) {
  return Belt_Array.map(Utils.splitNewline(data), Utils.intFromStringExn);
}

function solvePart1(data) {
  let adapters = Belt_SortArrayInt.stableSort(parse(data));
  let a = Belt_Array.concat([0], adapters);
  let b = Belt_Array.concat(adapters, [Utils.maxIntInArray(adapters) + 3 | 0]);
  let diffs$1 = diffs(a, b);
  let tally$1 = tally(diffs$1);
  return Math.imul(Belt_MutableMapInt.getExn(tally$1, 1), Belt_MutableMapInt.getExn(tally$1, 3));
}

function solvePart2(data) {
  let adapters = Belt_SortArrayInt.stableSort(parse(data));
  let a = Belt_Array.concat([0], adapters);
  let b = Belt_Array.concat(adapters, [Utils.maxIntInArray(adapters) + 3 | 0]);
  let diffs$1 = diffs(a, b);
  let ones = groupOnes(diffs$1);
  let multiplers = convertToMultiplier(ones);
  return Belt_Array.reduce(multiplers, 1.0, (acc, x) => x * acc);
}

export {
  log,
  log2,
  diffs,
  tally,
  groupOnes,
  convertToMultiplier,
  parse,
  solvePart1,
  solvePart2,
}
/* Utils Not a pure module */
