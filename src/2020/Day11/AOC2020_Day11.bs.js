// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");
var Array2D$AdventOfCode = require("../../Array2D.bs.js");

function log(prim) {
  console.log(prim);
  
}

var InvalidStatus = /* @__PURE__ */Caml_exceptions.create("AOC2020_Day11-AdventOfCode.SeatMap.InvalidStatus");

function make(c) {
  switch (c) {
    case "#" :
        return "#";
    case "." :
        return ".";
    case "L" :
        return "L";
    default:
      throw {
            RE_EXN_ID: InvalidStatus,
            _1: c,
            Error: new Error()
          };
  }
}

var SeatStatus = {
  make: make
};

function isValidCoord(param, len_x, len_y) {
  var y = param[1];
  var x = param[0];
  if (x >= 0 && x <= (len_x - 1 | 0) && y >= 0) {
    return y <= (len_y - 1 | 0);
  } else {
    return false;
  }
}

function adjCoords(param) {
  var y = param[1];
  var x = param[0];
  return [
          [
            x - 1 | 0,
            y - 1 | 0
          ],
          [
            x,
            y - 1 | 0
          ],
          [
            x + 1 | 0,
            y - 1 | 0
          ],
          [
            x - 1 | 0,
            y
          ],
          [
            x + 1 | 0,
            y
          ],
          [
            x - 1 | 0,
            y + 1 | 0
          ],
          [
            x,
            y + 1 | 0
          ],
          [
            x + 1 | 0,
            y + 1 | 0
          ]
        ];
}

function getAdjacents(t, param) {
  var len_x = Array2D$AdventOfCode.lengthX(t);
  var len_y = Array2D$AdventOfCode.lengthY(t);
  return Belt_Array.map(Belt_Array.keep(adjCoords([
                      param[0],
                      param[1]
                    ]), (function (__x) {
                    return isValidCoord(__x, len_x, len_y);
                  })), (function (param) {
                return Array2D$AdventOfCode.get(t, param);
              }));
}

function isSeatEq(s, to_be) {
  if (Belt_Option.isSome(s)) {
    return Belt_Option.getExn(s) === to_be;
  } else {
    return false;
  }
}

function countSeat(xs, seatStatus) {
  return Belt_Array.keep(xs, (function (__x) {
                return isSeatEq(__x, seatStatus);
              })).length;
}

function countEmptySeat(__x) {
  return countSeat(__x, "L");
}

function countFloor(__x) {
  return countSeat(__x, ".");
}

function countOccupiedSeat(__x) {
  return countSeat(__x, "#");
}

function transform(s, adjacents) {
  var occupied_seats = countSeat(adjacents, "#");
  if (s === ".") {
    return ".";
  } else if (s === "L") {
    if (occupied_seats === 0) {
      return "#";
    } else {
      return "L";
    }
  } else if (occupied_seats >= 4) {
    return "L";
  } else {
    return "#";
  }
}

function iterate(t) {
  return Array2D$AdventOfCode.mapWithIndex(t, (function (param, s) {
                return transform(s, getAdjacents(t, [
                                param[0],
                                param[1]
                              ]));
              }));
}

function make$1(xs) {
  var x = Belt_Array.getExn(xs, 0).length;
  var y = xs.length;
  var ret = Array2D$AdventOfCode.make([
        x,
        y
      ], ".");
  Belt_Array.forEachWithIndex(xs, (function (y, ys) {
          return Belt_Array.forEachWithIndex(Utils$AdventOfCode.splitChars(ys), (function (x, c) {
                        Array2D$AdventOfCode.set(ret, [
                              x,
                              y
                            ], make(c));
                        
                      }));
        }));
  return ret;
}

function dump(t) {
  for(var y = 0 ,y_finish = Array2D$AdventOfCode.lengthY(t); y < y_finish; ++y){
    var prim = Utils$AdventOfCode.join(Belt_Option.getExn(Array2D$AdventOfCode.getYEquals(t, y)));
    console.log(prim);
  }
  
}

var SeatMap = {
  InvalidStatus: InvalidStatus,
  SeatStatus: SeatStatus,
  isValidCoord: isValidCoord,
  adjCoords: adjCoords,
  getAdjacents: getAdjacents,
  isSeatEq: isSeatEq,
  countSeat: countSeat,
  countEmptySeat: countEmptySeat,
  countFloor: countFloor,
  countOccupiedSeat: countOccupiedSeat,
  transform: transform,
  iterate: iterate,
  make: make$1,
  dump: dump
};

function parse(data) {
  return make$1(Belt_Array.map(data.split("\n"), (function (prim) {
                    return prim.trim();
                  })));
}

function solvePart1(data) {
  var seats = parse(data);
  console.log("seats");
  dump(seats);
  var iter_1 = iterate(seats);
  console.log("iter_1");
  dump(iter_1);
  var iter_2 = iterate(iter_1);
  console.log("iter_2");
  dump(iter_2);
  var iter_3 = iterate(iter_2);
  console.log("iter_3");
  dump(iter_3);
  var iter_4 = iterate(iter_3);
  console.log("iter_4");
  dump(iter_4);
  var iter_5 = iterate(iter_4);
  console.log("iter_5");
  dump(iter_5);
  return 1;
}

function solvePart2(data) {
  return 2;
}

exports.log = log;
exports.SeatMap = SeatMap;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
