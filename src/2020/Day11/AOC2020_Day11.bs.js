// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");
var Array2D$AdventOfCode = require("../../Array2D.bs.js");

function log(prim) {
  console.log(prim);
  
}

var InvalidStatus = /* @__PURE__ */Caml_exceptions.create("AOC2020_Day11-AdventOfCode.SeatMap.InvalidStatus");

function make(c) {
  switch (c) {
    case "#" :
        return "#";
    case "." :
        return ".";
    case "L" :
        return "L";
    default:
      throw {
            RE_EXN_ID: InvalidStatus,
            _1: c,
            Error: new Error()
          };
  }
}

var SeatStatus = {
  make: make
};

function getSurrendings(t, param) {
  return [
          -1,
          0,
          1
        ];
}

function make$1(xs) {
  var x = Belt_Array.getExn(xs, 0).length;
  var y = xs.length;
  var ret = Array2D$AdventOfCode.make([
        x,
        y
      ], ".");
  Belt_Array.forEachWithIndex(xs, (function (y, ys) {
          return Belt_Array.forEachWithIndex(Utils$AdventOfCode.splitChars(ys), (function (x, c) {
                        Array2D$AdventOfCode.set(ret, [
                              x,
                              y
                            ], make(c));
                        
                      }));
        }));
  return ret;
}

function dump(t) {
  for(var y = 0 ,y_finish = Array2D$AdventOfCode.lengthY(t); y < y_finish; ++y){
    Utils$AdventOfCode.log(Utils$AdventOfCode.join(Belt_Option.getExn(Array2D$AdventOfCode.getYEquals(t, y))));
  }
  
}

var SeatMap = {
  InvalidStatus: InvalidStatus,
  SeatStatus: SeatStatus,
  getSurrendings: getSurrendings,
  make: make$1,
  dump: dump
};

function parse(data) {
  return make$1(Belt_Array.map(data.split("\n"), (function (prim) {
                    return prim.trim();
                  })));
}

function solvePart1(data) {
  dump(parse(data));
  return 1;
}

function solvePart2(data) {
  return 2;
}

exports.log = log;
exports.SeatMap = SeatMap;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
