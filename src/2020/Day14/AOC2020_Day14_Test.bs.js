// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/rescript-jest/src/jest.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var Caml_format = require("rescript/lib/js/caml_format.js");
var AOC2020_Day14$AdventOfCode = require("./AOC2020_Day14.bs.js");
var AOC2020_Day14_Data$AdventOfCode = require("./AOC2020_Day14_Data.bs.js");
var AOC2020_Day14_Data_Sample$AdventOfCode = require("./AOC2020_Day14_Data_Sample.bs.js");

Jest.describe("2020 Day14", (function (param) {
        Jest.test("Part 1 - Sample Data", (function (param) {
                var result = AOC2020_Day14$AdventOfCode.solvePart1(AOC2020_Day14_Data_Sample$AdventOfCode.data);
                var expected = Caml_format.caml_int64_of_string("165");
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("Part 1 - Solve", (function (param) {
                var result = AOC2020_Day14$AdventOfCode.solvePart1(AOC2020_Day14_Data$AdventOfCode.data);
                var expected = Caml_format.caml_int64_of_string("17765746710228");
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("Part 2 - Mem Address Decoder 1 ", (function (param) {
                var mask = Curry._1(AOC2020_Day14$AdventOfCode.Program.Mask.make, "000000000000000000000000000000X1001X");
                var address = Caml_format.caml_int64_of_string("0u42");
                var result = AOC2020_Day14$AdventOfCode.Program.decodeAddress(mask, address);
                var expected = [
                  "26",
                  "58",
                  "27",
                  "59"
                ];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("Part 2 - Mem Address Decoder 2 ", (function (param) {
                var mask = Curry._1(AOC2020_Day14$AdventOfCode.Program.Mask.make, "00000000000000000000000000000000X0XX");
                var address = Caml_format.caml_int64_of_string("0u26");
                var result = AOC2020_Day14$AdventOfCode.Program.decodeAddress(mask, address);
                var expected = [
                  "16",
                  "24",
                  "18",
                  "26",
                  "17",
                  "25",
                  "19",
                  "27"
                ];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        return Jest.test("Part 2 - Solve", (function (param) {
                      var result = AOC2020_Day14$AdventOfCode.solvePart2(AOC2020_Day14_Data$AdventOfCode.data);
                      var expected = Caml_format.caml_int64_of_string("4401465949086");
                      return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
                    }));
      }));

var data = AOC2020_Day14_Data$AdventOfCode.data;

var sampleData = AOC2020_Day14_Data_Sample$AdventOfCode.data;

exports.data = data;
exports.sampleData = sampleData;
/*  Not a pure module */
