// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Caml_int32 = require("rescript/lib/js/caml_int32.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");

function log(prim) {
  console.log(prim);
  
}

function findEarliestBus(param) {
  var time_stamp = param[0];
  return Belt_Array.reduce(Belt_Array.map(param[1], (function (x) {
                    return [
                            x,
                            x - Caml_int32.mod_(time_stamp, x) | 0
                          ];
                  })), [
              0,
              10000
            ], (function (param, param$1) {
                var min = param$1[1];
                var amin = param[1];
                if (min < amin) {
                  return [
                          param$1[0],
                          min
                        ];
                } else {
                  return [
                          param[0],
                          amin
                        ];
                }
              }));
}

function parse(data) {
  var lines = Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (x) {
          return x.trim();
        }));
  var timeStamp = Belt_Option.getExn(Belt_Int.fromString(Belt_Option.getExn(Belt_Array.get(lines, 0))));
  var isNotX = function (c) {
    return c !== "x";
  };
  var bus_numbers = Belt_Array.map(Belt_Array.keep(Belt_Option.getExn(Belt_Array.get(lines, 1)).split(","), isNotX), (function (x) {
          return Belt_Option.getExn(Belt_Int.fromString(x));
        }));
  return [
          timeStamp,
          bus_numbers
        ];
}

function solvePart2(xs) {
  var _time = 1;
  while(true) {
    var time = _time;
    if (Belt_Array.reduce(xs, true, (function(time){
          return function (acc, param) {
            if (acc) {
              return Caml_int32.mod_(time, param[0] + param[1] | 0) === 0;
            } else {
              return false;
            }
          }
          }(time)))) {
      return time;
    }
    _time = time + 1 | 0;
    continue ;
  };
}

function parse2(data) {
  var lines = Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (x) {
          return x.trim();
        }));
  var bus_list = Belt_Array.reduceWithIndex(Belt_Option.getExn(Belt_Array.get(lines, 1)).split(","), [], (function (acc, x, i) {
          if (x !== "x") {
            return Belt_Array.concat(acc, [[
                          Belt_Option.getExn(Belt_Int.fromString(x)),
                          i
                        ]]);
          } else {
            return acc;
          }
        }));
  console.log(bus_list);
  return bus_list;
}

function solvePart1(data) {
  var match = findEarliestBus(parse(data));
  return Math.imul(match[0], match[1]);
}

function solvePart2$1(data) {
  console.log("----");
  var prim = solvePart2(parse2(data));
  console.log(prim);
  console.log("----");
  return 2;
}

exports.log = log;
exports.findEarliestBus = findEarliestBus;
exports.parse = parse;
exports.parse2 = parse2;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2$1;
/* No side effect */
