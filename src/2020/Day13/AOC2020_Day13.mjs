// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Utils from "../../Utils.mjs";
import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";
import * as Primitive_int from "rescript/lib/es6/Primitive_int.js";
import * as ChineseRemainder from "../../ChineseRemainder.mjs";
import * as Primitive_bigint from "rescript/lib/es6/Primitive_bigint.js";

function log(prim) {
  console.log(prim);
}

function findEarliestBus(param) {
  let time_stamp = param[0];
  return Belt_Array.reduce(Belt_Array.map(param[1], x => [
    x,
    x - Primitive_int.mod_(time_stamp, x) | 0
  ]), [
    0,
    10000
  ], (param, param$1) => {
    let min = param$1[1];
    let amin = param[1];
    if (min < amin) {
      return [
        param$1[0],
        min
      ];
    } else {
      return [
        param[0],
        amin
      ];
    }
  });
}

function parse(data) {
  let lines = Belt_Array.map(Utils.splitNewline(data), x => x.trim());
  let timeStamp = Utils.intFromStringExn(Belt_Option.getExn(Belt_Array.get(lines, 0)));
  let isNotX = c => c !== "x";
  let bus_numbers = Belt_Array.map(Belt_Array.keep(Belt_Option.getExn(Belt_Array.get(lines, 1)).split(","), isNotX), Utils.intFromStringExn);
  return [
    timeStamp,
    bus_numbers
  ];
}

function solvePart2BruteForce(xs) {
  let big_zero = BigInt(0);
  let big_one = BigInt(1);
  let _time = BigInt("100000000000000");
  while (true) {
    let time = _time;
    if (Belt_Array.reduce(xs, true, (acc, param) => {
        if (acc) {
          return Primitive_bigint.mod_(time + param[1], param[0]) === big_zero;
        } else {
          return false;
        }
      })) {
      return time;
    }
    _time = time + big_one;
    continue;
  };
}

function part2(xs) {
  let rem = {
    contents: []
  };
  let num = {
    contents: []
  };
  Belt_Array.forEach(xs, param => {
    let bus = param[0];
    rem.contents = Belt_Array.concat(rem.contents, [bus - param[1]]);
    num.contents = Belt_Array.concat(num.contents, [bus]);
  });
  return ChineseRemainder.crtBigInt(rem.contents, num.contents);
}

function parse2(data) {
  let lines = Belt_Array.map(Utils.splitNewline(data), x => x.trim());
  return Belt_Array.reduceWithIndex(Belt_Option.getExn(Belt_Array.get(lines, 1)).split(","), [], (acc, x, i) => {
    if (x !== "x") {
      return Belt_Array.concat(acc, [[
          BigInt(x),
          BigInt(i)
        ]]);
    } else {
      return acc;
    }
  });
}

function solvePart1(data) {
  let match = findEarliestBus(parse(data));
  return Math.imul(match[0], match[1]);
}

function solvePart2(data) {
  return part2(parse2(data));
}

export {
  log,
  findEarliestBus,
  parse,
  solvePart2BruteForce,
  part2,
  parse2,
  solvePart1,
  solvePart2,
}
/* Utils Not a pure module */
