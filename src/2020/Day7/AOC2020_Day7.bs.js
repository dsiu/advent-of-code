// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");

function log(prim) {
  console.log(prim);
  
}

var nodeRe = /(.*)\s+bags/i;

function parseNode(s) {
  var x = nodeRe.exec(s);
  if (x !== null) {
    return Belt_Option.getExn(Belt_Array.get(x, 0));
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

var leafRe = /(.*)\s+bags/i;

function parseLeaf(s) {
  var x = leafRe.exec(s);
  if (x !== null) {
    return Belt_Option.getExn(Belt_Array.get(x, 0));
  }
  throw {
        RE_EXN_ID: "Not_found",
        Error: new Error()
      };
}

function addRule(l) {
  var node = parseNode(Belt_Option.getExn(Belt_Array.get(l, 0)));
  var leaf = parseLeaf(Belt_Option.getExn(Belt_Array.get(l, 1)));
  Utils$AdventOfCode.log(node);
  Utils$AdventOfCode.log(leaf);
  return [
          node,
          leaf
        ];
}

var Rules = {
  nodeRe: nodeRe,
  parseNode: parseNode,
  leafRe: leafRe,
  parseLeaf: parseLeaf,
  addRule: addRule
};

function parseLine(l) {
  return addRule(Belt_Array.map(l.trim().split("contain", 2), (function (prim) {
                    return prim.trim();
                  })));
}

function parse(data) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), parseLine);
}

function solvePart1(data) {
  Utils$AdventOfCode.log(Belt_Array.map(Utils$AdventOfCode.splitNewline(data), parseLine));
  return 1;
}

function solvePart2(data) {
  return 2;
}

exports.log = log;
exports.Rules = Rules;
exports.parseLine = parseLine;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
