// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");

function codes(t) {
  return t.codes;
}

function runLength(t) {
  return t.runLength;
}

function isSumOf(xs, x) {
  return true;
}

function isCodeValid(t, i) {
  var lastSet = Belt_Array.slice(t.codes, i - t.runLength | 0, t.runLength);
  var code = Belt_Array.getExn(t.codes, i);
  Utils$AdventOfCode.log(code);
  Utils$AdventOfCode.log(lastSet);
  return true;
}

function make(codes, runLength) {
  return {
          codes: codes,
          runLength: runLength
        };
}

var Xmax = {
  codes: codes,
  runLength: runLength,
  isSumOf: isSumOf,
  isCodeValid: isCodeValid,
  make: make
};

function parse(data) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (x) {
                return Belt_Option.getExn(Belt_Int.fromString(x.trim()));
              }));
}

function solvePart1(data) {
  var xmax_codes = parse(data);
  var xmax = {
    codes: xmax_codes,
    runLength: 5
  };
  Utils$AdventOfCode.log(xmax);
  return isCodeValid(xmax, 5);
}

function solvePart2(data) {
  return 2;
}

var log = Utils$AdventOfCode.log;

exports.log = log;
exports.Xmax = Xmax;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
