// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Int = require("rescript/lib/js/belt_Int.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Caml_exceptions = require("rescript/lib/js/caml_exceptions.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");

function log(prim) {
  console.log(prim);
  
}

var make = {
  coord: {
    x: 0,
    y: 0
  },
  facing: "E"
};

var InvalidStatus = /* @__PURE__ */Caml_exceptions.create("AOC2020_Day12-AdventOfCode.Ship.Instruction.InvalidStatus");

function execute(ship, s, n) {
  switch (s) {
    case "E" :
    case "N" :
    case "S" :
    case "W" :
        break;
    default:
      throw {
            RE_EXN_ID: InvalidStatus,
            _1: s,
            Error: new Error()
          };
  }
  var init = ship.coord;
  return {
          coord: {
            x: init.x,
            y: ship.coord.y - n | 0
          },
          facing: ship.facing
        };
}

var Direction = {
  execute: execute
};

function execute$1(ship, s, n) {
  switch (s) {
    case "L" :
    case "R" :
        return ship;
    default:
      throw {
            RE_EXN_ID: InvalidStatus,
            _1: s,
            Error: new Error()
          };
  }
}

var Rotation = {
  execute: execute$1
};

function execute$2(ship, s, n) {
  if (s === "F") {
    return ship;
  }
  throw {
        RE_EXN_ID: InvalidStatus,
        _1: s,
        Error: new Error()
      };
}

var Move = {
  execute: execute$2
};

function make$1(s, n) {
  switch (s) {
    case "F" :
        return {
                TAG: /* Move */2,
                _0: s,
                _1: n
              };
    case "L" :
    case "R" :
        return {
                TAG: /* Rotation */1,
                _0: s,
                _1: n
              };
    case "E" :
    case "N" :
    case "S" :
    case "W" :
        return {
                TAG: /* Direction */0,
                _0: s,
                _1: n
              };
    default:
      throw {
            RE_EXN_ID: InvalidStatus,
            _1: s,
            Error: new Error()
          };
  }
}

var Instruction = {
  InvalidStatus: InvalidStatus,
  Direction: Direction,
  Rotation: Rotation,
  Move: Move,
  make: make$1
};

function execute$3(ship, ops) {
  return Belt_Array.reduce(ops, ship, (function (acc, op) {
                switch (op.TAG | 0) {
                  case /* Direction */0 :
                      return execute(ship, op._0, op._1);
                  case /* Rotation */1 :
                      return execute$1(ship, op._0, op._1);
                  case /* Move */2 :
                      return execute$2(ship, op._0, op._1);
                  
                }
              }));
}

var Ship = {
  make: make,
  Instruction: Instruction,
  execute: execute$3
};

function parse(data) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (x) {
                var s = x.trim();
                var code = s.charAt(0);
                var n = Belt_Option.getExn(Belt_Int.fromString(s.substring(1)));
                return [
                        code,
                        n
                      ];
              }));
}

function solvePart1(data) {
  var ops = Belt_Array.map(parse(data), (function (param) {
          return make$1(param[0], param[1]);
        }));
  var prim = execute$3(make, ops);
  console.log(prim);
  return 1;
}

function solvePart2(data) {
  return 2;
}

exports.log = log;
exports.Ship = Ship;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
