// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Primitive_object from "rescript/lib/es6/Primitive_object.js";
import * as Belt_SortArrayInt from "rescript/lib/es6/Belt_SortArrayInt.js";

function log(prim) {
  console.log(prim);
}

function make(zero, one, raw) {
  return {
    nBits: raw.length,
    zero: zero,
    one: one,
    raw: raw
  };
}

function replace(src, from, to_) {
  if (Primitive_object.equal(src, from)) {
    return to_;
  } else {
    return src;
  }
}

function get(t) {
  return parseInt(Belt_Array.map(t.raw.split(""), c => {
    let __x = replace(c, t.zero, "0");
    return replace(__x, t.one, "1");
  }).join(""), 2);
}

let BitString = {
  make: make,
  replace: replace,
  get: get
};

function make$1(code) {
  return {
    row: make("F", "B", code.slice(0, 7)),
    column: make("L", "R", code.slice(7, 10))
  };
}

function getRow(t) {
  return get(t.row);
}

function getColumn(t) {
  return get(t.column);
}

function getSeatId(t) {
  return (get(t.row) << 3) + get(t.column) | 0;
}

let BoardingPass = {
  make: make$1,
  getRow: getRow,
  getColumn: getColumn,
  getSeatId: getSeatId
};

function parse(data) {
  return Belt_Array.map(data.split("\n"), prim => prim.trim());
}

function maxReducer(a, x) {
  if (Primitive_object.greaterthan(x, a)) {
    return x;
  } else {
    return a;
  }
}

function findGap(a, x) {
  if ((x - a | 0) === 1) {
    return x;
  } else {
    return a;
  }
}

function solvePart1(data) {
  let passes = Belt_Array.map(parse(data), make$1);
  return Belt_Array.reduce(Belt_Array.map(passes, getSeatId), 0, maxReducer);
}

function solvePart2(data) {
  let passes = Belt_Array.map(parse(data), make$1);
  let seatIds = Belt_Array.map(passes, getSeatId);
  let sortedSeatIds = Belt_SortArrayInt.stableSort(seatIds);
  let init = Belt_Array.getExn(sortedSeatIds, 0) - 1 | 0;
  return Belt_Array.reduce(sortedSeatIds, init, findGap) + 1 | 0;
}

export {
  log,
  BitString,
  BoardingPass,
  parse,
  maxReducer,
  findGap,
  solvePart1,
  solvePart2,
}
/* No side effect */
