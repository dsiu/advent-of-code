// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Belt_SortArrayInt = require("rescript/lib/js/belt_SortArrayInt.js");

function log(prim) {
  console.log(prim);
  
}

function make(zero, one, raw) {
  return {
          nBits: raw.length,
          zero: zero,
          one: one,
          raw: raw
        };
}

function replace(src, from, to_) {
  if (Caml_obj.caml_equal(src, from)) {
    return to_;
  } else {
    return src;
  }
}

function get(t) {
  return parseInt(Belt_Array.map(t.raw.split(""), (function (c) {
                      var __x = replace(c, t.zero, "0");
                      return replace(__x, t.one, "1");
                    })).join(""), 2);
}

var BitString = {
  make: make,
  replace: replace,
  get: get
};

function make$1(code) {
  return {
          row: make("F", "B", code.slice(0, 7)),
          column: make("L", "R", code.slice(7, 10))
        };
}

function getRow(t) {
  return get(t.row);
}

function getColumn(t) {
  return get(t.column);
}

function getSeatId(t) {
  return (get(t.row) << 3) + get(t.column) | 0;
}

var BoardingPass = {
  make: make$1,
  getRow: getRow,
  getColumn: getColumn,
  getSeatId: getSeatId
};

function parse(data) {
  return Belt_Array.map(data.split("\n"), (function (prim) {
                return prim.trim();
              }));
}

function maxReducer(a, x) {
  if (Caml_obj.caml_greaterthan(x, a)) {
    return x;
  } else {
    return a;
  }
}

function findGap(a, x) {
  if ((x - a | 0) === 1) {
    return x;
  } else {
    return a;
  }
}

function solvePart1(data) {
  var passes = Belt_Array.map(parse(data), make$1);
  return Belt_Array.reduce(Belt_Array.map(passes, getSeatId), 0, maxReducer);
}

function solvePart2(data) {
  var passes = Belt_Array.map(parse(data), make$1);
  var seatIds = Belt_Array.map(passes, getSeatId);
  var sortedSeatIds = Belt_SortArrayInt.stableSort(seatIds);
  var init = Belt_Option.getExn(Belt_Array.get(sortedSeatIds, 0)) - 1 | 0;
  return Belt_Array.reduce(sortedSeatIds, init, findGap) + 1 | 0;
}

exports.log = log;
exports.BitString = BitString;
exports.BoardingPass = BoardingPass;
exports.parse = parse;
exports.maxReducer = maxReducer;
exports.findGap = findGap;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
