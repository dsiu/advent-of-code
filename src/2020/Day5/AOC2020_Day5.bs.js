// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

function log(prim) {
  console.log(prim);
  
}

function make(zero, one, raw) {
  return {
          nBits: raw.length,
          zero: zero,
          one: one,
          raw: raw
        };
}

function replace(src, from, to_) {
  if (Caml_obj.caml_equal(src, from)) {
    return to_;
  } else {
    return src;
  }
}

function get(t) {
  return Belt_Array.map(t.raw.split(""), (function (c) {
                var __x = replace(c, t.zero, "0");
                return replace(__x, t.one, "1");
              }));
}

var BitString = {
  make: make,
  replace: replace,
  get: get
};

function make$1(code) {
  return {
          row: make("F", "B", code.slice(0, 7)),
          column: make("L", "R", code.slice(7, 10))
        };
}

function getRow(t) {
  return get(t.row);
}

function getColumn(t) {
  return get(t.column);
}

var BoardingPass = {
  make: make$1,
  getRow: getRow,
  getColumn: getColumn
};

function parse(data) {
  return data.split("\n");
}

function solvePart1(data) {
  var passes = Belt_Array.map(data.split("\n"), make$1);
  console.log("rows");
  var prim = Belt_Array.map(passes, getRow);
  console.log(prim);
  console.log("columns");
  var prim$1 = Belt_Array.map(passes, getColumn);
  console.log(prim$1);
  return 1;
}

function solvePart2(data) {
  return 2;
}

exports.log = log;
exports.BitString = BitString;
exports.BoardingPass = BoardingPass;
exports.parse = parse;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* No side effect */
