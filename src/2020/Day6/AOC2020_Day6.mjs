// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/Belt_Array.js";
import * as Belt_SetString from "rescript/lib/es6/Belt_SetString.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function parsePart1(x) {
  return Utils$AdventOfCode.splitChars(Utils$AdventOfCode.join(Belt_Array.map(Utils$AdventOfCode.splitNewline(x), prim => prim.trim())));
}

function countUnique(x) {
  return Belt_SetString.size(Belt_SetString.fromArray(x));
}

function parse(data, f) {
  return Belt_Array.map(Utils$AdventOfCode.splitDoubleNewline(data), f);
}

let filled = Belt_SetString.fromArray(Utils$AdventOfCode.splitChars("abcdefghijklmnopqrstuvwxyz"));

function parsePart2(x) {
  let __x = Belt_Array.map(Belt_Array.map(Belt_Array.map(Utils$AdventOfCode.splitNewline(x), prim => prim.trim()), Utils$AdventOfCode.splitChars), Belt_SetString.fromArray);
  return Belt_SetString.size(Belt_Array.reduce(__x, filled, Belt_SetString.intersect));
}

function solvePart1(data) {
  return Utils$AdventOfCode.sumIntArray(Belt_Array.map(Belt_Array.map(Utils$AdventOfCode.splitDoubleNewline(data), parsePart1), countUnique));
}

function solvePart2(data) {
  return Utils$AdventOfCode.sumIntArray(Belt_Array.map(Utils$AdventOfCode.splitDoubleNewline(data), parsePart2));
}

export {
  log,
  parsePart1,
  countUnique,
  parse,
  filled,
  parsePart2,
  solvePart1,
  solvePart2,
}
/* filled Not a pure module */
