// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Belt_Array = require("rescript/lib/js/belt_Array.js");
var Belt_SetString = require("rescript/lib/js/belt_SetString.js");
var Utils$AdventOfCode = require("../../Utils.bs.js");

function log(prim) {
  console.log(prim);
  
}

function parsePart1(x) {
  return Utils$AdventOfCode.splitChars(Utils$AdventOfCode.join(Belt_Array.map(Utils$AdventOfCode.splitNewline(x), (function (prim) {
                        return prim.trim();
                      }))));
}

function countUnique(x) {
  return Belt_SetString.size(Belt_SetString.fromArray(x));
}

function parse(data, f) {
  return Belt_Array.map(Utils$AdventOfCode.splitDoubleNewline(data), f);
}

var filled = Belt_SetString.fromArray(Utils$AdventOfCode.splitChars("abcdefghijklmnopqrstuvwxyz"));

function parsePart2(x) {
  var __x = Belt_Array.map(Belt_Array.map(Belt_Array.map(Utils$AdventOfCode.splitNewline(x), (function (prim) {
                  return prim.trim();
                })), Utils$AdventOfCode.splitChars), Belt_SetString.fromArray);
  return Belt_SetString.size(Belt_Array.reduce(__x, filled, Belt_SetString.intersect));
}

function solvePart1(data) {
  return Utils$AdventOfCode.sumIntArray(Belt_Array.map(Belt_Array.map(Utils$AdventOfCode.splitDoubleNewline(data), parsePart1), countUnique));
}

function solvePart2(data) {
  return Utils$AdventOfCode.sumIntArray(Belt_Array.map(Utils$AdventOfCode.splitDoubleNewline(data), parsePart2));
}

exports.log = log;
exports.parsePart1 = parsePart1;
exports.countUnique = countUnique;
exports.parse = parse;
exports.filled = filled;
exports.parsePart2 = parsePart2;
exports.solvePart1 = solvePart1;
exports.solvePart2 = solvePart2;
/* filled Not a pure module */
