// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as TableclothInt from "tablecloth-rescript/src/TableclothInt.mjs";
import * as TableclothSet from "tablecloth-rescript/src/TableclothSet.mjs";
import * as TableclothTuple3 from "tablecloth-rescript/src/TableclothTuple3.mjs";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as TableclothComparator from "tablecloth-rescript/src/TableclothComparator.mjs";
import * as FP_Utils$AdventOfCode from "../../FP_Utils.mjs";

function log(prim) {
  console.log(prim);
}

function compare(param) {
  return function (param$1) {
    var param$2 = TableclothInt.compare;
    var param$3 = TableclothInt.compare;
    var param$4 = TableclothInt.compare;
    return TableclothTuple3.compare(param, param$1, param$2, param$3, param$4);
  };
}

var include = TableclothComparator.Make({
      compare: compare
    });

var comparator = include.comparator;

var Coord = {
  compare: compare,
  comparator: comparator
};

function makeGrid(lines) {
  var createActive = function (x, y) {
    if (Belt_Array.getExn(Belt_Array.getExn(lines, y), x) === "#") {
      return [
              x,
              y,
              0
            ];
    }
    
  };
  var maxX = Belt_Array.getExn(lines, 0).length - 1 | 0;
  var maxY = lines.length - 1 | 0;
  var xs = Belt_Array.range(0, maxX);
  var ys = Belt_Array.range(0, maxY);
  return TableclothSet.fromArray(FP_Utils$AdventOfCode.combinationIfArray2(xs, ys, createActive), {
              comparator: comparator
            });
}

function parse(data) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), (function (param) {
                return FP_Utils$AdventOfCode.compose((function (prim) {
                              return prim.trim();
                            }), Utils$AdventOfCode.splitChars, param);
              }));
}

function solvePart1(data) {
  var prim = parse(data);
  console.log(prim);
  var prim$1 = TableclothSet.toArray(makeGrid(parse(data)));
  console.log(prim$1);
  return 1;
}

function solvePart2(data) {
  return 2;
}

var TC;

export {
  log ,
  TC ,
  Coord ,
  makeGrid ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* include Not a pure module */
