// Generated by ReScript, PLEASE EDIT WITH CARE


function prependDate(message) {
  let now = new Date();
  let hours = now.getHours().toString().padStart(2, "0");
  let minutes = now.getMinutes().toString().padStart(2, "0");
  let seconds = now.getSeconds().toString().padStart(2, "0");
  return hours + ":" + minutes + ":" + seconds + " " + message;
}

function log(level, msg) {
  let msg$1 = prependDate(msg);
  switch (level) {
    case "Debug" :
      if (process.env.NODE_ENV === "development") {
        console.log(msg$1);
        return;
      } else {
        return;
      }
    case "Info" :
      console.info(msg$1);
      return;
    case "Warn" :
      console.warn(msg$1);
      return;
    case "Error" :
      console.error(msg$1);
      return;
  }
}

function log2(level, msg, obj) {
  let msg$1 = prependDate(msg);
  switch (level) {
    case "Debug" :
      if (process.env.NODE_ENV === "development") {
        console.log(msg$1, obj);
        return;
      } else {
        return;
      }
    case "Info" :
      console.info(msg$1, obj);
      return;
    case "Warn" :
      console.warn(msg$1, obj);
      return;
    case "Error" :
      console.error(msg$1, obj);
      return;
  }
}

let DefaultImpl = {
  log: log,
  log2: log2
};

let loggerImpl = {
  contents: DefaultImpl
};

function setLoggerImpl(impl) {
  loggerImpl.contents = impl;
}

function make(moduleName) {
  let prefix = "[" + moduleName + "] ";
  let debug = message => {
    let I = loggerImpl.contents;
    I.log("Debug", prefix + message);
  };
  let info = message => {
    let I = loggerImpl.contents;
    I.log("Info", prefix + message);
  };
  let warn = message => {
    let I = loggerImpl.contents;
    I.log("Warn", prefix + message);
  };
  let error = message => {
    let I = loggerImpl.contents;
    I.log("Error", prefix + message);
  };
  let debug2 = (message, obj) => {
    let I = loggerImpl.contents;
    I.log2("Debug", prefix + message, obj);
  };
  let info2 = (message, obj) => {
    let I = loggerImpl.contents;
    I.log2("Info", prefix + message, obj);
  };
  let warn2 = (message, obj) => {
    let I = loggerImpl.contents;
    I.log2("Warn", prefix + message, obj);
  };
  let error2 = (message, obj) => {
    let I = loggerImpl.contents;
    I.log2("Error", prefix + message, obj);
  };
  return {
    debug: debug,
    info: info,
    warn: warn,
    error: error,
    debug2: debug2,
    info2: info2,
    warn2: warn2,
    error2: error2
  };
}

export {
  DefaultImpl,
  loggerImpl,
  setLoggerImpl,
  make,
}
/* No side effect */
