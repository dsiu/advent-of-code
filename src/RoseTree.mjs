// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Belt_List from "rescript/lib/es6/belt_List.js";
import * as ListLabels from "rescript/lib/es6/listLabels.js";
import * as StringLabels from "rescript/lib/es6/stringLabels.js";

function make(f, init) {
  var match = Curry._1(f, init);
  return {
          TAG: "Node",
          _0: [
            match[0],
            ListLabels.map((function (param) {
                    return make(f, param);
                  }), match[1])
          ]
        };
}

function shift(start, other) {
  return function (param) {
    var _acc = /* [] */0;
    var _x = param;
    while(true) {
      var x = _x;
      var acc = _acc;
      if (!x) {
        return ListLabels.rev(acc);
      }
      var markup = acc === /* [] */0 ? start : other;
      _x = x.tl;
      _acc = {
        hd: StringLabels.concat("", {
              hd: markup,
              tl: {
                hd: x.hd,
                tl: /* [] */0
              }
            }),
        tl: acc
      };
      continue ;
    };
  };
}

function draw(f, param) {
  var match = param._0;
  var inner = function (x) {
    if (!x) {
      return /* [] */0;
    }
    var ts = x.tl;
    var match = ts ? [
        "+- ",
        "|  "
      ] : [
        "`- ",
        "   "
      ];
    var lines = draw(f, x.hd);
    return Belt_List.concat({
                hd: "|",
                tl: shift(match[0], match[1])(lines)
              }, inner(ts));
  };
  return {
          hd: Curry._1(f, match[0]),
          tl: inner(match[1])
        };
}

function flatten(t) {
  var inner = function (param, acc) {
    var match = param._0;
    return {
            hd: match[0],
            tl: ListLabels.fold_right(inner, match[1], acc)
          };
  };
  return inner(t, /* [] */0);
}

function map(f, param) {
  var match = param._0;
  return {
          TAG: "Node",
          _0: [
            Curry._1(f, match[0]),
            ListLabels.map((function (param) {
                    return map(f, param);
                  }), match[1])
          ]
        };
}

export {
  make ,
  draw ,
  map ,
  flatten ,
}
/* No side effect */
