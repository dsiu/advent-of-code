// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Stdlib_List$AdventOfCode from "./stdlib/Stdlib_List.mjs";
import * as Stdlib_Array$AdventOfCode from "./stdlib/Stdlib_Array.mjs";

function powersetListMap_(set) {
  if (!set) {
    return {
            hd: /* [] */0,
            tl: /* [] */0
          };
  }
  var x = set.hd;
  var tail_powersets = powersetListMap_(set.tl);
  var with_x = Stdlib_List$AdventOfCode.map(tail_powersets, (function (it) {
          return {
                  hd: x,
                  tl: it
                };
        }));
  return Stdlib_List$AdventOfCode.concat(tail_powersets, with_x);
}

function powersetListFlatMap_(set) {
  if (!set) {
    return {
            hd: /* [] */0,
            tl: /* [] */0
          };
  }
  var x = set.hd;
  var tail_powersets = powersetListFlatMap_(set.tl);
  return Stdlib_List$AdventOfCode.flatMap(tail_powersets, (function (it) {
                return {
                        hd: it,
                        tl: {
                          hd: Stdlib_List$AdventOfCode.concat({
                                hd: x,
                                tl: /* [] */0
                              }, it),
                          tl: /* [] */0
                        }
                      };
              }));
}

function powersetArrayWithList_(xs) {
  return Stdlib_List$AdventOfCode.toArray(Stdlib_List$AdventOfCode.map(powersetListMap_(Stdlib_List$AdventOfCode.fromArray(xs)), Stdlib_List$AdventOfCode.toArray));
}

function powersetArrayMap_(set) {
  var match = set.length;
  if (match === 0) {
    return [[]];
  }
  var x = Stdlib_Array$AdventOfCode.getExn(set, 0);
  var xs = Stdlib_Array$AdventOfCode.sliceToEnd(set, 1);
  var tail_powersets = powersetArrayMap_(xs);
  var with_x = Stdlib_Array$AdventOfCode.map(tail_powersets, (function (it) {
          return Stdlib_Array$AdventOfCode.concat([x], it);
        }));
  return Stdlib_Array$AdventOfCode.concat(tail_powersets, with_x);
}

function powersetArrayFlatMap_(set) {
  var match = set.length;
  if (match === 0) {
    return [[]];
  }
  var x = Stdlib_Array$AdventOfCode.getExn(set, 0);
  var xs = Stdlib_Array$AdventOfCode.sliceToEnd(set, 1);
  var tail_powersets = powersetArrayFlatMap_(xs);
  return Stdlib_Array$AdventOfCode.flatMap(tail_powersets, (function (it) {
                return [
                        it,
                        Stdlib_Array$AdventOfCode.concat([x], it)
                      ];
              }));
}

var List;

var powersetList = powersetListFlatMap_;

var $$Array;

var flatMap = Stdlib_Array$AdventOfCode.flatMap;

var powersetArray = powersetArrayFlatMap_;

export {
  List ,
  powersetListMap_ ,
  powersetListFlatMap_ ,
  powersetList ,
  powersetArrayWithList_ ,
  $$Array ,
  powersetArrayMap_ ,
  flatMap ,
  powersetArrayFlatMap_ ,
  powersetArray ,
}
/* No side effect */
