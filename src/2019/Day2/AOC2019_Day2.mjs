// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_exceptions from "rescript/lib/es6/caml_exceptions.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";

function log(prim) {
  console.log(prim);
}

function parse(data) {
  return Belt_Array.map(data.split(","), Utils$AdventOfCode.intFromStringExn);
}

function getVal(t, pos) {
  return Belt_Option.getExn(Belt_Array.get(t.prog, pos));
}

function saveVal(t, pos, v) {
  Belt_Array.setExn(t.prog, pos, v);
  return t;
}

var InvalidOpCode = /* @__PURE__ */Caml_exceptions.create("AOC2019_Day2-AdventOfCode.IntCode.InvalidOpCode");

function executeInstr(t, instr) {
  var match = instr.op;
  if (match === 1) {
    return saveVal(t, instr.out, getVal(t, instr.arg1) + getVal(t, instr.arg2) | 0);
  }
  if (match !== 2) {
    throw {
          RE_EXN_ID: InvalidOpCode,
          _1: instr.op,
          Error: new Error()
        };
  }
  return saveVal(t, instr.out, Math.imul(getVal(t, instr.arg1), getVal(t, instr.arg2)));
}

function getInstr(t) {
  var op = getVal(t, t.pc);
  var arg1 = getVal(t, t.pc + 1 | 0);
  var arg2 = getVal(t, t.pc + 2 | 0);
  var out = getVal(t, t.pc + 3 | 0);
  if (op >= 3) {
    if (op === 99) {
      return ;
    }
    throw {
          RE_EXN_ID: InvalidOpCode,
          _1: op,
          Error: new Error()
        };
  }
  if (op > 0) {
    return {
            op: op,
            arg1: arg1,
            arg2: arg2,
            out: out
          };
  }
  throw {
        RE_EXN_ID: InvalidOpCode,
        _1: op,
        Error: new Error()
      };
}

function execute(_t) {
  while(true) {
    var t = _t;
    var i = getInstr(t);
    if (i === undefined) {
      return t;
    }
    var t$1 = executeInstr(t, i);
    _t = {
      prog: t$1.prog,
      pc: t$1.pc + 4 | 0
    };
    continue ;
  };
}

function fix1202Alarm(t) {
  return saveVal(saveVal(t, 1, 12), 2, 2);
}

function make(xs) {
  return {
          prog: xs,
          pc: 0
        };
}

var IntCode = {
  getVal: getVal,
  saveVal: saveVal,
  InvalidOpCode: InvalidOpCode,
  executeInstr: executeInstr,
  getInstr: getInstr,
  execute: execute,
  fix1202Alarm: fix1202Alarm,
  make: make
};

function part1(prog) {
  var result = execute(fix1202Alarm(prog));
  return Belt_Option.getExn(Belt_Array.get(result.prog, 0));
}

function solvePart1(data) {
  return part1({
              prog: parse(data),
              pc: 0
            });
}

function solvePart2(data) {
  return 2;
}

export {
  log ,
  parse ,
  IntCode ,
  part1 ,
  solvePart1 ,
  solvePart2 ,
}
/* No side effect */
