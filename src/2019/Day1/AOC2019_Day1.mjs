// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Utils$AdventOfCode from "../../Utils.mjs";
import * as FP_Utils$AdventOfCode from "../../FP_Utils.mjs";

function log(prim) {
  console.log(prim);
}

function fuel(mass) {
  return (mass / 3 | 0) - 2 | 0;
}

function part1(xs) {
  return FP_Utils$AdventOfCode.foldLeftArray(Belt_Array.map(xs, fuel), Utils$AdventOfCode.add);
}

function fuelCompound(mass) {
  var _mass = mass;
  var _acc = 0;
  while(true) {
    var acc = _acc;
    var mass$1 = _mass;
    var mass$p = fuel(mass$1);
    if (mass$p <= 0) {
      return acc;
    }
    _acc = acc + mass$p | 0;
    _mass = mass$p;
    continue ;
  };
}

function part2(xs) {
  return FP_Utils$AdventOfCode.foldLeftArray(Belt_Array.map(xs, fuelCompound), Utils$AdventOfCode.add);
}

function parse(data) {
  return Belt_Array.map(Utils$AdventOfCode.splitNewline(data), Utils$AdventOfCode.intFromStringExn);
}

function solvePart1(data) {
  return part1(Belt_Array.map(Utils$AdventOfCode.splitNewline(data), Utils$AdventOfCode.intFromStringExn));
}

function solvePart2(data) {
  return part2(Belt_Array.map(Utils$AdventOfCode.splitNewline(data), Utils$AdventOfCode.intFromStringExn));
}

export {
  log ,
  fuel ,
  part1 ,
  fuelCompound ,
  part2 ,
  parse ,
  solvePart1 ,
  solvePart2 ,
}
/* No side effect */
