// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as List from "rescript/lib/es6/list.js";
import * as Lens$Rationale from "rationale/src/Lens.mjs";

var record = {
  basic: 1,
  nest: {
    innerBasic: 2,
    innerSome: 3,
    innerNone: undefined
  },
  some: 4,
  none: undefined,
  someNest: {
    innerBasic: 5,
    innerSome: 6,
    innerNone: undefined
  },
  noneNest: undefined,
  list: {
    hd: 1,
    tl: {
      hd: 2,
      tl: {
        hd: 3,
        tl: /* [] */0
      }
    }
  },
  emptyList: /* [] */0,
  dict: {
    hd: [
      "a",
      7
    ],
    tl: /* [] */0
  },
  tuple: [
    8,
    9
  ]
};

var basicLens = Lens$Rationale.make((function (a) {
        return a.basic;
      }), (function (v, a) {
        return {
                basic: v,
                nest: a.nest,
                some: a.some,
                none: a.none,
                someNest: a.someNest,
                noneNest: a.noneNest,
                list: a.list,
                emptyList: a.emptyList,
                dict: a.dict,
                tuple: a.tuple
              };
      }));

var innerBasicLens = Lens$Rationale.make((function (a) {
        return a.innerBasic;
      }), (function (v, a) {
        return {
                innerBasic: v,
                innerSome: a.innerSome,
                innerNone: a.innerNone
              };
      }));

var nestLens = Lens$Rationale.make((function (a) {
        return a.nest;
      }), (function (v, a) {
        return {
                basic: a.basic,
                nest: v,
                some: a.some,
                none: a.none,
                someNest: a.someNest,
                noneNest: a.noneNest,
                list: a.list,
                emptyList: a.emptyList,
                dict: a.dict,
                tuple: a.tuple
              };
      }));

var someLens = Lens$Rationale.$great$great$neg(Lens$Rationale.make((function (a) {
            return a.some;
          }), (function (v, a) {
            return {
                    basic: a.basic,
                    nest: a.nest,
                    some: v,
                    none: a.none,
                    someNest: a.someNest,
                    noneNest: a.noneNest,
                    list: a.list,
                    emptyList: a.emptyList,
                    dict: a.dict,
                    tuple: a.tuple
                  };
          })), Lens$Rationale.optional(0));

var noneLens = Lens$Rationale.$great$great$neg(Lens$Rationale.make((function (a) {
            return a.none;
          }), (function (v, a) {
            return {
                    basic: a.basic,
                    nest: a.nest,
                    some: a.some,
                    none: v,
                    someNest: a.someNest,
                    noneNest: a.noneNest,
                    list: a.list,
                    emptyList: a.emptyList,
                    dict: a.dict,
                    tuple: a.tuple
                  };
          })), Lens$Rationale.optional(0));

var someNestLens = Lens$Rationale.$great$great$neg(Lens$Rationale.make((function (a) {
            return a.someNest;
          }), (function (v, a) {
            return {
                    basic: a.basic,
                    nest: a.nest,
                    some: a.some,
                    none: a.none,
                    someNest: v,
                    noneNest: a.noneNest,
                    list: a.list,
                    emptyList: a.emptyList,
                    dict: a.dict,
                    tuple: a.tuple
                  };
          })), Lens$Rationale.optional({
          innerBasic: 0,
          innerSome: 0,
          innerNone: undefined
        }));

var noneNestLens = Lens$Rationale.$great$great$neg(Lens$Rationale.make((function (a) {
            return a.noneNest;
          }), (function (v, a) {
            return {
                    basic: a.basic,
                    nest: a.nest,
                    some: a.some,
                    none: a.none,
                    someNest: v,
                    noneNest: a.noneNest,
                    list: a.list,
                    emptyList: a.emptyList,
                    dict: a.dict,
                    tuple: a.tuple
                  };
          })), Lens$Rationale.optional({
          innerBasic: 0,
          innerSome: 0,
          innerNone: undefined
        }));

var listLens = Lens$Rationale.make((function (a) {
        return a.list;
      }), (function (v, a) {
        return {
                basic: a.basic,
                nest: a.nest,
                some: a.some,
                none: a.none,
                someNest: a.someNest,
                noneNest: a.noneNest,
                list: v,
                emptyList: a.emptyList,
                dict: a.dict,
                tuple: a.tuple
              };
      }));

var emptyListLens = Lens$Rationale.make((function (a) {
        return a.emptyList;
      }), (function (v, a) {
        return {
                basic: a.basic,
                nest: a.nest,
                some: a.some,
                none: a.none,
                someNest: a.someNest,
                noneNest: a.noneNest,
                list: a.list,
                emptyList: v,
                dict: a.dict,
                tuple: a.tuple
              };
      }));

var dictLens = Lens$Rationale.make((function (a) {
        return a.dict;
      }), (function (v, a) {
        return {
                basic: a.basic,
                nest: a.nest,
                some: a.some,
                none: a.none,
                someNest: a.someNest,
                noneNest: a.noneNest,
                list: a.list,
                emptyList: a.emptyList,
                dict: v,
                tuple: a.tuple
              };
      }));

var aLens = Lens$Rationale.$great$great$neg(Lens$Rationale.prop("a"), Lens$Rationale.optional(0));

var tupleLens = Lens$Rationale.make((function (a) {
        return a.tuple;
      }), (function (v, a) {
        return {
                basic: a.basic,
                nest: a.nest,
                some: a.some,
                none: a.none,
                someNest: a.someNest,
                noneNest: a.noneNest,
                list: a.list,
                emptyList: a.emptyList,
                dict: a.dict,
                tuple: v
              };
      }));

Jest.describe("view", (function (param) {
        Jest.test("basic", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(basicLens, record)), 1);
              }));
        Jest.test("nest", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(nestLens, innerBasicLens), record)), 2);
              }));
        Jest.test("some", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(someLens, record)), 4);
              }));
        Jest.test("none", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(noneLens, record)), 0);
              }));
        Jest.test("someNest", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(someNestLens, innerBasicLens), record)), 5);
              }));
        Jest.test("noneNest", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(noneNestLens, innerBasicLens), record)), 0);
              }));
        Jest.describe("list", (function (param) {
                Jest.test("head", (function (param) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.head), Lens$Rationale.optional(0)), record)), 1);
                      }));
                Jest.test("tail", (function (param) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.tail), Lens$Rationale.optional({
                                                    hd: 0,
                                                    tl: /* [] */0
                                                  })), record)), {
                                    hd: 2,
                                    tl: {
                                      hd: 3,
                                      tl: /* [] */0
                                    }
                                  });
                      }));
                return Jest.test("index", (function (param) {
                              return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.index(1)), Lens$Rationale.optional(0)), record)), 2);
                            }));
              }));
        Jest.test("dict", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(dictLens, aLens), record)), 7);
              }));
        return Jest.describe("tuple", (function (param) {
                      Jest.test("first", (function (param) {
                              return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(tupleLens, Lens$Rationale.first), record)), 8);
                            }));
                      return Jest.test("second", (function (param) {
                                    return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(tupleLens, Lens$Rationale.second), record)), 9);
                                  }));
                    }));
      }));

Jest.describe("set", (function (param) {
        Jest.test("basic", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(basicLens, Lens$Rationale.set(basicLens, 5, record))), 5);
              }));
        Jest.test("nest", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(nestLens, innerBasicLens), Lens$Rationale.set(Lens$Rationale.$great$great$neg(nestLens, innerBasicLens), 5, record))), 5);
              }));
        Jest.test("some", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(someLens, Lens$Rationale.set(someLens, 5, record))), 5);
              }));
        Jest.test("none", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(noneLens, Lens$Rationale.set(noneLens, 5, record))), 5);
              }));
        Jest.test("someNest", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(someNestLens, innerBasicLens), Lens$Rationale.set(Lens$Rationale.$great$great$neg(someNestLens, innerBasicLens), 7, record))), 7);
              }));
        Jest.test("noneNest", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(noneNestLens, innerBasicLens), Lens$Rationale.set(Lens$Rationale.$great$great$neg(noneNestLens, innerBasicLens), 5, record))), 0);
              }));
        Jest.describe("list", (function (param) {
                Jest.test("head", (function (param) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.head), Lens$Rationale.optional(0)), Lens$Rationale.set(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.head), Lens$Rationale.optional(0)), 5, record))), 5);
                      }));
                Jest.test("tail", (function (param) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.tail), Lens$Rationale.optional({
                                                    hd: 0,
                                                    tl: /* [] */0
                                                  })), Lens$Rationale.set(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.tail), Lens$Rationale.optional({
                                                        hd: 0,
                                                        tl: /* [] */0
                                                      })), {
                                                hd: 5,
                                                tl: {
                                                  hd: 5,
                                                  tl: /* [] */0
                                                }
                                              }, record))), {
                                    hd: 5,
                                    tl: {
                                      hd: 5,
                                      tl: /* [] */0
                                    }
                                  });
                      }));
                return Jest.test("index", (function (param) {
                              return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.index(1)), Lens$Rationale.optional(0)), Lens$Rationale.set(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.index(1)), Lens$Rationale.optional(0)), 5, record))), 5);
                            }));
              }));
        Jest.test("dict", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(dictLens, aLens), Lens$Rationale.set(Lens$Rationale.$great$great$neg(dictLens, aLens), 5, record))), 5);
              }));
        return Jest.describe("tuple", (function (param) {
                      Jest.test("first", (function (param) {
                              return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(tupleLens, Lens$Rationale.first), Lens$Rationale.set(Lens$Rationale.$great$great$neg(tupleLens, Lens$Rationale.first), 5, record))), 5);
                            }));
                      return Jest.test("second", (function (param) {
                                    return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(tupleLens, Lens$Rationale.second), Lens$Rationale.set(Lens$Rationale.$great$great$neg(tupleLens, Lens$Rationale.second), 5, record))), 5);
                                  }));
                    }));
      }));

Jest.describe("over", (function (param) {
        var $$double = function (x) {
          return (x << 1);
        };
        Jest.test("basic", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(basicLens, Lens$Rationale.over(basicLens, $$double, record))), 2);
              }));
        Jest.test("nest", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(nestLens, innerBasicLens), Lens$Rationale.over(Lens$Rationale.$great$great$neg(nestLens, innerBasicLens), $$double, record))), 4);
              }));
        Jest.test("some", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(someLens, Lens$Rationale.over(someLens, $$double, record))), 8);
              }));
        Jest.test("none", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(noneLens, Lens$Rationale.over(noneLens, $$double, record))), 0);
              }));
        Jest.test("someNest", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(someNestLens, innerBasicLens), Lens$Rationale.over(Lens$Rationale.$great$great$neg(someNestLens, innerBasicLens), $$double, record))), 10);
              }));
        Jest.test("noneNest", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(noneNestLens, innerBasicLens), Lens$Rationale.over(Lens$Rationale.$great$great$neg(noneNestLens, innerBasicLens), $$double, record))), 0);
              }));
        Jest.describe("list", (function (param) {
                Jest.test("head", (function (param) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.head), Lens$Rationale.optional(0)), Lens$Rationale.over(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.head), Lens$Rationale.optional(0)), $$double, record))), 2);
                      }));
                Jest.test("tail", (function (param) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.tail), Lens$Rationale.optional({
                                                    hd: 0,
                                                    tl: /* [] */0
                                                  })), Lens$Rationale.over(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.tail), Lens$Rationale.optional({
                                                        hd: 0,
                                                        tl: /* [] */0
                                                      })), (function (param) {
                                                  return List.map($$double, param);
                                                }), record))), {
                                    hd: 4,
                                    tl: {
                                      hd: 6,
                                      tl: /* [] */0
                                    }
                                  });
                      }));
                return Jest.test("index", (function (param) {
                              return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.index(1)), Lens$Rationale.optional(0)), Lens$Rationale.over(Lens$Rationale.$great$great$neg(Lens$Rationale.$great$great$neg(listLens, Lens$Rationale.index(1)), Lens$Rationale.optional(0)), $$double, record))), 4);
                            }));
              }));
        Jest.test("dict", (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(dictLens, aLens), Lens$Rationale.over(Lens$Rationale.$great$great$neg(dictLens, aLens), $$double, record))), 14);
              }));
        return Jest.describe("tuple", (function (param) {
                      Jest.test("first", (function (param) {
                              return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(tupleLens, Lens$Rationale.first), Lens$Rationale.over(Lens$Rationale.$great$great$neg(tupleLens, Lens$Rationale.first), $$double, record))), 16);
                            }));
                      return Jest.test("second", (function (param) {
                                    return Jest.Expect.toEqual(Jest.Expect.expect(Lens$Rationale.view(Lens$Rationale.$great$great$neg(tupleLens, Lens$Rationale.second), Lens$Rationale.over(Lens$Rationale.$great$great$neg(tupleLens, Lens$Rationale.second), $$double, record))), 18);
                                  }));
                    }));
      }));

export {
  record ,
  basicLens ,
  innerBasicLens ,
  nestLens ,
  someLens ,
  noneLens ,
  someNestLens ,
  noneNestLens ,
  listLens ,
  emptyListLens ,
  dictLens ,
  aLens ,
  tupleLens ,
  
}
/* basicLens Not a pure module */
