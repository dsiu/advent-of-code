// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Array2D from "../src/Array2D.mjs";
import * as Belt_Option from "rescript/lib/es6/Belt_Option.js";

Jest.describe("make", () => {
  Jest.test("make - int", () => {
    let a = Array2D.make([
      3,
      2
    ], -1);
    [
      Array2D.set(a, [
        0,
        0
      ], 4),
      Array2D.set(a, [
        1,
        0
      ], 5),
      Array2D.set(a, [
        2,
        0
      ], 6),
      Array2D.set(a, [
        0,
        1
      ], 7),
      Array2D.set(a, [
        1,
        1
      ], 8),
      Array2D.set(a, [
        2,
        1
      ], 9)
    ];
    let expected = [
      [
        4,
        5,
        6
      ],
      [
        7,
        8,
        9
      ]
    ];
    return Jest.Expect.toEqual(Jest.Expect.expect(a), expected);
  });
  Jest.test("make - string", () => {
    let a = Array2D.make([
      3,
      2
    ], "");
    [
      Array2D.set(a, [
        0,
        0
      ], "a"),
      Array2D.set(a, [
        1,
        0
      ], "b"),
      Array2D.set(a, [
        2,
        0
      ], "c"),
      Array2D.set(a, [
        0,
        1
      ], "d"),
      Array2D.set(a, [
        1,
        1
      ], "e"),
      Array2D.set(a, [
        2,
        1
      ], "f")
    ];
    let expected = [
      [
        "a",
        "b",
        "c"
      ],
      [
        "d",
        "e",
        "f"
      ]
    ];
    return Jest.Expect.toEqual(Jest.Expect.expect(a), expected);
  });
});

Jest.describe("Array2D.make", () => {
  Jest.test("should create a 2D array with given dimensions and initial value", () => {
    let result = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      [
        0,
        0,
        0
      ],
      [
        0,
        0,
        0
      ]
    ]);
  });
  Jest.test("should create an empty 2D array when dimensions are zero", () => {
    let result = Array2D.make([
      0,
      0
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), []);
  });
  Jest.test("should create a 2D array with single row when y dimension is 1", () => {
    let result = Array2D.make([
      3,
      1
    ], "test");
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [[
        "test",
        "test",
        "test"
      ]]);
  });
  Jest.test("should create a 2D array with single column when x dimension is 1", () => {
    let result = Array2D.make([
      1,
      3
    ], "test");
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      ["test"],
      ["test"],
      ["test"]
    ]);
  });
});

Jest.describe("copy", () => {
  Jest.test("should create a copy of a 2D array", () => {
    let original = Array2D.make([
      3,
      2
    ], 0);
    let copy = Array2D.copy(original);
    return Jest.Expect.toEqual(Jest.Expect.expect(copy), original);
  });
  Jest.test("should not affect the original array when modifying the copy", () => {
    let original = Array2D.make([
      3,
      2
    ], 0);
    let copy = Array2D.copy(original);
    Array2D.set(copy, [
      1,
      1
    ], 1);
    return Jest.Expect.toEqual(Jest.Expect.expect(original), Array2D.make([
      3,
      2
    ], 0));
  });
  Jest.test("should create a copy of an empty 2D array", () => {
    let original = Array2D.make([
      0,
      0
    ], 0);
    let copy = Array2D.copy(original);
    return Jest.Expect.toEqual(Jest.Expect.expect(copy), original);
  });
});

Jest.describe("lengthY", () => {
  Jest.test("should return the number of rows in the 2D array", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.lengthY(array2D)), 2);
  });
  Jest.test("should return 0 for an empty 2D array", () => {
    let array2D = Array2D.make([
      0,
      0
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.lengthY(array2D)), 0);
  });
});

Jest.describe("lengthX", () => {
  Jest.test("should return the number of columns in the 2D array", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.lengthX(array2D)), 3);
  });
  Jest.test("should return 0 for an empty 2D array", () => {
    let array2D = Array2D.make([
      0,
      0
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.lengthX(array2D)), 0);
  });
});

Jest.describe("isValidXY", () => {
  Jest.test("should return true for valid coordinates", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toBe(Jest.Expect.expect(Array2D.isValidXY(array2D, [
      1,
      1
    ])), true);
  });
  Jest.test("should return false for coordinates outside the array", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toBe(Jest.Expect.expect(Array2D.isValidXY(array2D, [
      3,
      2
    ])), false);
  });
  Jest.test("should return false for negative coordinates", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toBe(Jest.Expect.expect(Array2D.isValidXY(array2D, [
      -1,
      -1
    ])), false);
  });
  Jest.test("should return true for edge coordinates", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toBe(Jest.Expect.expect(Array2D.isValidXY(array2D, [
      2,
      1
    ])), true);
  });
});

Jest.describe("set", () => {
  Jest.test("should set the value at the given coordinates", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    Array2D.set(array2D, [
      1,
      1
    ], 1);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.get(array2D, [
      1,
      1
    ])), 1);
  });
  Jest.test("should not change other values", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    Array2D.set(array2D, [
      1,
      1
    ], 1);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.get(array2D, [
      0,
      0
    ])), 0);
  });
});

Jest.describe("setYEquals", () => {
  Jest.test("should set the entire row to the given array", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    Array2D.setYEquals(array2D, 1, [
      1,
      1,
      1
    ]);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.getYEquals(array2D, 1)), [
      1,
      1,
      1
    ]);
  });
  Jest.test("should not change other rows", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    Array2D.setYEquals(array2D, 1, [
      1,
      1,
      1
    ]);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.getYEquals(array2D, 0)), [
      0,
      0,
      0
    ]);
  });
});

Jest.describe("get", () => {
  Jest.test("should return the value at the given coordinates", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.get(array2D, [
      1,
      1
    ])), 0);
  });
  Jest.test("should return None for invalid coordinates", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.get(array2D, [
      3,
      2
    ])), undefined);
  });
});

Jest.describe("getExn", () => {
  Jest.test("should return the value at the given coordinates", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.getExn(array2D, [
      1,
      1
    ])), 0);
  });
  Jest.test("should throw an exception for invalid coordinates", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    let fn = () => Array2D.getExn(array2D, [
      3,
      2
    ]);
    return Jest.Expect.toThrow(Jest.Expect.expect(fn));
  });
});

Jest.describe("getYEquals", () => {
  Jest.test("should return the row at the given index", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.getYEquals(array2D, 1)), [
      0,
      0,
      0
    ]);
  });
  Jest.test("should return None for invalid index", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.getYEquals(array2D, 2)), undefined);
  });
});

Jest.describe("getXEquals", () => {
  Jest.test("should return the column at the given index", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.getXEquals(array2D, 1)), [
      0,
      0
    ]);
  });
  Jest.test("should return None for invalid index", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(Array2D.getXEquals(array2D, 3)), undefined);
  });
});

Jest.describe("map", () => {
  Jest.test("should apply the function to each element in the 2D array", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 1);
    let result = Array2D.map(array2D, x => (x << 1));
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      [
        2,
        2,
        2
      ],
      [
        2,
        2,
        2
      ]
    ]);
  });
  Jest.test("should return an empty 2D array when given an empty 2D array", () => {
    let array2D = Array2D.make([
      0,
      0
    ], 1);
    let result = Array2D.map(array2D, x => (x << 1));
    return Jest.Expect.toEqual(Jest.Expect.expect(result), []);
  });
  Jest.test("should not modify the original 2D array", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 1);
    Array2D.map(array2D, x => (x << 1));
    return Jest.Expect.toEqual(Jest.Expect.expect(array2D), [
      [
        1,
        1,
        1
      ],
      [
        1,
        1,
        1
      ]
    ]);
  });
});

Jest.describe("mapU", () => {
  Jest.test("should apply the function to each element in the 2D array", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 1);
    let result = Array2D.map(array2D, x => (x << 1));
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      [
        2,
        2,
        2
      ],
      [
        2,
        2,
        2
      ]
    ]);
  });
  Jest.test("should return an empty 2D array when given an empty 2D array", () => {
    let array2D = Array2D.make([
      0,
      0
    ], 1);
    let result = Array2D.map(array2D, x => (x << 1));
    return Jest.Expect.toEqual(Jest.Expect.expect(result), []);
  });
  Jest.test("should not modify the original 2D array", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 1);
    Array2D.map(array2D, x => (x << 1));
    return Jest.Expect.toEqual(Jest.Expect.expect(array2D), [
      [
        1,
        1,
        1
      ],
      [
        1,
        1,
        1
      ]
    ]);
  });
});

Jest.describe("mapWithIndex", () => {
  Jest.test("should apply the function to each element with its coordinates", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    let result = Array2D.mapWithIndex(array2D, (coords, param) => coords);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      [
        [
          0,
          0
        ],
        [
          1,
          0
        ],
        [
          2,
          0
        ]
      ],
      [
        [
          0,
          1
        ],
        [
          1,
          1
        ],
        [
          2,
          1
        ]
      ]
    ]);
  });
  Jest.test("should return an empty 2D array when given an empty 2D array", () => {
    let array2D = Array2D.make([
      0,
      0
    ], 0);
    let result = Array2D.mapWithIndex(array2D, (coords, param) => coords);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), []);
  });
  Jest.test("should not modify the original 2D array", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    Array2D.mapWithIndex(array2D, (coords, param) => coords);
    return Jest.Expect.toEqual(Jest.Expect.expect(array2D), [
      [
        0,
        0,
        0
      ],
      [
        0,
        0,
        0
      ]
    ]);
  });
});

Jest.describe("mapWithIndexU", () => {
  Jest.test("should apply the function to each element with its coordinates", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    let result = Array2D.mapWithIndex(array2D, (coords, param) => coords);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      [
        [
          0,
          0
        ],
        [
          1,
          0
        ],
        [
          2,
          0
        ]
      ],
      [
        [
          0,
          1
        ],
        [
          1,
          1
        ],
        [
          2,
          1
        ]
      ]
    ]);
  });
  Jest.test("should return an empty 2D array when given an empty 2D array", () => {
    let array2D = Array2D.make([
      0,
      0
    ], 0);
    let result = Array2D.mapWithIndex(array2D, (coords, param) => coords);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), []);
  });
  Jest.test("should not modify the original 2D array", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 0);
    Array2D.mapWithIndex(array2D, (coords, param) => coords);
    return Jest.Expect.toEqual(Jest.Expect.expect(array2D), [
      [
        0,
        0,
        0
      ],
      [
        0,
        0,
        0
      ]
    ]);
  });
});

Jest.describe("reduce", () => {
  Jest.test("should correctly reduce a 2D array to a single value", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 1);
    let result = Array2D.reduce(array2D, 0, (acc, x) => acc + x | 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 6);
  });
  Jest.test("should return the initial value for an empty 2D array", () => {
    let array2D = Array2D.make([
      0,
      0
    ], 0);
    let result = Array2D.reduce(array2D, 10, (acc, x) => acc + x | 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 10);
  });
});

Jest.describe("reduceU", () => {
  Jest.test("should correctly reduce a 2D array to a single value", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 1);
    let result = Array2D.reduce(array2D, 0, (acc, x) => acc + x | 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 6);
  });
  Jest.test("should return the initial value for an empty 2D array", () => {
    let array2D = Array2D.make([
      0,
      0
    ], 0);
    let result = Array2D.reduce(array2D, 10, (acc, x) => acc + x | 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 10);
  });
});

Jest.describe("reduceWithIndex", () => {
  Jest.test("should correctly reduce a 2D array to a single value with index", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 1);
    let result = Array2D.reduceWithIndex(array2D, 0, (acc, x, param) => acc + x | 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 6);
  });
  Jest.test("should return the initial value for an empty 2D array", () => {
    let array2D = Array2D.make([
      0,
      0
    ], 0);
    let result = Array2D.reduceWithIndex(array2D, 10, (acc, x, param) => acc + x | 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 10);
  });
  Jest.test("should correctly use the index in the reduction function", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 1);
    let result = Array2D.reduceWithIndex(array2D, 0, (acc, _x, param) => (acc + param[0] | 0) + param[1] | 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 9);
  });
});

Jest.describe("reduceWithIndexU", () => {
  Jest.test("should correctly reduce a 2D array to a single value with index", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 1);
    let result = Array2D.reduceWithIndex(array2D, 0, (acc, x, param) => acc + x | 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 6);
  });
  Jest.test("should return the initial value for an empty 2D array", () => {
    let array2D = Array2D.make([
      0,
      0
    ], 0);
    let result = Array2D.reduceWithIndex(array2D, 10, (acc, x, param) => acc + x | 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 10);
  });
  Jest.test("should correctly use the index in the reduction function", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 1);
    let result = Array2D.reduceWithIndex(array2D, 0, (acc, _x, param) => (acc + param[0] | 0) + param[1] | 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), 9);
  });
});

Jest.describe("flatten", () => {
  Jest.test("should flatten a 2D array into a 1D array", () => {
    let array2D = Array2D.make([
      3,
      2
    ], 1);
    let result = Array2D.flatten(array2D);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      1,
      1,
      1,
      1,
      1,
      1
    ]);
  });
  Jest.test("should return an empty array when given an empty 2D array", () => {
    let array2D = Array2D.make([
      0,
      0
    ], 0);
    let result = Array2D.flatten(array2D);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), []);
  });
  Jest.test("should flatten a 2D array with different values", () => {
    let array2D = [
      [
        1,
        2,
        3
      ],
      [
        4,
        5,
        6
      ]
    ];
    let result = Array2D.flatten(array2D);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      1,
      2,
      3,
      4,
      5,
      6
    ]);
  });
});

Jest.describe("crop", () => {
  let array2D = [
    [
      355,
      907,
      707
    ],
    [
      404,
      559,
      514
    ],
    [
      320,
      891,
      982
    ],
    [
      744,
      97,
      876
    ]
  ];
  Jest.test("should correctly crop a 2D array (1)", () => {
    let result = Array2D.crop(array2D, [
      1,
      1
    ], 2, 2);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      [
        559,
        514
      ],
      [
        891,
        982
      ]
    ]);
  });
  Jest.test("should correctly crop a 2D array (2)", () => {
    let result = Array2D.crop(array2D, [
      2,
      1
    ], 1, 3);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      [514],
      [982],
      [876]
    ]);
  });
  Jest.test("should correctly crop a 2D array (3)", () => {
    let result = Array2D.crop(array2D, [
      0,
      2
    ], 1, 2);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      [320],
      [744]
    ]);
  });
  Jest.test("should return an empty array when cropping outside the array", () => {
    let result = Array2D.crop(array2D, [
      5,
      5
    ], 3, 3);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), []);
  });
  Jest.test("should return a smaller array when cropping at the edge of the array (1)", () => {
    let result = Array2D.crop(array2D, [
      2,
      3
    ], 3, 3);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [[876]]);
  });
  Jest.test("should return a smaller array when cropping at the edge of the array (2)", () => {
    let result = Array2D.crop(array2D, [
      1,
      2
    ], 10, 20);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), [
      [
        891,
        982
      ],
      [
        97,
        876
      ]
    ]);
  });
  Jest.test("should return the correct array when cropping with zero length", () => {
    let result = Array2D.crop(array2D, [
      1,
      1
    ], 0, 0);
    return Jest.Expect.toEqual(Jest.Expect.expect(result), []);
  });
});

Jest.describe("eq", () => {
  Jest.test("should return true for identical 2D arrays", () => {
    let array2D1 = Array2D.make([
      3,
      2
    ], 1);
    let array2D2 = Array2D.make([
      3,
      2
    ], 1);
    return Jest.Expect.toBe(Jest.Expect.expect(Array2D.eq(array2D1, array2D2)), true);
  });
  Jest.test("should return false for 2D arrays with different dimensions", () => {
    let array2D1 = Array2D.make([
      3,
      2
    ], 1);
    let array2D2 = Array2D.make([
      2,
      2
    ], 1);
    return Jest.Expect.toBe(Jest.Expect.expect(Array2D.eq(array2D1, array2D2)), false);
  });
  Jest.test("should return false for 2D arrays with different values", () => {
    let array2D1 = Array2D.make([
      3,
      2
    ], 1);
    let array2D2 = Array2D.make([
      3,
      2
    ], 2);
    return Jest.Expect.toBe(Jest.Expect.expect(Array2D.eq(array2D1, array2D2)), false);
  });
  Jest.test("should return true for empty 2D arrays", () => {
    let array2D1 = Array2D.make([
      0,
      0
    ], 0);
    let array2D2 = Array2D.make([
      0,
      0
    ], 0);
    return Jest.Expect.toBe(Jest.Expect.expect(Array2D.eq(array2D1, array2D2)), true);
  });
});

Jest.describe("get / set", () => {
  let s = Array2D.make([
    2,
    2
  ], "");
  [
    Array2D.set(s, [
      0,
      0
    ], "e"),
    Array2D.set(s, [
      1,
      0
    ], "f"),
    Array2D.set(s, [
      0,
      1
    ], "g"),
    Array2D.set(s, [
      1,
      1
    ], "h")
  ];
  let get_string_tests_0 = [
    Belt_Option.getExn(Array2D.get(s, [
      1,
      0
    ])),
    "f"
  ];
  let get_string_tests_1 = {
    hd: [
      Belt_Option.getExn(Array2D.get(s, [
        0,
        1
      ])),
      "g"
    ],
    tl: {
      hd: [
        Belt_Option.getExn(Array2D.get(s, [
          0,
          0
        ])),
        "e"
      ],
      tl: {
        hd: [
          Belt_Option.getExn(Array2D.get(s, [
            1,
            1
          ])),
          "h"
        ],
        tl: /* [] */0
      }
    }
  };
  let get_string_tests = {
    hd: get_string_tests_0,
    tl: get_string_tests_1
  };
  Jest.testAll("get - string", get_string_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let a = Array2D.make([
    2,
    2
  ], -1);
  [
    Array2D.set(a, [
      0,
      0
    ], 1),
    Array2D.set(a, [
      1,
      0
    ], 2),
    Array2D.set(a, [
      0,
      1
    ], 3),
    Array2D.set(a, [
      1,
      1
    ], 4)
  ];
  let b = Array2D.copy(a);
  let get_tests_0 = [
    Array2D.get(a, [
      0,
      0
    ]),
    1
  ];
  let get_tests_1 = {
    hd: [
      Array2D.get(a, [
        1,
        0
      ]),
      2
    ],
    tl: {
      hd: [
        Array2D.get(a, [
          0,
          1
        ]),
        3
      ],
      tl: {
        hd: [
          Array2D.get(a, [
            1,
            1
          ]),
          4
        ],
        tl: /* [] */0
      }
    }
  };
  let get_tests = {
    hd: get_tests_0,
    tl: get_tests_1
  };
  Jest.testAll("get - int", get_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  [
    Array2D.set(a, [
      0,
      0
    ], 5),
    Array2D.set(a, [
      0,
      1
    ], 7)
  ];
  let set_tests_0 = [
    Array2D.get(a, [
      0,
      0
    ]),
    5
  ];
  let set_tests_1 = {
    hd: [
      Array2D.get(a, [
        1,
        0
      ]),
      2
    ],
    tl: {
      hd: [
        Array2D.get(a, [
          0,
          1
        ]),
        7
      ],
      tl: {
        hd: [
          Array2D.get(a, [
            1,
            1
          ]),
          4
        ],
        tl: /* [] */0
      }
    }
  };
  let set_tests = {
    hd: set_tests_0,
    tl: set_tests_1
  };
  Jest.testAll("set - int", set_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  [Array2D.setYEquals(b, 1, [
      9,
      11
    ])];
  let setYEquals_test_0 = [
    Array2D.get(b, [
      0,
      0
    ]),
    1
  ];
  let setYEquals_test_1 = {
    hd: [
      Array2D.get(b, [
        1,
        0
      ]),
      2
    ],
    tl: {
      hd: [
        Array2D.get(b, [
          0,
          1
        ]),
        9
      ],
      tl: {
        hd: [
          Array2D.get(b, [
            1,
            1
          ]),
          11
        ],
        tl: /* [] */0
      }
    }
  };
  let setYEquals_test = {
    hd: setYEquals_test_0,
    tl: setYEquals_test_1
  };
  Jest.testAll("setYEquals", setYEquals_test, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
});

Jest.describe("setYEquals / getYEquals", () => {
  let a = Array2D.make([
    2,
    2
  ], -1);
  [
    Array2D.set(a, [
      0,
      0
    ], 1),
    Array2D.set(a, [
      1,
      0
    ], 2),
    Array2D.set(a, [
      0,
      1
    ], 3),
    Array2D.set(a, [
      1,
      1
    ], 4)
  ];
});

Jest.describe("keep / map / getXYEquals / crop", () => {
  let a = [
    [
      355,
      907,
      707
    ],
    [
      404,
      559,
      514
    ],
    [
      320,
      891,
      982
    ],
    [
      744,
      97,
      876
    ]
  ];
  Jest.test("map - int", () => {
    let result = Array2D.map(a, x => (x << 1));
    let expected = [
      [
        710,
        1814,
        1414
      ],
      [
        808,
        1118,
        1028
      ],
      [
        640,
        1782,
        1964
      ],
      [
        1488,
        194,
        1752
      ]
    ];
    return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
  });
  let getXEquals_tests_0 = [
    Array2D.getXEquals(a, 0),
    [
      355,
      404,
      320,
      744
    ]
  ];
  let getXEquals_tests_1 = {
    hd: [
      Array2D.getXEquals(a, 1),
      [
        907,
        559,
        891,
        97
      ]
    ],
    tl: {
      hd: [
        Array2D.getXEquals(a, 2),
        [
          707,
          514,
          982,
          876
        ]
      ],
      tl: /* [] */0
    }
  };
  let getXEquals_tests = {
    hd: getXEquals_tests_0,
    tl: getXEquals_tests_1
  };
  Jest.testAll("getXEquals", getXEquals_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let getYEquals_tests_0 = [
    Array2D.getYEquals(a, 0),
    [
      355,
      907,
      707
    ]
  ];
  let getYEquals_tests_1 = {
    hd: [
      Array2D.getYEquals(a, 1),
      [
        404,
        559,
        514
      ]
    ],
    tl: {
      hd: [
        Array2D.getYEquals(a, 2),
        [
          320,
          891,
          982
        ]
      ],
      tl: /* [] */0
    }
  };
  let getYEquals_tests = {
    hd: getYEquals_tests_0,
    tl: getYEquals_tests_1
  };
  Jest.testAll("getYEquals", getYEquals_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let crop_tests_0 = [
    Array2D.crop(a, [
      1,
      2
    ], 1, 2),
    [
      [891],
      [97]
    ]
  ];
  let crop_tests_1 = {
    hd: [
      Array2D.crop(a, [
        1,
        1
      ], 2, 2),
      [
        [
          559,
          514
        ],
        [
          891,
          982
        ]
      ]
    ],
    tl: /* [] */0
  };
  let crop_tests = {
    hd: crop_tests_0,
    tl: crop_tests_1
  };
  Jest.testAll("crop", crop_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
});

/*  Not a pure module */
