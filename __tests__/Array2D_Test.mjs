// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Array2D$AdventOfCode from "../src/Array2D.mjs";

Jest.describe("make", (function (param) {
        Jest.test("make - int", (function (param) {
                var a = Array2D$AdventOfCode.make([
                      3,
                      2
                    ], -1);
                [
                  Array2D$AdventOfCode.set(a, [
                        0,
                        0
                      ], 4),
                  Array2D$AdventOfCode.set(a, [
                        1,
                        0
                      ], 5),
                  Array2D$AdventOfCode.set(a, [
                        2,
                        0
                      ], 6),
                  Array2D$AdventOfCode.set(a, [
                        0,
                        1
                      ], 7),
                  Array2D$AdventOfCode.set(a, [
                        1,
                        1
                      ], 8),
                  Array2D$AdventOfCode.set(a, [
                        2,
                        1
                      ], 9)
                ];
                var expected = [
                  [
                    4,
                    5,
                    6
                  ],
                  [
                    7,
                    8,
                    9
                  ]
                ];
                return Jest.Expect.toEqual(Jest.Expect.expect(a), expected);
              }));
        Jest.test("make - string", (function (param) {
                var a = Array2D$AdventOfCode.make([
                      3,
                      2
                    ], "");
                [
                  Array2D$AdventOfCode.set(a, [
                        0,
                        0
                      ], "a"),
                  Array2D$AdventOfCode.set(a, [
                        1,
                        0
                      ], "b"),
                  Array2D$AdventOfCode.set(a, [
                        2,
                        0
                      ], "c"),
                  Array2D$AdventOfCode.set(a, [
                        0,
                        1
                      ], "d"),
                  Array2D$AdventOfCode.set(a, [
                        1,
                        1
                      ], "e"),
                  Array2D$AdventOfCode.set(a, [
                        2,
                        1
                      ], "f")
                ];
                var expected = [
                  [
                    "a",
                    "b",
                    "c"
                  ],
                  [
                    "d",
                    "e",
                    "f"
                  ]
                ];
                return Jest.Expect.toEqual(Jest.Expect.expect(a), expected);
              }));
      }));

Jest.describe("get / set", (function (param) {
        var s = Array2D$AdventOfCode.make([
              2,
              2
            ], "");
        [
          Array2D$AdventOfCode.set(s, [
                0,
                0
              ], "e"),
          Array2D$AdventOfCode.set(s, [
                1,
                0
              ], "f"),
          Array2D$AdventOfCode.set(s, [
                0,
                1
              ], "g"),
          Array2D$AdventOfCode.set(s, [
                1,
                1
              ], "h")
        ];
        var get_string_tests_0 = [
          Belt_Option.getExn(Array2D$AdventOfCode.get(s, [
                    1,
                    0
                  ])),
          "f"
        ];
        var get_string_tests_1 = {
          hd: [
            Belt_Option.getExn(Array2D$AdventOfCode.get(s, [
                      0,
                      1
                    ])),
            "g"
          ],
          tl: {
            hd: [
              Belt_Option.getExn(Array2D$AdventOfCode.get(s, [
                        0,
                        0
                      ])),
              "e"
            ],
            tl: {
              hd: [
                Belt_Option.getExn(Array2D$AdventOfCode.get(s, [
                          1,
                          1
                        ])),
                "h"
              ],
              tl: /* [] */0
            }
          }
        };
        var get_string_tests = {
          hd: get_string_tests_0,
          tl: get_string_tests_1
        };
        Jest.testAll("get - string", get_string_tests, (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]);
              }));
        var a = Array2D$AdventOfCode.make([
              2,
              2
            ], -1);
        [
          Array2D$AdventOfCode.set(a, [
                0,
                0
              ], 1),
          Array2D$AdventOfCode.set(a, [
                1,
                0
              ], 2),
          Array2D$AdventOfCode.set(a, [
                0,
                1
              ], 3),
          Array2D$AdventOfCode.set(a, [
                1,
                1
              ], 4)
        ];
        var b = Array2D$AdventOfCode.copy(a);
        var get_tests_0 = [
          Array2D$AdventOfCode.get(a, [
                0,
                0
              ]),
          1
        ];
        var get_tests_1 = {
          hd: [
            Array2D$AdventOfCode.get(a, [
                  1,
                  0
                ]),
            2
          ],
          tl: {
            hd: [
              Array2D$AdventOfCode.get(a, [
                    0,
                    1
                  ]),
              3
            ],
            tl: {
              hd: [
                Array2D$AdventOfCode.get(a, [
                      1,
                      1
                    ]),
                4
              ],
              tl: /* [] */0
            }
          }
        };
        var get_tests = {
          hd: get_tests_0,
          tl: get_tests_1
        };
        Jest.testAll("get - int", get_tests, (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]);
              }));
        [
          Array2D$AdventOfCode.set(a, [
                0,
                0
              ], 5),
          Array2D$AdventOfCode.set(a, [
                0,
                1
              ], 7)
        ];
        var set_tests_0 = [
          Array2D$AdventOfCode.get(a, [
                0,
                0
              ]),
          5
        ];
        var set_tests_1 = {
          hd: [
            Array2D$AdventOfCode.get(a, [
                  1,
                  0
                ]),
            2
          ],
          tl: {
            hd: [
              Array2D$AdventOfCode.get(a, [
                    0,
                    1
                  ]),
              7
            ],
            tl: {
              hd: [
                Array2D$AdventOfCode.get(a, [
                      1,
                      1
                    ]),
                4
              ],
              tl: /* [] */0
            }
          }
        };
        var set_tests = {
          hd: set_tests_0,
          tl: set_tests_1
        };
        Jest.testAll("set - int", set_tests, (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]);
              }));
        [Array2D$AdventOfCode.setYEquals(b, 1, [
                9,
                11
              ])];
        var setYEquals_test_0 = [
          Array2D$AdventOfCode.get(b, [
                0,
                0
              ]),
          1
        ];
        var setYEquals_test_1 = {
          hd: [
            Array2D$AdventOfCode.get(b, [
                  1,
                  0
                ]),
            2
          ],
          tl: {
            hd: [
              Array2D$AdventOfCode.get(b, [
                    0,
                    1
                  ]),
              9
            ],
            tl: {
              hd: [
                Array2D$AdventOfCode.get(b, [
                      1,
                      1
                    ]),
                11
              ],
              tl: /* [] */0
            }
          }
        };
        var setYEquals_test = {
          hd: setYEquals_test_0,
          tl: setYEquals_test_1
        };
        Jest.testAll("setYEquals", setYEquals_test, (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]);
              }));
      }));

Jest.describe("setYEquals / getYEquals", (function (param) {
        var a = Array2D$AdventOfCode.make([
              2,
              2
            ], -1);
        [
          Array2D$AdventOfCode.set(a, [
                0,
                0
              ], 1),
          Array2D$AdventOfCode.set(a, [
                1,
                0
              ], 2),
          Array2D$AdventOfCode.set(a, [
                0,
                1
              ], 3),
          Array2D$AdventOfCode.set(a, [
                1,
                1
              ], 4)
        ];
      }));

Jest.describe("keep / map / getXYEquals / crop", (function (param) {
        var a = Array2D$AdventOfCode.make([
              3,
              4
            ], -1);
        [
          Array2D$AdventOfCode.set(a, [
                0,
                0
              ], 355),
          Array2D$AdventOfCode.set(a, [
                1,
                0
              ], 907),
          Array2D$AdventOfCode.set(a, [
                2,
                0
              ], 707),
          Array2D$AdventOfCode.set(a, [
                0,
                1
              ], 404),
          Array2D$AdventOfCode.set(a, [
                1,
                1
              ], 559),
          Array2D$AdventOfCode.set(a, [
                2,
                1
              ], 514),
          Array2D$AdventOfCode.set(a, [
                0,
                2
              ], 320),
          Array2D$AdventOfCode.set(a, [
                1,
                2
              ], 891),
          Array2D$AdventOfCode.set(a, [
                2,
                2
              ], 982),
          Array2D$AdventOfCode.set(a, [
                0,
                3
              ], 744),
          Array2D$AdventOfCode.set(a, [
                1,
                3
              ], 97),
          Array2D$AdventOfCode.set(a, [
                2,
                3
              ], 876)
        ];
        Jest.test("map - int", (function (param) {
                var result = Array2D$AdventOfCode.map(a, (function (x) {
                        return (x << 1);
                      }));
                var expected = [
                  [
                    710,
                    1814,
                    1414
                  ],
                  [
                    808,
                    1118,
                    1028
                  ],
                  [
                    640,
                    1782,
                    1964
                  ],
                  [
                    1488,
                    194,
                    1752
                  ]
                ];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        var getXEquals_tests_0 = [
          Array2D$AdventOfCode.getXEquals(a, 0),
          [
            355,
            404,
            320,
            744
          ]
        ];
        var getXEquals_tests_1 = {
          hd: [
            Array2D$AdventOfCode.getXEquals(a, 1),
            [
              907,
              559,
              891,
              97
            ]
          ],
          tl: {
            hd: [
              Array2D$AdventOfCode.getXEquals(a, 2),
              [
                707,
                514,
                982,
                876
              ]
            ],
            tl: /* [] */0
          }
        };
        var getXEquals_tests = {
          hd: getXEquals_tests_0,
          tl: getXEquals_tests_1
        };
        Jest.testAll("getXEquals", getXEquals_tests, (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]);
              }));
        var getYEquals_tests_0 = [
          Array2D$AdventOfCode.getYEquals(a, 0),
          [
            355,
            907,
            707
          ]
        ];
        var getYEquals_tests_1 = {
          hd: [
            Array2D$AdventOfCode.getYEquals(a, 1),
            [
              404,
              559,
              514
            ]
          ],
          tl: {
            hd: [
              Array2D$AdventOfCode.getYEquals(a, 2),
              [
                320,
                891,
                982
              ]
            ],
            tl: /* [] */0
          }
        };
        var getYEquals_tests = {
          hd: getYEquals_tests_0,
          tl: getYEquals_tests_1
        };
        Jest.testAll("getYEquals", getYEquals_tests, (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]);
              }));
        var crop_tests_0 = [
          Array2D$AdventOfCode.crop(a, [
                1,
                2
              ], 1, 2),
          [
            [891],
            [97]
          ]
        ];
        var crop_tests_1 = {
          hd: [
            Array2D$AdventOfCode.crop(a, [
                  1,
                  1
                ], 2, 2),
            [
              [
                559,
                514
              ],
              [
                891,
                982
              ]
            ]
          ],
          tl: /* [] */0
        };
        var crop_tests = {
          hd: crop_tests_0,
          tl: crop_tests_1
        };
        Jest.testAll("crop", crop_tests, (function (param) {
                return Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]);
              }));
      }));

export {
  
}
/*  Not a pure module */
