// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Day5$AdventOfCode = require("../../../src/2018/Day5/Day5.bs.js");
var Day5_Data$AdventOfCode = require("../../../src/2018/Day5/Day5_Data.bs.js");
var Day5_Data_Test$AdventOfCode = require("../../../src/2018/Day5/Day5_Data_Test.bs.js");

var testCharArray = Day5_Data_Test$AdventOfCode.data.split("");

var testCharList = Belt_List.fromArray(testCharArray);

var charArray = Day5_Data$AdventOfCode.data.split("");

var charList = Belt_List.fromArray(charArray);

Jest.describe("2018 Day5", (function (param) {
        Jest.describe("Part 1", (function (param) {
                Jest.test("fuse", (function (param) {
                        var result_0 = Day5$AdventOfCode.fuse([
                              "a",
                              "b"
                            ]);
                        var result_1 = Day5$AdventOfCode.fuse([
                              "a",
                              "A"
                            ]);
                        var result_2 = Day5$AdventOfCode.fuse([
                              "a",
                              "B"
                            ]);
                        var result_3 = Day5$AdventOfCode.fuse([
                              "c",
                              "C"
                            ]);
                        var result_4 = Day5$AdventOfCode.fuse([
                              "D",
                              "d"
                            ]);
                        var result_5 = Day5$AdventOfCode.fuse([
                              "E",
                              "Z"
                            ]);
                        var result_6 = Day5$AdventOfCode.fuse([
                              "A",
                              "a"
                            ]);
                        var result = [
                          result_0,
                          result_1,
                          result_2,
                          result_3,
                          result_4,
                          result_5,
                          result_6
                        ];
                        return Jest.Expect.toEqual([
                                    false,
                                    true,
                                    false,
                                    true,
                                    true,
                                    false,
                                    true
                                  ], Jest.Expect.expect(result));
                      }));
                Jest.test("Solve Part 1 - testData list", (function (param) {
                        var result = Belt_List.toArray(Day5$AdventOfCode.defuse(testCharList)).join("");
                        return Jest.Expect.toEqual("dabCBAcaDA", Jest.Expect.expect(result));
                      }));
                Jest.test("Solve Part 1 - testData array", (function (param) {
                        var result = Day5$AdventOfCode.defuse_array(testCharArray).join("");
                        return Jest.Expect.toEqual("dabCBAcaDA", Jest.Expect.expect(result));
                      }));
                return Jest.test("Solve Part 1 - Data array", (function (param) {
                              var result = Day5$AdventOfCode.defuse_array(charArray).join("");
                              return Jest.Expect.toEqual(Day5_Data$AdventOfCode.result, Jest.Expect.expect(result));
                            }));
              }));
        return Jest.describe("Part 2", (function (param) {
                      Jest.test("Solve Part 2 - testData", (function (param) {
                              var result = Day5$AdventOfCode.solvePart2(Day5_Data_Test$AdventOfCode.data);
                              return Jest.Expect.toEqual(4455, Jest.Expect.expect(result));
                            }));
                      return Jest.test("Solve Part 2 - Data", (function (param) {
                                    var result = Day5$AdventOfCode.solvePart2(Day5_Data$AdventOfCode.data);
                                    return Jest.Expect.toEqual(4455, Jest.Expect.expect(result));
                                  }));
                    }));
      }));

var data = Day5_Data$AdventOfCode.data;

var testData = Day5_Data_Test$AdventOfCode.data;

exports.data = data;
exports.testData = testData;
exports.testCharArray = testCharArray;
exports.testCharList = testCharList;
exports.charArray = charArray;
exports.charList = charList;
/* testCharArray Not a pure module */
