// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Js_array from "rescript/lib/es6/js_array.js";
import * as Tree$AdventOfCode from "../src/Tree.mjs";
import * as Jest2$AdventOfCode from "../interop/Jest2.mjs";

describe("Tree", (function () {
        var tl_1 = {
          TAG: /* Pair */1,
          _0: {
            TAG: /* Leaf */0,
            _0: 1
          },
          _1: {
            TAG: /* Leaf */0,
            _0: 2
          }
        };
        var tr_1 = {
          TAG: /* Pair */1,
          _0: {
            TAG: /* Leaf */0,
            _0: 3
          },
          _1: {
            TAG: /* Leaf */0,
            _0: 4
          }
        };
        var tree_1 = {
          TAG: /* Pair */1,
          _0: tl_1,
          _1: tr_1
        };
        var tll_2 = {
          TAG: /* Pair */1,
          _0: {
            TAG: /* Leaf */0,
            _0: 1
          },
          _1: {
            TAG: /* Leaf */0,
            _0: 2
          }
        };
        var tl_2_1 = {
          TAG: /* Leaf */0,
          _0: 3
        };
        var tl_2 = {
          TAG: /* Pair */1,
          _0: tll_2,
          _1: tl_2_1
        };
        var trr_2 = {
          TAG: /* Pair */1,
          _0: {
            TAG: /* Leaf */0,
            _0: 5
          },
          _1: {
            TAG: /* Leaf */0,
            _0: 6
          }
        };
        var tr_2_0 = {
          TAG: /* Leaf */0,
          _0: 4
        };
        var tr_2 = {
          TAG: /* Pair */1,
          _0: tr_2_0,
          _1: trr_2
        };
        var tree_2 = {
          TAG: /* Pair */1,
          _0: tl_2,
          _1: tr_2
        };
        var toString = function (param) {
          return Js_array.map((function (param) {
                        return [
                                Tree$AdventOfCode.locToString(param[0]),
                                Tree$AdventOfCode.locToString(param[1])
                              ];
                      }), param);
        };
        var left_tests = toString([
              [
                Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_1)),
                /* Loc */{
                  _0: tl_1,
                  _1: {
                    TAG: /* L */0,
                    _0: /* Top */0,
                    _1: tr_1
                  }
                }
              ],
              [
                Tree$AdventOfCode.left(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_2))),
                /* Loc */{
                  _0: tll_2,
                  _1: {
                    TAG: /* L */0,
                    _0: {
                      TAG: /* L */0,
                      _0: /* Top */0,
                      _1: tr_2
                    },
                    _1: {
                      TAG: /* Leaf */0,
                      _0: 3
                    }
                  }
                }
              ]
            ]);
        Jest2$AdventOfCode.testEach2("left", left_tests, (function (result, expected) {
                expect(result).toEqual(expected);
              }));
        var right_tests = toString([
              [
                Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_1)),
                /* Loc */{
                  _0: tr_1,
                  _1: {
                    TAG: /* R */1,
                    _0: tl_1,
                    _1: /* Top */0
                  }
                }
              ],
              [
                Tree$AdventOfCode.right(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_2))),
                /* Loc */{
                  _0: trr_2,
                  _1: {
                    TAG: /* R */1,
                    _0: {
                      TAG: /* Leaf */0,
                      _0: 4
                    },
                    _1: {
                      TAG: /* R */1,
                      _0: tl_2,
                      _1: /* Top */0
                    }
                  }
                }
              ]
            ]);
        Jest2$AdventOfCode.testEach2("right", right_tests, (function (result, expected) {
                expect(result).toEqual(expected);
              }));
        var left_right_tests = toString([
              [
                Tree$AdventOfCode.right(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_1))),
                /* Loc */{
                  _0: {
                    TAG: /* Leaf */0,
                    _0: 2
                  },
                  _1: {
                    TAG: /* R */1,
                    _0: {
                      TAG: /* Leaf */0,
                      _0: 1
                    },
                    _1: {
                      TAG: /* L */0,
                      _0: /* Top */0,
                      _1: tr_1
                    }
                  }
                }
              ],
              [
                Tree$AdventOfCode.left(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_1))),
                /* Loc */{
                  _0: {
                    TAG: /* Leaf */0,
                    _0: 3
                  },
                  _1: {
                    TAG: /* L */0,
                    _0: {
                      TAG: /* R */1,
                      _0: tl_1,
                      _1: /* Top */0
                    },
                    _1: {
                      TAG: /* Leaf */0,
                      _0: 4
                    }
                  }
                }
              ],
              [
                Tree$AdventOfCode.right(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_2))),
                /* Loc */{
                  _0: {
                    TAG: /* Leaf */0,
                    _0: 3
                  },
                  _1: {
                    TAG: /* R */1,
                    _0: tll_2,
                    _1: {
                      TAG: /* L */0,
                      _0: /* Top */0,
                      _1: tr_2
                    }
                  }
                }
              ],
              [
                Tree$AdventOfCode.left(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_2))),
                /* Loc */{
                  _0: {
                    TAG: /* Leaf */0,
                    _0: 4
                  },
                  _1: {
                    TAG: /* L */0,
                    _0: {
                      TAG: /* R */1,
                      _0: tl_2,
                      _1: /* Top */0
                    },
                    _1: trr_2
                  }
                }
              ]
            ]);
        Jest2$AdventOfCode.testEach2("left right", left_right_tests, (function (result, expected) {
                expect(result).toEqual(expected);
              }));
        var upmost_tests = toString([
              [
                Tree$AdventOfCode.upmost(Tree$AdventOfCode.right(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_1)))),
                /* Loc */{
                  _0: tree_1,
                  _1: /* Top */0
                }
              ],
              [
                Tree$AdventOfCode.upmost(Tree$AdventOfCode.right(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_1)))),
                /* Loc */{
                  _0: tree_1,
                  _1: /* Top */0
                }
              ],
              [
                Tree$AdventOfCode.upmost(Tree$AdventOfCode.left(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_1)))),
                /* Loc */{
                  _0: tree_1,
                  _1: /* Top */0
                }
              ],
              [
                Tree$AdventOfCode.upmost(Tree$AdventOfCode.left(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_1)))),
                /* Loc */{
                  _0: tree_1,
                  _1: /* Top */0
                }
              ],
              [
                Tree$AdventOfCode.upmost(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_2))),
                /* Loc */{
                  _0: tree_2,
                  _1: /* Top */0
                }
              ],
              [
                Tree$AdventOfCode.upmost(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_2))),
                /* Loc */{
                  _0: tree_2,
                  _1: /* Top */0
                }
              ],
              [
                Tree$AdventOfCode.upmost(Tree$AdventOfCode.left(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_2)))),
                /* Loc */{
                  _0: tree_2,
                  _1: /* Top */0
                }
              ],
              [
                Tree$AdventOfCode.upmost(Tree$AdventOfCode.right(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_2)))),
                /* Loc */{
                  _0: tree_2,
                  _1: /* Top */0
                }
              ],
              [
                Tree$AdventOfCode.upmost(Tree$AdventOfCode.left(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_2)))),
                /* Loc */{
                  _0: tree_2,
                  _1: /* Top */0
                }
              ],
              [
                Tree$AdventOfCode.upmost(Tree$AdventOfCode.right(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_2)))),
                /* Loc */{
                  _0: tree_2,
                  _1: /* Top */0
                }
              ]
            ]);
        Jest2$AdventOfCode.testEach2("upmost", upmost_tests, (function (result, expected) {
                expect(result).toEqual(expected);
              }));
        var up_tests = toString([
              [
                Tree$AdventOfCode.up(Tree$AdventOfCode.right(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_1)))),
                /* Loc */{
                  _0: tl_1,
                  _1: {
                    TAG: /* L */0,
                    _0: /* Top */0,
                    _1: tr_1
                  }
                }
              ],
              [
                Tree$AdventOfCode.up(Tree$AdventOfCode.left(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_1)))),
                /* Loc */{
                  _0: tr_1,
                  _1: {
                    TAG: /* R */1,
                    _0: tl_1,
                    _1: /* Top */0
                  }
                }
              ],
              [
                Tree$AdventOfCode.up(Tree$AdventOfCode.right(Tree$AdventOfCode.left(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_2))))),
                /* Loc */{
                  _0: tll_2,
                  _1: {
                    TAG: /* L */0,
                    _0: {
                      TAG: /* L */0,
                      _0: /* Top */0,
                      _1: tr_2
                    },
                    _1: {
                      TAG: /* Leaf */0,
                      _0: 3
                    }
                  }
                }
              ],
              [
                Tree$AdventOfCode.up(Tree$AdventOfCode.left(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_2)))),
                /* Loc */{
                  _0: tr_2,
                  _1: {
                    TAG: /* R */1,
                    _0: tl_2,
                    _1: /* Top */0
                  }
                }
              ]
            ]);
        Jest2$AdventOfCode.testEach2("up", up_tests, (function (result, expected) {
                expect(result).toEqual(expected);
              }));
        var modify_tests = toString([
              [
                Tree$AdventOfCode.modify(Tree$AdventOfCode.right(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_1))), (function (param) {
                        return {
                                TAG: /* Leaf */0,
                                _0: 5
                              };
                      })),
                /* Loc */{
                  _0: {
                    TAG: /* Leaf */0,
                    _0: 5
                  },
                  _1: {
                    TAG: /* R */1,
                    _0: {
                      TAG: /* Leaf */0,
                      _0: 1
                    },
                    _1: {
                      TAG: /* L */0,
                      _0: /* Top */0,
                      _1: tr_1
                    }
                  }
                }
              ],
              [
                Tree$AdventOfCode.modify(Tree$AdventOfCode.left(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_1))), (function (param) {
                        return {
                                TAG: /* Pair */1,
                                _0: {
                                  TAG: /* Leaf */0,
                                  _0: 6
                                },
                                _1: {
                                  TAG: /* Leaf */0,
                                  _0: 7
                                }
                              };
                      })),
                /* Loc */{
                  _0: {
                    TAG: /* Pair */1,
                    _0: {
                      TAG: /* Leaf */0,
                      _0: 6
                    },
                    _1: {
                      TAG: /* Leaf */0,
                      _0: 7
                    }
                  },
                  _1: {
                    TAG: /* L */0,
                    _0: {
                      TAG: /* R */1,
                      _0: tl_1,
                      _1: /* Top */0
                    },
                    _1: {
                      TAG: /* Leaf */0,
                      _0: 4
                    }
                  }
                }
              ],
              [
                Tree$AdventOfCode.modify(Tree$AdventOfCode.right(Tree$AdventOfCode.left(Tree$AdventOfCode.top(tree_2))), (function (param) {
                        return {
                                TAG: /* Leaf */0,
                                _0: 9
                              };
                      })),
                /* Loc */{
                  _0: {
                    TAG: /* Leaf */0,
                    _0: 9
                  },
                  _1: {
                    TAG: /* R */1,
                    _0: tll_2,
                    _1: {
                      TAG: /* L */0,
                      _0: /* Top */0,
                      _1: tr_2
                    }
                  }
                }
              ],
              [
                Tree$AdventOfCode.modify(Tree$AdventOfCode.left(Tree$AdventOfCode.right(Tree$AdventOfCode.top(tree_2))), (function (param) {
                        return {
                                TAG: /* Pair */1,
                                _0: {
                                  TAG: /* Leaf */0,
                                  _0: 10
                                },
                                _1: {
                                  TAG: /* Leaf */0,
                                  _0: 11
                                }
                              };
                      })),
                /* Loc */{
                  _0: {
                    TAG: /* Pair */1,
                    _0: {
                      TAG: /* Leaf */0,
                      _0: 10
                    },
                    _1: {
                      TAG: /* Leaf */0,
                      _0: 11
                    }
                  },
                  _1: {
                    TAG: /* L */0,
                    _0: {
                      TAG: /* R */1,
                      _0: tl_2,
                      _1: /* Top */0
                    },
                    _1: trr_2
                  }
                }
              ]
            ]);
        return Jest2$AdventOfCode.testEach2("modify", modify_tests, (function (result, expected) {
                      expect(result).toEqual(expected);
                    }));
      }));

export {
  
}
/*  Not a pure module */
