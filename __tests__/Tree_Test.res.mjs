// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.res.mjs";
import * as List from "rescript/lib/es6/List.js";
import * as Tree from "../src/Tree.res.mjs";

Jest.describe("Tree", () => {
  let tl_1 = {
    TAG: "Pair",
    _0: {
      TAG: "Leaf",
      _0: 1
    },
    _1: {
      TAG: "Leaf",
      _0: 2
    }
  };
  let tr_1 = {
    TAG: "Pair",
    _0: {
      TAG: "Leaf",
      _0: 3
    },
    _1: {
      TAG: "Leaf",
      _0: 4
    }
  };
  let tree_1 = {
    TAG: "Pair",
    _0: tl_1,
    _1: tr_1
  };
  let tll_2 = {
    TAG: "Pair",
    _0: {
      TAG: "Leaf",
      _0: 1
    },
    _1: {
      TAG: "Leaf",
      _0: 2
    }
  };
  let tl_2_1 = {
    TAG: "Leaf",
    _0: 3
  };
  let tl_2 = {
    TAG: "Pair",
    _0: tll_2,
    _1: tl_2_1
  };
  let trr_2 = {
    TAG: "Pair",
    _0: {
      TAG: "Leaf",
      _0: 5
    },
    _1: {
      TAG: "Leaf",
      _0: 6
    }
  };
  let tr_2_0 = {
    TAG: "Leaf",
    _0: 4
  };
  let tr_2 = {
    TAG: "Pair",
    _0: tr_2_0,
    _1: trr_2
  };
  let tree_2 = {
    TAG: "Pair",
    _0: tl_2,
    _1: tr_2
  };
  let toString = __x => List.map(__x, param => [
    Tree.locToString(param[0]),
    Tree.locToString(param[1])
  ]);
  let left_tests = toString({
    hd: [
      Tree.left(Tree.top(tree_1)),
      {
        TAG: "Loc",
        _0: tl_1,
        _1: {
          TAG: "L",
          _0: "Top",
          _1: tr_1
        }
      }
    ],
    tl: {
      hd: [
        Tree.left(Tree.left(Tree.top(tree_2))),
        {
          TAG: "Loc",
          _0: tll_2,
          _1: {
            TAG: "L",
            _0: {
              TAG: "L",
              _0: "Top",
              _1: tr_2
            },
            _1: {
              TAG: "Leaf",
              _0: 3
            }
          }
        }
      ],
      tl: /* [] */0
    }
  });
  Jest.testAll("left", left_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let right_tests = toString({
    hd: [
      Tree.right(Tree.top(tree_1)),
      {
        TAG: "Loc",
        _0: tr_1,
        _1: {
          TAG: "R",
          _0: tl_1,
          _1: "Top"
        }
      }
    ],
    tl: {
      hd: [
        Tree.right(Tree.right(Tree.top(tree_2))),
        {
          TAG: "Loc",
          _0: trr_2,
          _1: {
            TAG: "R",
            _0: {
              TAG: "Leaf",
              _0: 4
            },
            _1: {
              TAG: "R",
              _0: tl_2,
              _1: "Top"
            }
          }
        }
      ],
      tl: /* [] */0
    }
  });
  Jest.testAll("right", right_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let left_right_tests = toString({
    hd: [
      Tree.right(Tree.left(Tree.top(tree_1))),
      {
        TAG: "Loc",
        _0: {
          TAG: "Leaf",
          _0: 2
        },
        _1: {
          TAG: "R",
          _0: {
            TAG: "Leaf",
            _0: 1
          },
          _1: {
            TAG: "L",
            _0: "Top",
            _1: tr_1
          }
        }
      }
    ],
    tl: {
      hd: [
        Tree.left(Tree.right(Tree.top(tree_1))),
        {
          TAG: "Loc",
          _0: {
            TAG: "Leaf",
            _0: 3
          },
          _1: {
            TAG: "L",
            _0: {
              TAG: "R",
              _0: tl_1,
              _1: "Top"
            },
            _1: {
              TAG: "Leaf",
              _0: 4
            }
          }
        }
      ],
      tl: {
        hd: [
          Tree.right(Tree.left(Tree.top(tree_2))),
          {
            TAG: "Loc",
            _0: {
              TAG: "Leaf",
              _0: 3
            },
            _1: {
              TAG: "R",
              _0: tll_2,
              _1: {
                TAG: "L",
                _0: "Top",
                _1: tr_2
              }
            }
          }
        ],
        tl: {
          hd: [
            Tree.left(Tree.right(Tree.top(tree_2))),
            {
              TAG: "Loc",
              _0: {
                TAG: "Leaf",
                _0: 4
              },
              _1: {
                TAG: "L",
                _0: {
                  TAG: "R",
                  _0: tl_2,
                  _1: "Top"
                },
                _1: trr_2
              }
            }
          ],
          tl: /* [] */0
        }
      }
    }
  });
  Jest.testAll("left right", left_right_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let upmost_tests = toString({
    hd: [
      Tree.upmost(Tree.right(Tree.left(Tree.top(tree_1)))),
      {
        TAG: "Loc",
        _0: tree_1,
        _1: "Top"
      }
    ],
    tl: {
      hd: [
        Tree.upmost(Tree.right(Tree.right(Tree.top(tree_1)))),
        {
          TAG: "Loc",
          _0: tree_1,
          _1: "Top"
        }
      ],
      tl: {
        hd: [
          Tree.upmost(Tree.left(Tree.left(Tree.top(tree_1)))),
          {
            TAG: "Loc",
            _0: tree_1,
            _1: "Top"
          }
        ],
        tl: {
          hd: [
            Tree.upmost(Tree.left(Tree.right(Tree.top(tree_1)))),
            {
              TAG: "Loc",
              _0: tree_1,
              _1: "Top"
            }
          ],
          tl: {
            hd: [
              Tree.upmost(Tree.left(Tree.top(tree_2))),
              {
                TAG: "Loc",
                _0: tree_2,
                _1: "Top"
              }
            ],
            tl: {
              hd: [
                Tree.upmost(Tree.right(Tree.top(tree_2))),
                {
                  TAG: "Loc",
                  _0: tree_2,
                  _1: "Top"
                }
              ],
              tl: {
                hd: [
                  Tree.upmost(Tree.left(Tree.left(Tree.top(tree_2)))),
                  {
                    TAG: "Loc",
                    _0: tree_2,
                    _1: "Top"
                  }
                ],
                tl: {
                  hd: [
                    Tree.upmost(Tree.right(Tree.left(Tree.top(tree_2)))),
                    {
                      TAG: "Loc",
                      _0: tree_2,
                      _1: "Top"
                    }
                  ],
                  tl: {
                    hd: [
                      Tree.upmost(Tree.left(Tree.right(Tree.top(tree_2)))),
                      {
                        TAG: "Loc",
                        _0: tree_2,
                        _1: "Top"
                      }
                    ],
                    tl: {
                      hd: [
                        Tree.upmost(Tree.right(Tree.right(Tree.top(tree_2)))),
                        {
                          TAG: "Loc",
                          _0: tree_2,
                          _1: "Top"
                        }
                      ],
                      tl: /* [] */0
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  });
  Jest.testAll("upmost", upmost_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let up_tests = toString({
    hd: [
      Tree.up(Tree.right(Tree.left(Tree.top(tree_1)))),
      {
        TAG: "Loc",
        _0: tl_1,
        _1: {
          TAG: "L",
          _0: "Top",
          _1: tr_1
        }
      }
    ],
    tl: {
      hd: [
        Tree.up(Tree.left(Tree.right(Tree.top(tree_1)))),
        {
          TAG: "Loc",
          _0: tr_1,
          _1: {
            TAG: "R",
            _0: tl_1,
            _1: "Top"
          }
        }
      ],
      tl: {
        hd: [
          Tree.up(Tree.right(Tree.left(Tree.left(Tree.top(tree_2))))),
          {
            TAG: "Loc",
            _0: tll_2,
            _1: {
              TAG: "L",
              _0: {
                TAG: "L",
                _0: "Top",
                _1: tr_2
              },
              _1: {
                TAG: "Leaf",
                _0: 3
              }
            }
          }
        ],
        tl: {
          hd: [
            Tree.up(Tree.left(Tree.right(Tree.top(tree_2)))),
            {
              TAG: "Loc",
              _0: tr_2,
              _1: {
                TAG: "R",
                _0: tl_2,
                _1: "Top"
              }
            }
          ],
          tl: /* [] */0
        }
      }
    }
  });
  Jest.testAll("up", up_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let modify_tests = toString({
    hd: [
      Tree.modify(Tree.right(Tree.left(Tree.top(tree_1))), param => ({
        TAG: "Leaf",
        _0: 5
      })),
      {
        TAG: "Loc",
        _0: {
          TAG: "Leaf",
          _0: 5
        },
        _1: {
          TAG: "R",
          _0: {
            TAG: "Leaf",
            _0: 1
          },
          _1: {
            TAG: "L",
            _0: "Top",
            _1: tr_1
          }
        }
      }
    ],
    tl: {
      hd: [
        Tree.modify(Tree.left(Tree.right(Tree.top(tree_1))), param => ({
          TAG: "Pair",
          _0: {
            TAG: "Leaf",
            _0: 6
          },
          _1: {
            TAG: "Leaf",
            _0: 7
          }
        })),
        {
          TAG: "Loc",
          _0: {
            TAG: "Pair",
            _0: {
              TAG: "Leaf",
              _0: 6
            },
            _1: {
              TAG: "Leaf",
              _0: 7
            }
          },
          _1: {
            TAG: "L",
            _0: {
              TAG: "R",
              _0: tl_1,
              _1: "Top"
            },
            _1: {
              TAG: "Leaf",
              _0: 4
            }
          }
        }
      ],
      tl: {
        hd: [
          Tree.modify(Tree.right(Tree.left(Tree.top(tree_2))), param => ({
            TAG: "Leaf",
            _0: 9
          })),
          {
            TAG: "Loc",
            _0: {
              TAG: "Leaf",
              _0: 9
            },
            _1: {
              TAG: "R",
              _0: tll_2,
              _1: {
                TAG: "L",
                _0: "Top",
                _1: tr_2
              }
            }
          }
        ],
        tl: {
          hd: [
            Tree.modify(Tree.left(Tree.right(Tree.top(tree_2))), param => ({
              TAG: "Pair",
              _0: {
                TAG: "Leaf",
                _0: 10
              },
              _1: {
                TAG: "Leaf",
                _0: 11
              }
            })),
            {
              TAG: "Loc",
              _0: {
                TAG: "Pair",
                _0: {
                  TAG: "Leaf",
                  _0: 10
                },
                _1: {
                  TAG: "Leaf",
                  _0: 11
                }
              },
              _1: {
                TAG: "L",
                _0: {
                  TAG: "R",
                  _0: tl_2,
                  _1: "Top"
                },
                _1: trr_2
              }
            }
          ],
          tl: /* [] */0
        }
      }
    }
  });
  Jest.testAll("modify", modify_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
});

/*  Not a pure module */
