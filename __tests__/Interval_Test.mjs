// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Interval$AdventOfCode from "../src/Interval.mjs";

Jest.describe("Interval", (function (param) {
        Jest.test("sort - ascending order", (function (param) {
                var intervals = [
                  {
                    lower: BigInt(3),
                    upper: BigInt(5)
                  },
                  {
                    lower: BigInt(1),
                    upper: BigInt(2)
                  },
                  {
                    lower: BigInt(2),
                    upper: BigInt(4)
                  }
                ];
                var result = Interval$AdventOfCode.sort(intervals);
                var expected = [
                  {
                    lower: BigInt(1),
                    upper: BigInt(2)
                  },
                  {
                    lower: BigInt(2),
                    upper: BigInt(4)
                  },
                  {
                    lower: BigInt(3),
                    upper: BigInt(5)
                  }
                ];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("sort - descending order", (function (param) {
                var intervals = [
                  {
                    lower: BigInt(3),
                    upper: BigInt(5)
                  },
                  {
                    lower: BigInt(5),
                    upper: BigInt(7)
                  },
                  {
                    lower: BigInt(1),
                    upper: BigInt(2)
                  }
                ];
                var result = Interval$AdventOfCode.sort(intervals);
                var expected = [
                  {
                    lower: BigInt(1),
                    upper: BigInt(2)
                  },
                  {
                    lower: BigInt(3),
                    upper: BigInt(5)
                  },
                  {
                    lower: BigInt(5),
                    upper: BigInt(7)
                  }
                ];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("sort - same lower bounds", (function (param) {
                var intervals = [
                  {
                    lower: BigInt(1),
                    upper: BigInt(5)
                  },
                  {
                    lower: BigInt(1),
                    upper: BigInt(2)
                  },
                  {
                    lower: BigInt(1),
                    upper: BigInt(4)
                  }
                ];
                var result = Interval$AdventOfCode.sort(intervals);
                var expected = [
                  {
                    lower: BigInt(1),
                    upper: BigInt(2)
                  },
                  {
                    lower: BigInt(1),
                    upper: BigInt(4)
                  },
                  {
                    lower: BigInt(1),
                    upper: BigInt(5)
                  }
                ];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("sort - empty array", (function (param) {
                var intervals = [];
                var result = Interval$AdventOfCode.sort(intervals);
                var expected = [];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("belowNotConnected - intervals are below and not connected", (function (param) {
                var interval1_lower = BigInt(1);
                var interval1_upper = BigInt(2);
                var interval1 = {
                  lower: interval1_lower,
                  upper: interval1_upper
                };
                var interval2_lower = BigInt(4);
                var interval2_upper = BigInt(5);
                var interval2 = {
                  lower: interval2_lower,
                  upper: interval2_upper
                };
                var result = Interval$AdventOfCode.belowNotConnected(interval1, interval2);
                return Jest.Expect.toBe(Jest.Expect.expect(result), true);
              }));
        Jest.test("belowNotConnected - intervals are connected", (function (param) {
                var interval1_lower = BigInt(1);
                var interval1_upper = BigInt(2);
                var interval1 = {
                  lower: interval1_lower,
                  upper: interval1_upper
                };
                var interval2_lower = BigInt(3);
                var interval2_upper = BigInt(4);
                var interval2 = {
                  lower: interval2_lower,
                  upper: interval2_upper
                };
                var result = Interval$AdventOfCode.belowNotConnected(interval1, interval2);
                return Jest.Expect.toBe(Jest.Expect.expect(result), false);
              }));
        Jest.test("belowNotConnected - intervals are overlapping", (function (param) {
                var interval1_lower = BigInt(1);
                var interval1_upper = BigInt(3);
                var interval1 = {
                  lower: interval1_lower,
                  upper: interval1_upper
                };
                var interval2_lower = BigInt(2);
                var interval2_upper = BigInt(4);
                var interval2 = {
                  lower: interval2_lower,
                  upper: interval2_upper
                };
                var result = Interval$AdventOfCode.belowNotConnected(interval1, interval2);
                return Jest.Expect.toBe(Jest.Expect.expect(result), false);
              }));
        Jest.test("belowNotConnected - intervals are above and not connected", (function (param) {
                var interval1_lower = BigInt(4);
                var interval1_upper = BigInt(5);
                var interval1 = {
                  lower: interval1_lower,
                  upper: interval1_upper
                };
                var interval2_lower = BigInt(1);
                var interval2_upper = BigInt(2);
                var interval2 = {
                  lower: interval2_lower,
                  upper: interval2_upper
                };
                var result = Interval$AdventOfCode.belowNotConnected(interval1, interval2);
                return Jest.Expect.toBe(Jest.Expect.expect(result), false);
              }));
        Jest.test("merge - overlapping intervals", (function (param) {
                var interval1_lower = BigInt(1);
                var interval1_upper = BigInt(5);
                var interval1 = {
                  lower: interval1_lower,
                  upper: interval1_upper
                };
                var interval2_lower = BigInt(3);
                var interval2_upper = BigInt(7);
                var interval2 = {
                  lower: interval2_lower,
                  upper: interval2_upper
                };
                var result = Interval$AdventOfCode.merge(interval1, interval2);
                var expected_lower = BigInt(1);
                var expected_upper = BigInt(7);
                var expected = {
                  lower: expected_lower,
                  upper: expected_upper
                };
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("merge - non-overlapping intervals", (function (param) {
                var interval1_lower = BigInt(1);
                var interval1_upper = BigInt(2);
                var interval1 = {
                  lower: interval1_lower,
                  upper: interval1_upper
                };
                var interval2_lower = BigInt(3);
                var interval2_upper = BigInt(4);
                var interval2 = {
                  lower: interval2_lower,
                  upper: interval2_upper
                };
                var result = Interval$AdventOfCode.merge(interval1, interval2);
                var expected_lower = BigInt(1);
                var expected_upper = BigInt(4);
                var expected = {
                  lower: expected_lower,
                  upper: expected_upper
                };
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("merge - identical intervals", (function (param) {
                var interval1_lower = BigInt(1);
                var interval1_upper = BigInt(5);
                var interval1 = {
                  lower: interval1_lower,
                  upper: interval1_upper
                };
                var interval2_lower = BigInt(1);
                var interval2_upper = BigInt(5);
                var interval2 = {
                  lower: interval2_lower,
                  upper: interval2_upper
                };
                var result = Interval$AdventOfCode.merge(interval1, interval2);
                var expected_lower = BigInt(1);
                var expected_upper = BigInt(5);
                var expected = {
                  lower: expected_lower,
                  upper: expected_upper
                };
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("merge - interval within another interval", (function (param) {
                var interval1_lower = BigInt(1);
                var interval1_upper = BigInt(5);
                var interval1 = {
                  lower: interval1_lower,
                  upper: interval1_upper
                };
                var interval2_lower = BigInt(2);
                var interval2_upper = BigInt(4);
                var interval2 = {
                  lower: interval2_lower,
                  upper: interval2_upper
                };
                var result = Interval$AdventOfCode.merge(interval1, interval2);
                var expected_lower = BigInt(1);
                var expected_upper = BigInt(5);
                var expected = {
                  lower: expected_lower,
                  upper: expected_upper
                };
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("sortAndMergeOverlaps - overlapping intervals", (function (param) {
                var intervals = [
                  {
                    lower: BigInt(3),
                    upper: BigInt(7)
                  },
                  {
                    lower: BigInt(1),
                    upper: BigInt(5)
                  }
                ];
                var result = Interval$AdventOfCode.sortAndMergeOverlaps(intervals);
                var expected = [{
                    lower: BigInt(1),
                    upper: BigInt(7)
                  }];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("sortAndMergeOverlaps - non-overlapping connecting intervals", (function (param) {
                var intervals = [
                  {
                    lower: BigInt(1),
                    upper: BigInt(2)
                  },
                  {
                    lower: BigInt(3),
                    upper: BigInt(4)
                  }
                ];
                var result = Interval$AdventOfCode.sortAndMergeOverlaps(intervals);
                var expected = [{
                    lower: BigInt(1),
                    upper: BigInt(4)
                  }];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("sortAndMergeOverlaps - non-overlapping non-connecting intervals", (function (param) {
                var intervals = [
                  {
                    lower: BigInt(4),
                    upper: BigInt(5)
                  },
                  {
                    lower: BigInt(1),
                    upper: BigInt(2)
                  }
                ];
                var result = Interval$AdventOfCode.sortAndMergeOverlaps(intervals);
                var expected = [
                  {
                    lower: BigInt(1),
                    upper: BigInt(2)
                  },
                  {
                    lower: BigInt(4),
                    upper: BigInt(5)
                  }
                ];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("sortAndMergeOverlaps - identical intervals", (function (param) {
                var intervals = [
                  {
                    lower: BigInt(1),
                    upper: BigInt(5)
                  },
                  {
                    lower: BigInt(1),
                    upper: BigInt(5)
                  }
                ];
                var result = Interval$AdventOfCode.sortAndMergeOverlaps(intervals);
                var expected = [{
                    lower: BigInt(1),
                    upper: BigInt(5)
                  }];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
        Jest.test("sortAndMergeOverlaps - interval within another interval", (function (param) {
                var intervals = [
                  {
                    lower: BigInt(1),
                    upper: BigInt(5)
                  },
                  {
                    lower: BigInt(2),
                    upper: BigInt(4)
                  }
                ];
                var result = Interval$AdventOfCode.sortAndMergeOverlaps(intervals);
                var expected = [{
                    lower: BigInt(1),
                    upper: BigInt(5)
                  }];
                return Jest.Expect.toEqual(Jest.Expect.expect(result), expected);
              }));
      }));

export {
  
}
/*  Not a pure module */
