// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.bs.js");
var Belt_Option = require("rescript/lib/js/belt_Option.js");
var Array2D$AdventOfCode = require("../src/Array2D.bs.js");
var AOC2020_Day4_Data$AdventOfCode = require("../src/2020/Day4/AOC2020_Day4_Data.bs.js");
var AOC2020_Day4_Data_Sample$AdventOfCode = require("../src/2020/Day4/AOC2020_Day4_Data_Sample.bs.js");

Jest.describe("Array2D - make / set / get", (function (param) {
        Jest.test("make - int", (function (param) {
                var a = Array2D$AdventOfCode.make([
                      2,
                      3
                    ], -1);
                [
                  Array2D$AdventOfCode.set(a, [
                        0,
                        0
                      ], 4),
                  Array2D$AdventOfCode.set(a, [
                        0,
                        1
                      ], 5),
                  Array2D$AdventOfCode.set(a, [
                        0,
                        2
                      ], 6),
                  Array2D$AdventOfCode.set(a, [
                        1,
                        0
                      ], 7),
                  Array2D$AdventOfCode.set(a, [
                        1,
                        1
                      ], 8),
                  Array2D$AdventOfCode.set(a, [
                        1,
                        2
                      ], 9)
                ];
                var expected = [
                  [
                    4,
                    5,
                    6
                  ],
                  [
                    7,
                    8,
                    9
                  ]
                ];
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(a));
              }));
        Jest.test("make - string", (function (param) {
                var a = Array2D$AdventOfCode.make([
                      2,
                      3
                    ], "");
                [
                  Array2D$AdventOfCode.set(a, [
                        0,
                        0
                      ], "a"),
                  Array2D$AdventOfCode.set(a, [
                        0,
                        1
                      ], "b"),
                  Array2D$AdventOfCode.set(a, [
                        0,
                        2
                      ], "c"),
                  Array2D$AdventOfCode.set(a, [
                        1,
                        0
                      ], "d"),
                  Array2D$AdventOfCode.set(a, [
                        1,
                        1
                      ], "e"),
                  Array2D$AdventOfCode.set(a, [
                        1,
                        2
                      ], "f")
                ];
                var expected = [
                  [
                    "a",
                    "b",
                    "c"
                  ],
                  [
                    "d",
                    "e",
                    "f"
                  ]
                ];
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(a));
              }));
        return Jest.test("get - string", (function (param) {
                      var a = Array2D$AdventOfCode.make([
                            2,
                            2
                          ], "");
                      [
                        Array2D$AdventOfCode.set(a, [
                              0,
                              0
                            ], "e"),
                        Array2D$AdventOfCode.set(a, [
                              0,
                              1
                            ], "f"),
                        Array2D$AdventOfCode.set(a, [
                              1,
                              0
                            ], "g"),
                        Array2D$AdventOfCode.set(a, [
                              1,
                              1
                            ], "h")
                      ];
                      var result = [
                        Belt_Option.getExn(Array2D$AdventOfCode.get(a, [
                                  0,
                                  0
                                ])),
                        Belt_Option.getExn(Array2D$AdventOfCode.get(a, [
                                  0,
                                  1
                                ])),
                        Belt_Option.getExn(Array2D$AdventOfCode.get(a, [
                                  1,
                                  0
                                ])),
                        Belt_Option.getExn(Array2D$AdventOfCode.get(a, [
                                  1,
                                  1
                                ]))
                      ];
                      var expected = [
                        "e",
                        "f",
                        "g",
                        "h"
                      ];
                      return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
                    }));
      }));

Jest.describe("Array2D - keep / map / getXYEquals / crop", (function (param) {
        var a = Array2D$AdventOfCode.make([
              3,
              4
            ], -1);
        [
          Array2D$AdventOfCode.set(a, [
                0,
                0
              ], 355),
          Array2D$AdventOfCode.set(a, [
                0,
                1
              ], 404),
          Array2D$AdventOfCode.set(a, [
                0,
                2
              ], 320),
          Array2D$AdventOfCode.set(a, [
                0,
                3
              ], 744),
          Array2D$AdventOfCode.set(a, [
                1,
                0
              ], 907),
          Array2D$AdventOfCode.set(a, [
                1,
                1
              ], 559),
          Array2D$AdventOfCode.set(a, [
                1,
                2
              ], 891),
          Array2D$AdventOfCode.set(a, [
                1,
                3
              ], 97),
          Array2D$AdventOfCode.set(a, [
                2,
                0
              ], 707),
          Array2D$AdventOfCode.set(a, [
                2,
                1
              ], 514),
          Array2D$AdventOfCode.set(a, [
                2,
                2
              ], 982),
          Array2D$AdventOfCode.set(a, [
                2,
                3
              ], 876)
        ];
        Jest.test("map - int", (function (param) {
                var result = Array2D$AdventOfCode.map(a, (function (x) {
                        return (x << 1);
                      }));
                var expected = [
                  [
                    710,
                    808,
                    640,
                    1488
                  ],
                  [
                    1814,
                    1118,
                    1782,
                    194
                  ],
                  [
                    1414,
                    1028,
                    1964,
                    1752
                  ]
                ];
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
              }));
        Jest.test("getXEquals - int", (function (param) {
                var result = Array2D$AdventOfCode.getXEquals(a, 1);
                var expected = [
                  907,
                  559,
                  891,
                  97
                ];
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
              }));
        Jest.test("getYEquals - int", (function (param) {
                var result = [
                  Array2D$AdventOfCode.getYEquals(a, 0),
                  Array2D$AdventOfCode.getYEquals(a, 2)
                ];
                var expected = [
                  [
                    355,
                    907,
                    707
                  ],
                  [
                    320,
                    891,
                    982
                  ]
                ];
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
              }));
        Jest.test("corp 1 - int", (function (param) {
                var result = Array2D$AdventOfCode.crop(a, [
                      1,
                      2
                    ], 1, 2);
                var expected = [[
                    891,
                    97
                  ]];
                return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
              }));
        return Jest.test("corp 2 - int", (function (param) {
                      var result = Array2D$AdventOfCode.crop(a, [
                            1,
                            1
                          ], 2, 2);
                      var expected = [
                        [
                          559,
                          891
                        ],
                        [
                          514,
                          982
                        ]
                      ];
                      return Jest.Expect.toEqual(expected, Jest.Expect.expect(result));
                    }));
      }));

var data = AOC2020_Day4_Data$AdventOfCode.data;

var testData = AOC2020_Day4_Data_Sample$AdventOfCode.data;

exports.data = data;
exports.testData = testData;
/*  Not a pure module */
