// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Curry from "rescript/lib/es6/curry.js";
import * as Jest2$AdventOfCode from "../interop/Jest2.mjs";
import * as Stack$AdventOfCode from "../src/Stack.mjs";

describe("Stack Float", (function () {
        var push_tests = [
          [
            Stack$AdventOfCode.StackFloat.push(Stack$AdventOfCode.StackFloat.start, 79.0),
            /* Contents */{
              _0: {
                hd: 79.0,
                tl: /* [] */0
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.push(Stack$AdventOfCode.StackFloat.push(Stack$AdventOfCode.StackFloat.start, 724.09), 433.0),
            /* Contents */{
              _0: {
                hd: 433.0,
                tl: {
                  hd: 724.09,
                  tl: /* [] */0
                }
              }
            }
          ]
        ];
        Jest2$AdventOfCode.testEach2("push", push_tests, (function (result, expected) {
                expect(result).toEqual(expected);
              }));
        var pop_tests = [
          [
            Stack$AdventOfCode.StackFloat.pop(Stack$AdventOfCode.StackFloat.four(Stack$AdventOfCode.StackFloat.three(Stack$AdventOfCode.StackFloat.one(Stack$AdventOfCode.StackFloat.start)))),
            [
              4.0,
              /* Contents */{
                _0: {
                  hd: 3.0,
                  tl: {
                    hd: 1.0,
                    tl: /* [] */0
                  }
                }
              }
            ]
          ],
          [
            Stack$AdventOfCode.StackFloat.pop(Stack$AdventOfCode.StackFloat.two(Stack$AdventOfCode.StackFloat.five(Stack$AdventOfCode.StackFloat.start))),
            [
              2.0,
              /* Contents */{
                _0: {
                  hd: 5.0,
                  tl: /* [] */0
                }
              }
            ]
          ]
        ];
        Jest2$AdventOfCode.testEach2("pop", pop_tests, (function (result, expected) {
                expect(result).toEqual(expected);
              }));
        var __x = Stack$AdventOfCode.StackFloat.two(Stack$AdventOfCode.StackFloat.five(Stack$AdventOfCode.StackFloat.one(Stack$AdventOfCode.StackFloat.start)));
        var __x$1 = Stack$AdventOfCode.StackFloat.four(Stack$AdventOfCode.StackFloat.three(Stack$AdventOfCode.StackFloat.start));
        var core_tests = [
          [
            Stack$AdventOfCode.StackFloat.binary((function (x, y) {
                    return x - y + 944.0;
                  }), __x),
            /* Contents */{
              _0: {
                hd: 947.0,
                tl: {
                  hd: 1.0,
                  tl: /* [] */0
                }
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.unary((function (x) {
                    return x * 522.0;
                  }), __x$1),
            /* Contents */{
              _0: {
                hd: 2088.0,
                tl: {
                  hd: 3.0,
                  tl: /* [] */0
                }
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.dup(Stack$AdventOfCode.StackFloat.four(Stack$AdventOfCode.StackFloat.five(Stack$AdventOfCode.StackFloat.start))),
            /* Contents */{
              _0: {
                hd: 4.0,
                tl: {
                  hd: 4.0,
                  tl: {
                    hd: 5.0,
                    tl: /* [] */0
                  }
                }
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.mul(Stack$AdventOfCode.StackFloat.dup(Stack$AdventOfCode.StackFloat.three(Stack$AdventOfCode.StackFloat.five(Stack$AdventOfCode.StackFloat.start)))),
            /* Contents */{
              _0: {
                hd: 9.0,
                tl: {
                  hd: 5.0,
                  tl: /* [] */0
                }
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.mul(Stack$AdventOfCode.StackFloat.dup(Stack$AdventOfCode.StackFloat.two(Stack$AdventOfCode.StackFloat.start))),
            /* Contents */{
              _0: {
                hd: 4.0,
                tl: /* [] */0
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.add(Stack$AdventOfCode.StackFloat.dup(Stack$AdventOfCode.StackFloat.swap(Stack$AdventOfCode.StackFloat.three(Stack$AdventOfCode.StackFloat.five(Stack$AdventOfCode.StackFloat.start))))),
            /* Contents */{
              _0: {
                hd: 10.0,
                tl: {
                  hd: 3.0,
                  tl: /* [] */0
                }
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.add(Stack$AdventOfCode.StackFloat.dup(Stack$AdventOfCode.StackFloat.drop(Stack$AdventOfCode.StackFloat.three(Stack$AdventOfCode.StackFloat.four(Stack$AdventOfCode.StackFloat.start))))),
            /* Contents */{
              _0: {
                hd: 8.0,
                tl: /* [] */0
              }
            }
          ]
        ];
        Jest2$AdventOfCode.testEach2("core", core_tests, (function (result, expected) {
                expect(result).toEqual(expected);
              }));
        var math_tests = [
          [
            Stack$AdventOfCode.StackFloat.div(Stack$AdventOfCode.StackFloat.two(Stack$AdventOfCode.StackFloat.three(Stack$AdventOfCode.StackFloat.start))),
            /* Contents */{
              _0: {
                hd: 1.5,
                tl: /* [] */0
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.sub(Stack$AdventOfCode.StackFloat.five(Stack$AdventOfCode.StackFloat.two(Stack$AdventOfCode.StackFloat.start))),
            /* Contents */{
              _0: {
                hd: -3.0,
                tl: /* [] */0
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.sub(Stack$AdventOfCode.StackFloat.three(Stack$AdventOfCode.StackFloat.add(Stack$AdventOfCode.StackFloat.two(Stack$AdventOfCode.StackFloat.one(Stack$AdventOfCode.StackFloat.start))))),
            /* Contents */{
              _0: {
                hd: 0.0,
                tl: /* [] */0
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.neg(Stack$AdventOfCode.StackFloat.three(Stack$AdventOfCode.StackFloat.start)),
            /* Contents */{
              _0: {
                hd: -3.0,
                tl: /* [] */0
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.two(Stack$AdventOfCode.StackFloat.start),
            /* Contents */{
              _0: {
                hd: 2.0,
                tl: /* [] */0
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.dup(Stack$AdventOfCode.StackFloat.two(Stack$AdventOfCode.StackFloat.start)),
            /* Contents */{
              _0: {
                hd: 2.0,
                tl: {
                  hd: 2.0,
                  tl: /* [] */0
                }
              }
            }
          ],
          [
            Stack$AdventOfCode.StackFloat.mul(Stack$AdventOfCode.StackFloat.dup(Stack$AdventOfCode.StackFloat.three(Stack$AdventOfCode.StackFloat.start))),
            /* Contents */{
              _0: {
                hd: 9.0,
                tl: /* [] */0
              }
            }
          ],
          [
            Curry._1(Stack$AdventOfCode.StackFloat.square, Stack$AdventOfCode.StackFloat.five(Stack$AdventOfCode.StackFloat.three(Stack$AdventOfCode.StackFloat.start))),
            /* Contents */{
              _0: {
                hd: 25.0,
                tl: {
                  hd: 3.0,
                  tl: /* [] */0
                }
              }
            }
          ],
          [
            Curry._1(Stack$AdventOfCode.StackFloat.cube, Stack$AdventOfCode.StackFloat.four(Stack$AdventOfCode.StackFloat.one(Stack$AdventOfCode.StackFloat.start))),
            /* Contents */{
              _0: {
                hd: 64.0,
                tl: {
                  hd: 1.0,
                  tl: /* [] */0
                }
              }
            }
          ],
          [
            Curry._1(Stack$AdventOfCode.StackFloat.sum_numbers_upto, Curry._1(Stack$AdventOfCode.StackFloat.square, Stack$AdventOfCode.StackFloat.three(Stack$AdventOfCode.StackFloat.start))),
            /* Contents */{
              _0: {
                hd: 45.0,
                tl: /* [] */0
              }
            }
          ]
        ];
        return Jest2$AdventOfCode.testEach2("math", math_tests, (function (result, expected) {
                      expect(result).toEqual(expected);
                    }));
      }));

var S;

export {
  S ,
}
/*  Not a pure module */
