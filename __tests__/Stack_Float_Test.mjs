// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Stack from "../src/Stack.mjs";

Jest.describe("Stack Float", () => {
  let push_tests_0 = [
    Stack.StackFloat.push(Stack.StackFloat.start, 79.0),
    {
      TAG: "Contents",
      _0: {
        hd: 79.0,
        tl: /* [] */0
      }
    }
  ];
  let push_tests_1 = {
    hd: [
      Stack.StackFloat.push(Stack.StackFloat.push(Stack.StackFloat.start, 724.09), 433.0),
      {
        TAG: "Contents",
        _0: {
          hd: 433.0,
          tl: {
            hd: 724.09,
            tl: /* [] */0
          }
        }
      }
    ],
    tl: /* [] */0
  };
  let push_tests = {
    hd: push_tests_0,
    tl: push_tests_1
  };
  Jest.testAll("push", push_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let pop_tests_0 = [
    Stack.StackFloat.pop(Stack.StackFloat.four(Stack.StackFloat.three(Stack.StackFloat.one(Stack.StackFloat.start)))),
    [
      4.0,
      {
        TAG: "Contents",
        _0: {
          hd: 3.0,
          tl: {
            hd: 1.0,
            tl: /* [] */0
          }
        }
      }
    ]
  ];
  let pop_tests_1 = {
    hd: [
      Stack.StackFloat.pop(Stack.StackFloat.two(Stack.StackFloat.five(Stack.StackFloat.start))),
      [
        2.0,
        {
          TAG: "Contents",
          _0: {
            hd: 5.0,
            tl: /* [] */0
          }
        }
      ]
    ],
    tl: /* [] */0
  };
  let pop_tests = {
    hd: pop_tests_0,
    tl: pop_tests_1
  };
  Jest.testAll("pop", pop_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let __x = Stack.StackFloat.two(Stack.StackFloat.five(Stack.StackFloat.one(Stack.StackFloat.start)));
  let __x$1 = Stack.StackFloat.four(Stack.StackFloat.three(Stack.StackFloat.start));
  let core_tests_0 = [
    Stack.StackFloat.binary((x, y) => x - y + 944.0, __x),
    {
      TAG: "Contents",
      _0: {
        hd: 947.0,
        tl: {
          hd: 1.0,
          tl: /* [] */0
        }
      }
    }
  ];
  let core_tests_1 = {
    hd: [
      Stack.StackFloat.unary(x => x * 522.0, __x$1),
      {
        TAG: "Contents",
        _0: {
          hd: 2088.0,
          tl: {
            hd: 3.0,
            tl: /* [] */0
          }
        }
      }
    ],
    tl: {
      hd: [
        Stack.StackFloat.dup(Stack.StackFloat.four(Stack.StackFloat.five(Stack.StackFloat.start))),
        {
          TAG: "Contents",
          _0: {
            hd: 4.0,
            tl: {
              hd: 4.0,
              tl: {
                hd: 5.0,
                tl: /* [] */0
              }
            }
          }
        }
      ],
      tl: {
        hd: [
          Stack.StackFloat.mul(Stack.StackFloat.dup(Stack.StackFloat.three(Stack.StackFloat.five(Stack.StackFloat.start)))),
          {
            TAG: "Contents",
            _0: {
              hd: 9.0,
              tl: {
                hd: 5.0,
                tl: /* [] */0
              }
            }
          }
        ],
        tl: {
          hd: [
            Stack.StackFloat.mul(Stack.StackFloat.dup(Stack.StackFloat.two(Stack.StackFloat.start))),
            {
              TAG: "Contents",
              _0: {
                hd: 4.0,
                tl: /* [] */0
              }
            }
          ],
          tl: {
            hd: [
              Stack.StackFloat.add(Stack.StackFloat.dup(Stack.StackFloat.swap(Stack.StackFloat.three(Stack.StackFloat.five(Stack.StackFloat.start))))),
              {
                TAG: "Contents",
                _0: {
                  hd: 10.0,
                  tl: {
                    hd: 3.0,
                    tl: /* [] */0
                  }
                }
              }
            ],
            tl: {
              hd: [
                Stack.StackFloat.add(Stack.StackFloat.dup(Stack.StackFloat.drop(Stack.StackFloat.three(Stack.StackFloat.four(Stack.StackFloat.start))))),
                {
                  TAG: "Contents",
                  _0: {
                    hd: 8.0,
                    tl: /* [] */0
                  }
                }
              ],
              tl: /* [] */0
            }
          }
        }
      }
    }
  };
  let core_tests = {
    hd: core_tests_0,
    tl: core_tests_1
  };
  Jest.testAll("core", core_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
  let math_tests_0 = [
    Stack.StackFloat.div(Stack.StackFloat.two(Stack.StackFloat.three(Stack.StackFloat.start))),
    {
      TAG: "Contents",
      _0: {
        hd: 1.5,
        tl: /* [] */0
      }
    }
  ];
  let math_tests_1 = {
    hd: [
      Stack.StackFloat.sub(Stack.StackFloat.five(Stack.StackFloat.two(Stack.StackFloat.start))),
      {
        TAG: "Contents",
        _0: {
          hd: -3.0,
          tl: /* [] */0
        }
      }
    ],
    tl: {
      hd: [
        Stack.StackFloat.sub(Stack.StackFloat.three(Stack.StackFloat.add(Stack.StackFloat.two(Stack.StackFloat.one(Stack.StackFloat.start))))),
        {
          TAG: "Contents",
          _0: {
            hd: 0.0,
            tl: /* [] */0
          }
        }
      ],
      tl: {
        hd: [
          Stack.StackFloat.neg(Stack.StackFloat.three(Stack.StackFloat.start)),
          {
            TAG: "Contents",
            _0: {
              hd: -3.0,
              tl: /* [] */0
            }
          }
        ],
        tl: {
          hd: [
            Stack.StackFloat.two(Stack.StackFloat.start),
            {
              TAG: "Contents",
              _0: {
                hd: 2.0,
                tl: /* [] */0
              }
            }
          ],
          tl: {
            hd: [
              Stack.StackFloat.dup(Stack.StackFloat.two(Stack.StackFloat.start)),
              {
                TAG: "Contents",
                _0: {
                  hd: 2.0,
                  tl: {
                    hd: 2.0,
                    tl: /* [] */0
                  }
                }
              }
            ],
            tl: {
              hd: [
                Stack.StackFloat.mul(Stack.StackFloat.dup(Stack.StackFloat.three(Stack.StackFloat.start))),
                {
                  TAG: "Contents",
                  _0: {
                    hd: 9.0,
                    tl: /* [] */0
                  }
                }
              ],
              tl: {
                hd: [
                  Stack.StackFloat.square(Stack.StackFloat.five(Stack.StackFloat.three(Stack.StackFloat.start))),
                  {
                    TAG: "Contents",
                    _0: {
                      hd: 25.0,
                      tl: {
                        hd: 3.0,
                        tl: /* [] */0
                      }
                    }
                  }
                ],
                tl: {
                  hd: [
                    Stack.StackFloat.cube(Stack.StackFloat.four(Stack.StackFloat.one(Stack.StackFloat.start))),
                    {
                      TAG: "Contents",
                      _0: {
                        hd: 64.0,
                        tl: {
                          hd: 1.0,
                          tl: /* [] */0
                        }
                      }
                    }
                  ],
                  tl: {
                    hd: [
                      Stack.StackFloat.sum_numbers_upto(Stack.StackFloat.square(Stack.StackFloat.three(Stack.StackFloat.start))),
                      {
                        TAG: "Contents",
                        _0: {
                          hd: 45.0,
                          tl: /* [] */0
                        }
                      }
                    ],
                    tl: /* [] */0
                  }
                }
              }
            }
          }
        }
      }
    }
  };
  let math_tests = {
    hd: math_tests_0,
    tl: math_tests_1
  };
  Jest.testAll("math", math_tests, param => Jest.Expect.toEqual(Jest.Expect.expect(param[0]), param[1]));
});

let S;

export {
  S,
}
/*  Not a pure module */
