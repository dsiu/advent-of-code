// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Jest from "@glennsl/rescript-jest/src/jest.mjs";
import * as Belt_Array from "rescript/lib/es6/belt_Array.js";
import * as Belt_SortArray from "rescript/lib/es6/belt_SortArray.js";
import * as Belt_SortArrayInt from "rescript/lib/es6/belt_SortArrayInt.js";
import * as Belt_SortArrayString from "rescript/lib/es6/belt_SortArrayString.js";
import * as Powerset$AdventOfCode from "../src/Powerset.mjs";

function intCmp(a, b) {
  return b - a | 0;
}

function sortResultInt(xs) {
  return Belt_SortArray.stableSortBy(Belt_Array.map(xs, Belt_SortArrayInt.stableSort), (function (a, b) {
                return Belt_Array.cmp(a, b, intCmp);
              }));
}

function strCmp(a, b) {
  return a.localeCompare(b) | 0;
}

function sortResultString(xs) {
  return Belt_SortArray.stableSortBy(Belt_Array.map(xs, Belt_SortArrayString.stableSort), (function (a, b) {
                return Belt_Array.cmp(a, b, strCmp);
              }));
}

Jest.describe("Powerset", (function (param) {
        var int_array_1 = [
          1,
          2,
          3
        ];
        var int_array_1_result = sortResultInt([
              [],
              [3],
              [2],
              [
                2,
                3
              ],
              [1],
              [
                1,
                3
              ],
              [
                1,
                2
              ],
              [
                1,
                2,
                3
              ]
            ]);
        var string_array_1 = [
          "a",
          "b",
          "c"
        ];
        var string_array_1_result = sortResultString([
              [],
              ["c"],
              ["b"],
              [
                "b",
                "c"
              ],
              ["a"],
              [
                "a",
                "c"
              ],
              [
                "a",
                "b"
              ],
              [
                "a",
                "b",
                "c"
              ]
            ]);
        Jest.describe("powerset_array_with_list()", (function (param) {
                var int_tests_0 = [
                  Powerset$AdventOfCode.powersetArrayWithList_(int_array_1),
                  int_array_1_result
                ];
                var int_tests = {
                  hd: int_tests_0,
                  tl: /* [] */0
                };
                var string_tests_0 = [
                  Powerset$AdventOfCode.powersetArrayWithList_(string_array_1),
                  string_array_1_result
                ];
                var string_tests = {
                  hd: string_tests_0,
                  tl: /* [] */0
                };
                Jest.testAll("int", int_tests, (function (param) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(sortResultInt(param[0])), param[1]);
                      }));
                Jest.testAll("string", string_tests, (function (param) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(sortResultString(param[0])), param[1]);
                      }));
              }));
        Jest.describe("powerset_array()", (function (param) {
                var int_tests_0 = [
                  Powerset$AdventOfCode.powersetArray(int_array_1),
                  int_array_1_result
                ];
                var int_tests = {
                  hd: int_tests_0,
                  tl: /* [] */0
                };
                var string_tests_0 = [
                  Powerset$AdventOfCode.powersetArray(string_array_1),
                  string_array_1_result
                ];
                var string_tests = {
                  hd: string_tests_0,
                  tl: /* [] */0
                };
                Jest.testAll("int", int_tests, (function (param) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(sortResultInt(param[0])), param[1]);
                      }));
                Jest.testAll("string", string_tests, (function (param) {
                        return Jest.Expect.toEqual(Jest.Expect.expect(sortResultString(param[0])), param[1]);
                      }));
              }));
      }));

var $$Array;

export {
  $$Array ,
  intCmp ,
  sortResultInt ,
  strCmp ,
  sortResultString ,
}
/*  Not a pure module */
